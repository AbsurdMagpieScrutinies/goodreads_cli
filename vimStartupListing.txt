
chdir(/usr/share/vim)
fchdir() to previous dir
could not source "$VIM/vimrc"
chdir(/home/you)
fchdir() to previous dir
could not source "$HOME/.vimrc"
chdir(/home/you/.vim)
fchdir() to previous dir
sourcing "~/.vim/vimrc"
line 1: 
line 2: " --- include guard: don't source this file twice
line 3: if exists('g:haveLoadedMyVimrc')
line 4: ^I"
line 5: ^I"Currently 2019-08-19 Mon, /etc/vim/vimrc is a link to ~/.vim/vimrc, so
line 6: ^I"can be read twice. 
line 7: ^I" echo "re-reading my vimrc"
line 8: ^I" sleep 10
line 9: ^Ifinish
line 10: endif
line 11: let g:haveLoadedMyVimrc = 1
line 12: 
line 13: 
line 14: if has("unix")
line 15: ^Iruntime! debian.vim
Searching for "debian.vim" in "/home/you/.vim,/etc/vim,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/etc/vim/after,/home/you/.vim/after"
Searching for "/home/you/.vim/debian.vim"
Searching for "/etc/vim/debian.vim"
Searching for "/usr/share/vim/vimfiles/debian.vim"
Searching for "/usr/share/vim/vim81/debian.vim"
chdir(/usr/share/vim/vim81)
fchdir() to previous dir
line 15: sourcing "/usr/share/vim/vim81/debian.vim"
line 1: " Debian system-wide default configuration Vim
line 2: 
line 3: set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
line 4: 
line 5: " Normally we use vim-extensions. If you want true vi-compatibility
line 6: " remove change the following statements
line 7: set nocompatible^I" Use Vim defaults instead of 100% vi compatibility
line 8: set backspace=indent,eol,start^I" more powerful backspacing
line 9: 
line 10: " Now we set some defaults for the editor
line 11: set history=50^I^I" keep 50 lines of command line history
line 12: set ruler^I^I" show the cursor position all the time
line 13: 
line 14: " modelines have historically been a source of security/resource
line 15: " vulnerabilities -- disable by default, even when 'nocompatible' is set
line 16: set nomodeline
line 17: 
line 18: " Suffixes that get lower priority when doing tab completion for filenames.
line 19: " These are files we are not likely to want to edit or read.
line 20: set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
line 21: 
line 22: " We know xterm-debian is a color terminal
line 23: if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
line 24:   set t_Co=16
line 25:   set t_Sf=^[[3%dm
line 26:   set t_Sb=^[[4%dm
line 27: endif
line 28: 
line 29: " Some Debian-specific things
line 30: if has('gui')
line 31:   " Must define this within the :if so it does not cause problems with
line 32:   " vim-tiny (which does not have +eval)
line 33:   function! <SID>MapExists(name, modes)
line 41: 
line 42:   " Make shift-insert work like in Xterm
line 43:   autocmd GUIEnter * if !<SID>MapExists("<S-Insert>", "nvso") | execute "map <S-Insert> <MiddleMouse>" | endif
line 44:   autocmd GUIEnter * if !<SID>MapExists("<S-Insert>", "ic") | execute "map! <S-Insert> <MiddleMouse>" | endif
line 45: endif
line 46: 
line 47: " Set paper size from /etc/papersize if available (Debian-specific)
line 48: if filereadable("/etc/papersize")
line 49:   let s:papersize = matchstr(readfile('/etc/papersize', '', 1), '\p*')
line 50:   if strlen(s:papersize)
line 51:     exe "set printoptions+=paper:" . s:papersize
line 51: set printoptions+=paper:a4
line 52:   endif
line 53: endif
line 54: 
finished sourcing /usr/share/vim/vim81/debian.vim
continuing in /home/you/.vim/vimrc
Searching for "/usr/share/vim/vimfiles/after/debian.vim"
Searching for "/etc/vim/after/debian.vim"
Searching for "/home/you/.vim/after/debian.vim"
line 16: ^Isource /usr/share/vim/vimcurrent/debian.vim 
chdir(/usr/share/vim/vimcurrent)
fchdir() to previous dir
line 16: sourcing "/usr/share/vim/vimcurrent/debian.vim"
line 1: " Debian system-wide default configuration Vim
line 2: 
line 3: set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
line 4: 
line 5: " Normally we use vim-extensions. If you want true vi-compatibility
line 6: " remove change the following statements
line 7: set nocompatible^I" Use Vim defaults instead of 100% vi compatibility
line 8: set backspace=indent,eol,start^I" more powerful backspacing
line 9: 
line 10: " Now we set some defaults for the editor
line 11: set history=50^I^I" keep 50 lines of command line history
line 12: set ruler^I^I" show the cursor position all the time
line 13: 
line 14: " modelines have historically been a source of security/resource
line 15: " vulnerabilities -- disable by default, even when 'nocompatible' is set
line 16: set nomodeline
line 17: 
line 18: " Suffixes that get lower priority when doing tab completion for filenames.
line 19: " These are files we are not likely to want to edit or read.
line 20: set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
line 21: 
line 22: " We know xterm-debian is a color terminal
line 23: if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
line 24:   set t_Co=16
line 25:   set t_Sf=^[[3%dm
line 26:   set t_Sb=^[[4%dm
line 27: endif
line 28: 
line 29: " Some Debian-specific things
line 30: if has('gui')
line 31:   " Must define this within the :if so it does not cause problems with
line 32:   " vim-tiny (which does not have +eval)
line 33:   function! <SID>MapExists(name, modes)
line 41: 
line 42:   " Make shift-insert work like in Xterm
line 43:   autocmd GUIEnter * if !<SID>MapExists("<S-Insert>", "nvso") | execute "map <S-Insert> <MiddleMouse>" | endif
line 44:   autocmd GUIEnter * if !<SID>MapExists("<S-Insert>", "ic") | execute "map! <S-Insert> <MiddleMouse>" | endif
line 45: endif
line 46: 
line 47: " Set paper size from /etc/papersize if available (Debian-specific)
line 48: if filereadable("/etc/papersize")
line 49:   let s:papersize = matchstr(readfile('/etc/papersize', '', 1), '\p*')
line 50:   if strlen(s:papersize)
line 51:     exe "set printoptions+=paper:" . s:papersize
line 51: set printoptions+=paper:a4
line 52:   endif
line 53: endif
line 54: 
finished sourcing /usr/share/vim/vimcurrent/debian.vim
continuing in /home/you/.vim/vimrc
line 17: ^Ilet &rtp .= ','.expand('/usr/share/vim-scripts')^I^I" for colorschemes and others
line 18: endif
line 19: 
line 20: set      nocompatible
line 21: syntax   enable
line 21: so $VIMRUNTIME/syntax/syntax.vim
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 21: sourcing "/usr/share/vim/vim81/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/synload.vim"
Searching for "/var/lib/vim/addons/syntax/synload.vim"
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"
Searching for "/usr/share/vim/vim81/syntax/synload.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 19: sourcing "/usr/share/vim/vim81/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2016 Nov 04
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Set the default highlighting colors.  Use a color scheme if specified.
line 18: if exists("colors_name")
line 19:   exe "colors " . colors_name
line 20: else
line 21:   runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim81/syntax/syncolor.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 21: sourcing "/usr/share/vim/vim81/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi def Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi def Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi def Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi def Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi def Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi def PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi def Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi def Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi def Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi def Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi def Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi def link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi def link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi def link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi def link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi def link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi def link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi def link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi def link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi def link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi def link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi def link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi def link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi def link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi def link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi def link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi def link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi def link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi def link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi def link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi def link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi def link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi def link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi def link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi def link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim81/syntax/syncolor.vim
continuing in /usr/share/vim/vim81/syntax/synload.vim
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/you/.vim/after/syntax/syncolor.vim"
Searching for "/usr/share/vim-scripts/syntax/syncolor.vim"
line 22: endif
line 23: 
line 24: " Line continuation is used here, remove 'C' from 'cpoptions'
line 25: let s:cpo_save = &cpo
line 26: set cpo&vim
line 27: 
line 28: " First remove all old syntax autocommands.
line 29: au! Syntax
line 30: 
line 31: au Syntax *^I^Icall s:SynSet()
line 32: 
line 33: fun! s:SynSet()
line 61: 
line 62: 
line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 68: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 69: 
line 70: 
line 71: " Source the user-specified syntax highlighting file
line 72: if exists("mysyntaxfile")
line 73:   let s:fname = expand(mysyntaxfile)
line 74:   if filereadable(s:fname)
line 75:     execute "source " . fnameescape(s:fname)
line 76:   endif
line 77: endif
line 78: 
line 79: " Restore 'cpoptions'
line 80: let &cpo = s:cpo_save
line 81: unlet s:cpo_save
finished sourcing /usr/share/vim/vim81/syntax/synload.vim
continuing in /usr/share/vim/vim81/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
Searching for "filetype.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/filetype.vim"
Searching for "/var/lib/vim/addons/filetype.vim"
Searching for "/usr/share/vim/vimfiles/filetype.vim"
Searching for "/usr/share/vim/vim81/filetype.vim"
chdir(/usr/share/vim/vim81)
fchdir() to previous dir
line 25: sourcing "/usr/share/vim/vim81/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2019 Jan 28
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
line 9: endif
line 10: let did_load_filetypes = 1
line 11: 
line 12: " Line continuation is used here, remove 'C' from 'cpoptions'
line 13: let s:cpo_save = &cpo
line 14: set cpo&vim
line 15: 
line 16: augroup filetypedetect
line 17: 
line 18: " Ignored extensions
line 19: if exists("*fnameescape")
line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
line 28: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short
line 32: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif
line 33: elseif &verbose > 0
line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
line 35: endif
line 36: 
line 37: " Pattern used to match file names which should not be inspected.
line 38: " Currently finds compressed files.
line 39: if !exists("g:ft_ignore_pat")
line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
line 41: endif
line 42: 
line 43: " Function used for patterns that end in a star: don't set the filetype if the
line 44: " file name matches ft_ignore_pat.
line 45: func! s:StarSetf(ft)
line 50: 
line 51: " Vim help file
line 52: au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt^Isetf help
line 53: 
line 54: " Abaqus or Trasys
line 55: au BufNewFile,BufRead *.inp^I^I^Icall dist#ft#Check_inp()
line 56: 
line 57: " A-A-P recipe
line 58: au BufNewFile,BufRead *.aap^I^I^Isetf aap
line 59: 
line 60: " A2ps printing utility
line 61: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps
line 62: 
line 63: " ABAB/4
line 64: au BufNewFile,BufRead *.abap^I^I^Isetf abap
line 65: 
line 66: " ABC music notation
line 67: au BufNewFile,BufRead *.abc^I^I^Isetf abc
line 68: 
line 69: " ABEL
line 70: au BufNewFile,BufRead *.abl^I^I^Isetf abel
line 71: 
line 72: " AceDB
line 73: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb
line 74: 
line 75: " Ada (83, 9X, 95)
line 76: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada
line 77: if has("vms")
line 78:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada
line 79: else
line 80:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada
line 81: endif
line 82: 
line 83: " AHDL
line 84: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl
line 85: 
line 86: " AMPL
line 87: au BufNewFile,BufRead *.run^I^I^Isetf ampl
line 88: 
line 89: " Ant
line 90: au BufNewFile,BufRead build.xml^I^I^Isetf ant
line 91: 
line 92: " Arduino
line 93: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino
line 94: 
line 95: " Apache style config file
line 96: au BufNewFile,BufRead proftpd.conf*^I^Icall s:StarSetf('apachestyle')
line 97: 
line 98: " Apache config file
line 99: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache
line 100: au BufNewFile,BufRead */etc/apache2/sites-*/*.com^I^Isetf apache
line 101: 
line 102: " XA65 MOS6510 cross assembler
line 103: au BufNewFile,BufRead *.a65^I^I^Isetf a65
line 104: 
line 105: " Applescript
line 106: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript
line 107: 
line 108: " Applix ELF
line 110: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif
line 111: 
line 112: " ALSA configuration
line 113: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf
line 114: 
line 115: " Arc Macro Language
line 116: au BufNewFile,BufRead *.aml^I^I^Isetf aml
line 117: 
line 118: " APT config file
line 119: au BufNewFile,BufRead apt.conf^I^I       setf aptconf
line 120: au BufNewFile,BufRead */.aptitude/config       setf aptconf
line 121: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf
line 122: 
line 123: " Arch Inventory file
line 124: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch
line 125: 
line 126: " ART*Enterprise (formerly ART-IM)
line 127: au BufNewFile,BufRead *.art^I^I^Isetf art
line 128: 
line 129: " AsciiDoc
line 130: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc
line 131: 
line 132: " ASN.1
line 133: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn
line 134: 
line 135: " Active Server Pages (with Visual Basic Script)
line 141: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif
line 142: 
line 143: " Active Server Pages (with Perl or Visual Basic Script)
line 151: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif
line 152: 
line 153: " Grub (must be before catch *.lst)
line 154: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub
line 155: 
line 156: " Assembly (all kinds)
line 157: " *.lst is not pure assembly, it has two extra columns (address, byte codes)
line 158: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall dist#ft#FTasm()
line 159: 
line 160: " Macro (VAX)
line 161: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm
line 162: 
line 163: " Atlas
line 164: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas
line 165: 
line 166: " Autoit v3
line 167: au BufNewFile,BufRead *.au3^I^I^Isetf autoit
line 168: 
line 169: " Autohotkey
line 170: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey
line 171: 
line 172: " Automake
line 173: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake
line 174: 
line 175: " Autotest .at files are actually m4
line 176: au BufNewFile,BufRead *.at^I^I^Isetf m4
line 177: 
line 178: " Avenue
line 179: au BufNewFile,BufRead *.ave^I^I^Isetf ave
line 180: 
line 181: " Awk
line 182: au BufNewFile,BufRead *.awk^I^I^Isetf awk
line 183: 
line 184: " B
line 185: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b
line 186: 
line 187: " BASIC or Visual Basic
line 188: au BufNewFile,BufRead *.bas^I^I^Icall dist#ft#FTVB("basic")
line 189: 
line 190: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET
line 191: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb
line 192: 
line 193: " IBasic file (similar to QBasic)
line 194: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic
line 195: 
line 196: " FreeBasic file (similar to QBasic)
line 197: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic
line 198: 
line 199: " Batch file for MSDOS.
line 200: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch
line 201: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
line 203: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
line 204: 
line 205: " Batch file for 4DOS
line 206: au BufNewFile,BufRead *.btm^I^I^Icall dist#ft#FTbtm()
line 207: 
line 208: " BC calculator
line 209: au BufNewFile,BufRead *.bc^I^I^Isetf bc
line 210: 
line 211: " BDF font
line 212: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf
line 213: 
line 214: " BibTeX bibliography database file
line 215: au BufNewFile,BufRead *.bib^I^I^Isetf bib
line 216: 
line 217: " BibTeX Bibliography Style
line 218: au BufNewFile,BufRead *.bst^I^I^Isetf bst
line 219: 
line 220: " BIND configuration
line 221: " sudoedit uses namedXXXX.conf
line 222: au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key^Isetf named
line 223: 
line 224: " BIND zone
line 225: au BufNewFile,BufRead named.root^I^Isetf bindzone
line 226: au BufNewFile,BufRead *.db^I^I^Icall dist#ft#BindzoneCheck('')
line 227: 
line 228: " Blank
line 229: au BufNewFile,BufRead *.bl^I^I^Isetf blank
line 230: 
line 231: " Blkid cache file
line 232: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml
line 233: 
line 234: " Bazel (http://bazel.io)
line 235: autocmd BufRead,BufNewFile *.bzl,WORKSPACE,BUILD.bazel ^Isetf bzl
line 236: if has("fname_case")
line 237:   " There is another check for BUILD further below.
line 238:   autocmd BufRead,BufNewFile BUILD^I^I^Isetf bzl
line 239: endif
line 240: 
line 241: " C or lpc
line 242: au BufNewFile,BufRead *.c^I^I^Icall dist#ft#FTlpc()
line 243: au BufNewFile,BufRead *.lpc,*.ulpc^I^Isetf lpc
line 244: 
line 245: " Calendar
line 246: au BufNewFile,BufRead calendar^I^I^Isetf calendar
line 247: 
line 248: " C#
line 249: au BufNewFile,BufRead *.cs^I^I^Isetf cs
line 250: 
line 251: " CSDL
line 252: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl
line 253: 
line 254: " Cabal
line 255: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal
line 256: 
line 257: " Cdrdao TOC
line 258: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc
line 259: 
line 260: " Cdrdao config
line 261: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf
line 262: 
line 263: " Cfengine
line 264: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine
line 265: 
line 266: " ChaiScript
line 267: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript
line 268: 
line 269: " Comshare Dimension Definition Language
line 270: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl
line 271: 
line 272: " Conary Recipe
line 273: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe
line 274: 
line 275: " Controllable Regex Mutilator
line 276: au BufNewFile,BufRead *.crm^I^I^Isetf crm
line 277: 
line 278: " Cyn++
line 279: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp
line 280: 
line 281: " Cynlib
line 282: " .cc and .cpp files can be C++ or Cynlib.
line 284: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif
line 286: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
line 287: 
line 288: " C++
line 289: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp
line 290: if has("fname_case")
line 291:   au BufNewFile,BufRead *.C,*.H setf cpp
line 292: endif
line 293: 
line 294: " .h files can be C, Ch C++, ObjC or ObjC++.
line 295: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is
line 296: " detected automatically.
line 297: au BufNewFile,BufRead *.h^I^I^Icall dist#ft#FTheader()
line 298: 
line 299: " Ch (CHscript)
line 300: au BufNewFile,BufRead *.chf^I^I^Isetf ch
line 301: 
line 302: " TLH files are C++ headers generated by Visual C++'s #import from typelibs
line 303: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp
line 304: 
line 305: " Cascading Style Sheets
line 306: au BufNewFile,BufRead *.css^I^I^Isetf css
line 307: 
line 308: " Century Term Command Scripts (*.cmd too)
line 309: au BufNewFile,BufRead *.con^I^I^Isetf cterm
line 310: 
line 311: " Changelog
line 313: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch^Isetf debchangelog
line 314: 
line 320: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif
line 321: 
line 325: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif
line 326: 
line 327: " CHILL
line 328: au BufNewFile,BufRead *..ch^I^I^Isetf chill
line 329: 
line 330: " Changes for WEB and CWEB or CHILL
line 331: au BufNewFile,BufRead *.ch^I^I^Icall dist#ft#FTchange()
line 332: 
line 333: " ChordPro
line 334: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro
line 335: 
line 336: " Clean
line 337: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean
line 338: 
line 339: " Clever
line 340: au BufNewFile,BufRead *.eni^I^I^Isetf cl
line 341: 
line 342: " Clever or dtd
line 343: au BufNewFile,BufRead *.ent^I^I^Icall dist#ft#FTent()
line 344: 
line 345: " Clipper (or FoxPro; could also be eviews)
line 351: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif
line 352: 
line 353: " Clojure
line 354: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure
line 355: 
line 356: " Cmake
line 357: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake
line 358: 
line 359: " Cmusrc
line 360: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc
line 361: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc
line 362: 
line 363: " Cobol
line 364: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol
line 365: "   cobol or zope form controller python script? (heuristic)
line 371: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif
line 372: 
line 373: " Coco/R
line 374: au BufNewFile,BufRead *.atg^I^I^Isetf coco
line 375: 
line 376: " Cold Fusion
line 377: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf
line 378: 
line 379: " Configure scripts
line 380: au BufNewFile,BufRead configure.in,configure.ac setf config
line 381: 
line 382: " CUDA  Cumpute Unified Device Architecture
line 383: au BufNewFile,BufRead *.cu,*.cuh^I^Isetf cuda
line 384: 
line 385: " Dockerfile
line 386: au BufNewFile,BufRead Dockerfile,*.Dockerfile^Isetf dockerfile
line 387: 
line 388: " WildPackets EtherPeek Decoder
line 389: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd
line 390: 
line 391: " Enlightenment configuration files
line 392: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c
line 393: 
line 394: " Eterm
line 395: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm
line 396: 
line 397: " Euphoria 3 or 4
line 398: au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call dist#ft#EuphoriaCheck()
line 399: if has("fname_case")
line 400:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call dist#ft#EuphoriaCheck()
line 401: endif
line 402: 
line 403: " Lynx config files
line 404: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx
line 405: 
line 406: " Quake
line 407: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake
line 408: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake
line 409: 
line 410: " Quake C
line 411: au BufNewFile,BufRead *.qc^I^I^Isetf c
line 412: 
line 413: " Configure files
line 414: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg
line 415: 
line 416: " Cucumber
line 417: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber
line 418: 
line 419: " Communicating Sequential Processes
line 420: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp
line 421: 
line 422: " CUPL logic description and simulation
line 423: au BufNewFile,BufRead *.pld^I^I^Isetf cupl
line 424: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim
line 425: 
line 426: " Debian Control
line 427: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol
line 431: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif
line 432: 
line 433: " Debian Copyright
line 434: au BufNewFile,BufRead */debian/copyright^Isetf debcopyright
line 438: au BufNewFile,BufRead copyright  if getline(1) =~ '^Format:'|   setf debcopyright| endif
line 439: 
line 440: " Debian Sources.list
line 441: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources
line 442: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources
line 443: 
line 444: " Deny hosts
line 445: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts
line 446: 
line 447: " dnsmasq(8) configuration files
line 448: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq
line 449: 
line 450: " ROCKLinux package description
line 451: au BufNewFile,BufRead *.desc^I^I^Isetf desc
line 452: 
line 453: " the D language or dtrace
line 454: au BufNewFile,BufRead *.d^I^I^Icall dist#ft#DtraceCheck()
line 455: 
line 456: " Desktop files
line 457: au BufNewFile,BufRead *.desktop,.directory^Isetf desktop
line 458: 
line 459: " Dict config
line 460: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf
line 461: 
line 462: " Dictd config
line 463: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf
line 464: 
line 465: " Diff files
line 466: au BufNewFile,BufRead *.diff,*.rej^I^Isetf diff
line 472: au BufNewFile,BufRead *.patch if getline(1) =~ '^From [0-9a-f]\{40\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif
line 473: 
line 474: " Dircolors
line 475: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors
line 476: 
line 477: " Diva (with Skill) or InstallShield
line 483: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif
line 484: 
line 485: " DCL (Digital Command Language - vms) or DNS zone file
line 486: au BufNewFile,BufRead *.com^I^I^Icall dist#ft#BindzoneCheck('dcl')
line 487: 
line 488: " DOT
line 489: au BufNewFile,BufRead *.dot^I^I^Isetf dot
line 490: 
line 491: " Dylan - lid files
line 492: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid
line 493: 
line 494: " Dylan - intr files (melange)
line 495: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr
line 496: 
line 497: " Dylan
line 498: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan
line 499: 
line 500: " Microsoft Module Definition
line 501: au BufNewFile,BufRead *.def^I^I^Isetf def
line 502: 
line 503: " Dracula
line 504: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula
line 505: 
line 506: " Datascript
line 507: au BufNewFile,BufRead *.ds^I^I^Isetf datascript
line 508: 
line 509: " dsl
line 510: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl
line 511: 
line 512: " DTD (Document Type Definition for XML)
line 513: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd
line 514: 
line 515: " DTS/DSTI (device tree files)
line 516: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts
line 517: 
line 518: " EDIF (*.edf,*.edif,*.edn,*.edo) or edn
line 519: au BufNewFile,BufRead *.ed\(f\|if\|o\)^I^Isetf edif
line 525: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif
line 526: 
line 527: " EditorConfig (close enough to dosini)
line 528: au BufNewFile,BufRead .editorconfig^I^Isetf dosini
line 529: 
line 530: " Embedix Component Description
line 531: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd
line 532: 
line 533: " Eiffel or Specman or Euphoria
line 534: au BufNewFile,BufRead *.e,*.E^I^I^Icall dist#ft#FTe()
line 535: 
line 536: " Elinks configuration
line 537: au BufNewFile,BufRead */etc/elinks.conf,*/.elinks/elinks.conf^Isetf elinks
line 538: 
line 539: " ERicsson LANGuage; Yaws is erlang too
line 540: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang
line 541: 
line 542: " Elm Filter Rules file
line 543: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt
line 544: 
line 545: " ESMTP rc file
line 546: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc
line 547: 
line 548: " ESQL-C
line 549: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc
line 550: 
line 551: " Esterel
line 552: au BufNewFile,BufRead *.strl^I^I^Isetf esterel
line 553: 
line 554: " Essbase script
line 555: au BufNewFile,BufRead *.csc^I^I^Isetf csc
line 556: 
line 557: " Exim
line 558: au BufNewFile,BufRead exim.conf^I^I^Isetf exim
line 559: 
line 560: " Expect
line 561: au BufNewFile,BufRead *.exp^I^I^Isetf expect
line 562: 
line 563: " Exports
line 564: au BufNewFile,BufRead exports^I^I^Isetf exports
line 565: 
line 566: " Falcon
line 567: au BufNewFile,BufRead *.fal^I^I^Isetf falcon
line 568: 
line 569: " Fantom
line 570: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan
line 571: 
line 572: " Factor
line 573: au BufNewFile,BufRead *.factor^I^I^Isetf factor
line 574: 
line 575: " Fetchmail RC file
line 576: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail
line 577: 
line 578: " FlexWiki - disabled, because it has side effects when a .wiki file
line 579: " is not actually FlexWiki
line 580: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki
line 581: 
line 582: " Focus Executable
line 583: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec
line 584: 
line 585: " Focus Master file (but not for auto.master)
line 586: au BufNewFile,BufRead auto.master^I^Isetf conf
line 587: au BufNewFile,BufRead *.mas,*.master^I^Isetf master
line 588: 
line 589: " Forth
line 590: au BufNewFile,BufRead *.fs,*.ft,*.fth^I^Isetf forth
line 591: 
line 592: " Reva Forth
line 593: au BufNewFile,BufRead *.frt^I^I^Isetf reva
line 594: 
line 595: " Fortran
line 596: if has("fname_case")
line 597:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran
line 598: endif
line 599: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran
line 600: 
line 601: " Framescript
line 602: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript
line 603: 
line 604: " FStab
line 605: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab
line 606: 
line 607: " GDB command files
line 608: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb
line 609: 
line 610: " GDMO
line 611: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo
line 612: 
line 613: " Gedcom
line 614: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom
line 615: 
line 616: " Git
line 617: au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG ^Isetf gitcommit
line 618: au BufNewFile,BufRead *.git/config,.gitconfig,/etc/gitconfig ^Isetf gitconfig
line 619: au BufNewFile,BufRead */.config/git/config^I^I^Isetf gitconfig
line 620: au BufNewFile,BufRead .gitmodules,*.git/modules/*/config^Isetf gitconfig
line 621: if !empty($XDG_CONFIG_HOME)
line 622:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Isetf gitconfig
line 623: endif
line 624: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase
line 625: au BufRead,BufNewFile .gitsendemail.msg.??????^Isetf gitsendemail
line 629: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif
line 633: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif
line 634: 
line 635: " Gkrellmrc
line 636: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc
line 637: 
line 638: " GP scripts (2.0 and onward)
line 639: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp
line 640: 
line 641: " GPG
line 642: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg
line 643: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg
line 644: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg
line 645: if !empty($GNUPGHOME)
line 646:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg
line 647:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg
line 648: endif
line 649: 
line 650: " gnash(1) configuration files
line 651: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash
line 652: 
line 653: " Gitolite
line 654: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite
line 655: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')
line 656: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl
line 657: 
line 658: " Gnuplot scripts
line 659: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot
line 660: 
line 661: " Go (Google)
line 662: au BufNewFile,BufRead *.go^I^I^Isetf go
line 663: 
line 664: " GrADS scripts
line 665: au BufNewFile,BufRead *.gs^I^I^Isetf grads
line 666: 
line 667: " Gretl
line 668: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl
line 669: 
line 670: " Groovy
line 671: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy
line 672: 
line 673: " GNU Server Pages
line 674: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp
line 675: 
line 676: " Group file
line 677: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group
line 678: 
line 679: " GTK RC
line 680: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc
line 681: 
line 682: " Haml
line 683: au BufNewFile,BufRead *.haml^I^I^Isetf haml
line 684: 
line 685: " Hamster Classic | Playground files
line 686: au BufNewFile,BufRead *.hsc,*.hsm^I^Isetf hamster
line 687: 
line 688: " Haskell
line 689: au BufNewFile,BufRead *.hs,*.hs-boot^I^Isetf haskell
line 690: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell
line 691: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell
line 692: 
line 693: " Haste
line 694: au BufNewFile,BufRead *.ht^I^I^Isetf haste
line 695: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc
line 696: 
line 697: " Hercules
line 698: au BufNewFile,BufRead *.vc,*.ev,*.sum,*.errsum^Isetf hercules
line 699: 
line 700: " HEX (Intel)
line 701: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex
line 702: 
line 703: " Tilde (must be before HTML)
line 704: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde
line 705: 
line 706: " HTML (.shtml and .stm for server side)
line 707: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call dist#ft#FThtml()
line 708: 
line 709: " HTML with Ruby - eRuby
line 710: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby
line 711: 
line 712: " HTML with M4
line 713: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4
line 714: 
line 715: " HTML Cheetah template
line 716: au BufNewFile,BufRead *.tmpl^I^I^Isetf htmlcheetah
line 717: 
line 718: " Host config
line 719: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf
line 720: 
line 721: " Hosts access
line 722: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess
line 723: 
line 724: " Hyper Builder
line 725: au BufNewFile,BufRead *.hb^I^I^Isetf hb
line 726: 
line 727: " Httest
line 728: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest
line 729: 
line 730: " Icon
line 731: au BufNewFile,BufRead *.icn^I^I^Isetf icon
line 732: 
line 733: " IDL (Interface Description Language)
line 734: au BufNewFile,BufRead *.idl^I^I^Icall dist#ft#FTidl()
line 735: 
line 736: " Microsoft IDL (Interface Description Language)  Also *.idl
line 737: " MOF = WMI (Windows Management Instrumentation) Managed Object Format
line 738: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl
line 739: 
line 740: " Icewm menu
line 741: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu
line 742: 
line 743: " Indent profile (must come before IDL *.pro!)
line 744: au BufNewFile,BufRead .indent.pro^I^Isetf indent
line 745: au BufNewFile,BufRead indent.pro^I^Icall dist#ft#ProtoCheck('indent')
line 746: 
line 747: " IDL (Interactive Data Language)
line 748: au BufNewFile,BufRead *.pro^I^I^Icall dist#ft#ProtoCheck('idlang')
line 749: 
line 750: " Indent RC
line 751: au BufNewFile,BufRead indentrc^I^I^Isetf indent
line 752: 
line 753: " Inform
line 754: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform
line 755: 
line 756: " Initng
line 757: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng
line 758: 
line 759: " Innovation Data Processing
line 760: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c ^Isetf upstreamdat
line 761: au BufRead,BufNewFile fdrupstream.log,upstream.log\c,upstream.*.log\c,*.upstream.log\c,UPSTREAM-*.log\c ^Isetf upstreamlog
line 762: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog
line 763: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c ^Isetf usserverlog
line 764: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c ^Isetf usw2kagtlog
line 765: 
line 766: " Ipfilter
line 767: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter
line 768: 
line 769: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)
line 770: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl
line 771: 
line 772: " .INI file for MSDOS
line 773: au BufNewFile,BufRead *.ini^I^I^Isetf dosini
line 774: 
line 775: " SysV Inittab
line 776: au BufNewFile,BufRead inittab^I^I^Isetf inittab
line 777: 
line 778: " Inno Setup
line 779: au BufNewFile,BufRead *.iss^I^I^Isetf iss
line 780: 
line 781: " J
line 782: au BufNewFile,BufRead *.ijs^I^I^Isetf j
line 783: 
line 784: " JAL
line 785: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal
line 786: 
line 787: " Jam
line 788: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam
line 789: 
line 790: " Java
line 791: au BufNewFile,BufRead *.java,*.jav^I^Isetf java
line 792: 
line 793: " JavaCC
line 794: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc
line 795: 
line 796: " JavaScript, ECMAScript
line 797: au BufNewFile,BufRead *.js,*.javascript,*.es,*.jsx,*.mjs   setf javascript
line 798: 
line 799: " Java Server Pages
line 800: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp
line 801: 
line 802: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 803: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties
line 804: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')
line 805: 
line 806: " Jess
line 807: au BufNewFile,BufRead *.clp^I^I^Isetf jess
line 808: 
line 809: " Jgraph
line 810: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph
line 811: 
line 812: " Jovial
line 813: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial
line 814: 
line 815: " JSON
line 816: au BufNewFile,BufRead *.json,*.jsonp,*.webmanifest^Isetf json
line 817: 
line 818: " Kixtart
line 819: au BufNewFile,BufRead *.kix^I^I^Isetf kix
line 820: 
line 821: " Kimwitu[++]
line 822: au BufNewFile,BufRead *.k^I^I^Isetf kwt
line 823: 
line 824: " Kivy
line 825: au BufNewFile,BufRead *.kv^I^I^Isetf kivy
line 826: 
line 827: " KDE script
line 828: au BufNewFile,BufRead *.ks^I^I^Isetf kscript
line 829: 
line 830: " Kconfig
line 831: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig
line 832: 
line 833: " Lace (ISE)
line 834: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace
line 835: 
line 836: " Latte
line 837: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte
line 838: 
line 839: " Limits
line 840: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits
line 841: 
line 842: " LambdaProlog (*.mod too, see Modsim)
line 843: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog
line 844: 
line 845: " LDAP LDIF
line 846: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif
line 847: 
line 848: " Ld loader
line 849: au BufNewFile,BufRead *.ld^I^I^Isetf ld
line 850: 
line 851: " Less
line 852: au BufNewFile,BufRead *.less^I^I^Isetf less
line 853: 
line 854: " Lex
line 855: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex
line 856: 
line 857: " Libao
line 858: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao
line 859: 
line 860: " Libsensors
line 861: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors
line 862: 
line 863: " LFTP
line 864: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp
line 865: 
line 866: " Lifelines (or Lex for C++!)
line 867: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines
line 868: 
line 869: " Lilo: Linux loader
line 870: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo
line 871: 
line 872: " Lisp (*.el = ELisp, *.cl = Common Lisp, *.jl = librep Lisp)
line 873: if has("fname_case")
line 874:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,*.L,.emacs,.sawfishrc setf lisp
line 875: else
line 876:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,.emacs,.sawfishrc setf lisp
line 877: endif
line 878: 
line 879: " SBCL implementation of Common Lisp
line 880: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp
line 881: 
line 882: " Liquid
line 883: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid
line 884: 
line 885: " Lite
line 886: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite
line 887: 
line 888: " LiteStep RC files
line 889: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep
line 890: 
line 891: " Login access
line 892: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess
line 893: 
line 894: " Login defs
line 895: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs
line 896: 
line 897: " Logtalk
line 898: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk
line 899: 
line 900: " LOTOS
line 901: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos
line 902: 
line 903: " Lout (also: *.lt)
line 904: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout
line 905: 
line 906: " Lua
line 907: au BufNewFile,BufRead *.lua^I^I^Isetf lua
line 908: 
line 909: " Luarocks
line 910: au BufNewFile,BufRead *.rockspec^I^Isetf lua
line 911: 
line 912: " Linden Scripting Language (Second Life)
line 913: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl
line 914: 
line 915: " Lynx style file (or LotusScript!)
line 916: au BufNewFile,BufRead *.lss^I^I^Isetf lss
line 917: 
line 918: " M4
line 920: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
line 921: 
line 922: " MaGic Point
line 923: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp
line 924: 
line 925: " Mail (for Elm, trn, mutt, muttng, rn, slrn, neomutt)
line 926: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail
line 927: 
line 928: " Mail aliases
line 929: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases
line 930: 
line 931: " Mailcap configuration file
line 932: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap
line 933: 
line 934: " Makefile
line 935: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make
line 936: 
line 937: " MakeIndex
line 938: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist
line 939: 
line 940: " Mallard
line 941: au BufNewFile,BufRead *.page^I^I^Isetf mallard
line 942: 
line 943: " Manpage
line 944: au BufNewFile,BufRead *.man^I^I^Isetf man
line 945: 
line 946: " Man config
line 947: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf
line 948: 
line 949: " Maple V
line 950: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple
line 951: 
line 952: " Map (UMN mapserver config file)
line 953: au BufNewFile,BufRead *.map^I^I^Isetf map
line 954: 
line 955: " Markdown
line 956: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown
line 957: 
line 958: " Mason
line 959: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason
line 960: 
line 961: " Mathematica, Matlab, Murphi or Objective C
line 962: au BufNewFile,BufRead *.m^I^I^Icall dist#ft#FTm()
line 963: 
line 964: " Mathematica notebook
line 965: au BufNewFile,BufRead *.nb^I^I^Isetf mma
line 966: 
line 967: " Maya Extension Language
line 968: au BufNewFile,BufRead *.mel^I^I^Isetf mel
line 969: 
line 970: " Mercurial (hg) commit file
line 971: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit
line 972: 
line 973: " Mercurial config (looks like generic config file)
line 974: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg
line 975: 
line 976: " Messages (logs mostly)
line 977: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
line 978: 
line 979: " Metafont
line 980: au BufNewFile,BufRead *.mf^I^I^Isetf mf
line 981: 
line 982: " MetaPost
line 983: au BufNewFile,BufRead *.mp^I^I^Isetf mp
line 984: 
line 985: " MGL
line 986: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl
line 987: 
line 988: " MIX - Knuth assembly
line 989: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix
line 990: 
line 991: " MMIX or VMS makefile
line 992: au BufNewFile,BufRead *.mms^I^I^Icall dist#ft#FTmms()
line 993: 
line 994: " Symbian meta-makefile definition (MMP)
line 995: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp
line 996: 
line 997: " Modsim III (or LambdaProlog)
line 1003: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif
line 1004: 
line 1005: " Modula 2  (.md removed in favor of Markdown)
line 1006: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.mi^Isetf modula2
line 1007: 
line 1008: " Modula 3 (.m3, .i3, .mg, .ig)
line 1009: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3
line 1010: 
line 1011: " Monk
line 1012: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk
line 1013: 
line 1014: " MOO
line 1015: au BufNewFile,BufRead *.moo^I^I^Isetf moo
line 1016: 
line 1017: " Modconf
line 1018: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf
line 1019: 
line 1020: " Mplayer config
line 1021: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf
line 1022: 
line 1023: " Motorola S record
line 1024: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec
line 1025: 
line 1026: " Mrxvtrc
line 1027: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc
line 1028: 
line 1029: " Msql
line 1030: au BufNewFile,BufRead *.msql^I^I^Isetf msql
line 1031: 
line 1032: " Mysql
line 1033: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql
line 1034: 
line 1035: " Mutt setup files (must be before catch *.rc)
line 1036: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')
line 1037: 
line 1038: " M$ Resource files
line 1039: au BufNewFile,BufRead *.rc,*.rch^I^Isetf rc
line 1040: 
line 1041: " MuPAD source
line 1042: au BufRead,BufNewFile *.mu^I^I^Isetf mupad
line 1043: 
line 1044: " Mush
line 1045: au BufNewFile,BufRead *.mush^I^I^Isetf mush
line 1046: 
line 1047: " Mutt setup file (also for Muttng)
line 1048: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc
line 1049: 
line 1050: " N1QL
line 1051: au BufRead,BufNewfile *.n1ql,*.nql^I^Isetf n1ql
line 1052: 
line 1053: " Nano
line 1054: au BufNewFile,BufRead */etc/nanorc,*.nanorc  ^Isetf nanorc
line 1055: 
line 1056: " Nastran input/DMAP
line 1057: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran
line 1058: 
line 1059: " Natural
line 1060: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural
line 1061: 
line 1062: " Noemutt setup file
line 1063: au BufNewFile,BufRead Neomuttrc^I^I^Isetf neomuttrc
line 1064: 
line 1065: " Netrc
line 1066: au BufNewFile,BufRead .netrc^I^I^Isetf netrc
line 1067: 
line 1068: " Ninja file
line 1069: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja
line 1070: 
line 1071: " Novell netware batch files
line 1072: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf
line 1073: 
line 1074: " Nroff/Troff (*.ms and *.t are checked below)
line 1078: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif
line 1079: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff
line 1080: au BufNewFile,BufRead *.[1-9]^I^I^Icall dist#ft#FTnroff()
line 1081: 
line 1082: " Nroff or Objective C++
line 1083: au BufNewFile,BufRead *.mm^I^I^Icall dist#ft#FTmm()
line 1084: 
line 1085: " Not Quite C
line 1086: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc
line 1087: 
line 1088: " NSE - Nmap Script Engine - uses Lua syntax
line 1089: au BufNewFile,BufRead *.nse^I^I^Isetf lua
line 1090: 
line 1091: " NSIS
line 1092: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis
line 1093: 
line 1094: " OCAML
line 1095: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit^Isetf ocaml
line 1096: 
line 1097: " Occam
line 1098: au BufNewFile,BufRead *.occ^I^I^Isetf occam
line 1099: 
line 1100: " Omnimark
line 1101: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark
line 1102: 
line 1103: " OpenROAD
line 1104: au BufNewFile,BufRead *.or^I^I^Isetf openroad
line 1105: 
line 1106: " OPL
line 1107: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl
line 1108: 
line 1109: " Oracle config file
line 1110: au BufNewFile,BufRead *.ora^I^I^Isetf ora
line 1111: 
line 1112: " Packet filter conf
line 1113: au BufNewFile,BufRead pf.conf^I^I^Isetf pf
line 1114: 
line 1115: " Pam conf
line 1116: au BufNewFile,BufRead */etc/pam.conf^I^Isetf pamconf
line 1117: 
line 1118: " PApp
line 1119: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp
line 1120: 
line 1121: " Password file
line 1122: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
line 1123: 
line 1124: " Pascal (also *.p)
line 1125: au BufNewFile,BufRead *.pas^I^I^Isetf pascal
line 1126: 
line 1127: " Delphi project file
line 1128: au BufNewFile,BufRead *.dpr^I^I^Isetf pascal
line 1129: 
line 1130: " PDF
line 1131: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf
line 1132: 
line 1133: " PCMK - HAE - crm configure edit
line 1134: au BufNewFile,BufRead *.pcmk ^I^I^Isetf pcmk
line 1135: 
line 1136: " Perl
line 1137: if has("fname_case")
line 1138:   au BufNewFile,BufRead *.pl,*.PL^I^Icall dist#ft#FTpl()
line 1139: else
line 1140:   au BufNewFile,BufRead *.pl^I^I^Icall dist#ft#FTpl()
line 1141: endif
line 1142: au BufNewFile,BufRead *.plx,*.al,*.psgi^I^Isetf perl
line 1143: au BufNewFile,BufRead *.p6,*.pm6,*.pl6^I^Isetf perl6
line 1144: 
line 1145: " Perl, XPM or XPM2
line 1153: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif
line 1154: 
line 1155: " Perl POD
line 1156: au BufNewFile,BufRead *.pod^I^I^Isetf pod
line 1157: au BufNewFile,BufRead *.pod6^I^I^Isetf pod6
line 1158: 
line 1159: " Php, php3, php4, etc.
line 1160: " Also Phtml (was used for PHP 2 in the past)
line 1161: " Also .ctp for Cake template file
line 1162: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php
line 1163: 
line 1164: " Pike and Cmod
line 1165: au BufNewFile,BufRead *.pike,*.pmod^I^Isetf pike
line 1166: au BufNewFile,BufRead *.cmod^I^I^Isetf cmod
line 1167: 
line 1168: " Pinfo config
line 1169: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo
line 1170: 
line 1171: " Palm Resource compiler
line 1172: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc
line 1173: 
line 1174: " Pine config
line 1175: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine
line 1176: 
line 1177: " PL/1, PL/I
line 1178: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli
line 1179: 
line 1180: " PL/M (also: *.inp)
line 1181: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm
line 1182: 
line 1183: " PL/SQL
line 1184: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql
line 1185: 
line 1186: " PLP
line 1187: au BufNewFile,BufRead *.plp^I^I^Isetf plp
line 1188: 
line 1189: " PO and PO template (GNU gettext)
line 1190: au BufNewFile,BufRead *.po,*.pot^I^Isetf po
line 1191: 
line 1192: " Postfix main config
line 1193: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain
line 1194: 
line 1195: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)
line 1196: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr
line 1197: 
line 1198: " PostScript Printer Description
line 1199: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd
line 1200: 
line 1201: " Povray
line 1202: au BufNewFile,BufRead *.pov^I^I^Isetf pov
line 1203: 
line 1204: " Povray configuration
line 1205: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini
line 1206: 
line 1207: " Povray, PHP or assembly
line 1208: au BufNewFile,BufRead *.inc^I^I^Icall dist#ft#FTinc()
line 1209: 
line 1210: " Printcap and Termcap
line 1212: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap
line 1214: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap
line 1215: 
line 1216: " PCCTS / ANTRL
line 1217: "au BufNewFile,BufRead *.g^I^I^Isetf antrl
line 1218: au BufNewFile,BufRead *.g^I^I^Isetf pccts
line 1219: 
line 1220: " PPWizard
line 1221: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz
line 1222: 
line 1223: " Obj 3D file format
line 1224: " TODO: is there a way to avoid MS-Windows Object files?
line 1225: au BufNewFile,BufRead *.obj^I^I^Isetf obj
line 1226: 
line 1227: " Oracle Pro*C/C++
line 1228: au BufNewFile,BufRead *.pc^I^I^Isetf proc
line 1229: 
line 1230: " Privoxy actions file
line 1231: au BufNewFile,BufRead *.action^I^I^Isetf privoxy
line 1232: 
line 1233: " Procmail
line 1234: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail
line 1235: 
line 1236: " Progress or CWEB
line 1237: au BufNewFile,BufRead *.w^I^I^Icall dist#ft#FTprogress_cweb()
line 1238: 
line 1239: " Progress or assembly
line 1240: au BufNewFile,BufRead *.i^I^I^Icall dist#ft#FTprogress_asm()
line 1241: 
line 1242: " Progress or Pascal
line 1243: au BufNewFile,BufRead *.p^I^I^Icall dist#ft#FTprogress_pascal()
line 1244: 
line 1245: " Software Distributor Product Specification File (POSIX 1387.2-1995)
line 1246: au BufNewFile,BufRead *.psf^I^I^Isetf psf
line 1250: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif
line 1251: 
line 1252: " Prolog
line 1253: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog
line 1254: 
line 1255: " Promela
line 1256: au BufNewFile,BufRead *.pml^I^I^Isetf promela
line 1257: 
line 1258: " Google protocol buffers
line 1259: au BufNewFile,BufRead *.proto^I^I^Isetf proto
line 1260: 
line 1261: " Protocols
line 1262: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols
line 1263: 
line 1264: " Pyrex
line 1265: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex
line 1266: 
line 1267: " Python, Python Shell Startup and Python Stub Files
line 1268: " Quixote (Python-based web framework)
line 1269: au BufNewFile,BufRead *.py,*.pyw,.pythonstartup,.pythonrc,*.ptl,*.pyi  setf python
line 1270: 
line 1271: " Radiance
line 1272: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance
line 1273: 
line 1274: " Ratpoison config/command files
line 1275: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison
line 1276: 
line 1277: " RCS file
line 1278: au BufNewFile,BufRead *\,v^I^I^Isetf rcs
line 1279: 
line 1280: " Readline
line 1281: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline
line 1282: 
line 1283: " Registry for MS-Windows
line 1285: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
line 1286: 
line 1287: " Renderman Interface Bytestream
line 1288: au BufNewFile,BufRead *.rib^I^I^Isetf rib
line 1289: 
line 1290: " Rexx
line 1291: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx
line 1292: 
line 1293: " R (Splus)
line 1294: if has("fname_case")
line 1295:   au BufNewFile,BufRead *.s,*.S^I^I^Isetf r
line 1296: else
line 1297:   au BufNewFile,BufRead *.s^I^I^Isetf r
line 1298: endif
line 1299: 
line 1300: " R Help file
line 1301: if has("fname_case")
line 1302:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp
line 1303: else
line 1304:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp
line 1305: endif
line 1306: 
line 1307: " R noweb file
line 1308: if has("fname_case")
line 1309:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb
line 1310: else
line 1311:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb
line 1312: endif
line 1313: 
line 1314: " R Markdown file
line 1315: if has("fname_case")
line 1316:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd
line 1317: else
line 1318:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd
line 1319: endif
line 1320: 
line 1321: " R reStructuredText file
line 1322: if has("fname_case")
line 1323:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst
line 1324: else
line 1325:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst
line 1326: endif
line 1327: 
line 1328: " Rexx, Rebol or R
line 1329: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall dist#ft#FTr()
line 1330: 
line 1331: " Remind
line 1332: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind
line 1333: 
line 1334: " Resolv.conf
line 1335: au BufNewFile,BufRead resolv.conf^I^Isetf resolv
line 1336: 
line 1337: " Relax NG Compact
line 1338: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc
line 1339: 
line 1340: " Relax NG XML
line 1341: au BufNewFile,BufRead *.rng^I^I^Isetf rng
line 1342: 
line 1343: " RPL/2
line 1344: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl
line 1345: 
line 1346: " Robots.txt
line 1347: au BufNewFile,BufRead robots.txt^I^Isetf robots
line 1348: 
line 1349: " Rpcgen
line 1350: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen
line 1351: 
line 1352: " reStructuredText Documentation Format
line 1353: au BufNewFile,BufRead *.rst^I^I^Isetf rst
line 1354: 
line 1355: " RTF
line 1356: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf
line 1357: 
line 1358: " Interactive Ruby shell
line 1359: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby
line 1360: 
line 1361: " Ruby
line 1362: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby
line 1363: 
line 1364: " RubyGems
line 1365: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby
line 1366: 
line 1367: " Rust
line 1368: au BufNewFile,BufRead *.rs^I^I^Isetf rust
line 1369: 
line 1370: " Rackup
line 1371: au BufNewFile,BufRead *.ru^I^I^Isetf ruby
line 1372: 
line 1373: " Bundler
line 1374: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby
line 1375: 
line 1376: " Ruby on Rails
line 1377: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby
line 1378: 
line 1379: " Rantfile and Rakefile is like Ruby
line 1380: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby
line 1381: 
line 1382: " S-lang (or shader language, or SmallLisp)
line 1383: au BufNewFile,BufRead *.sl^I^I^Isetf slang
line 1384: 
line 1385: " Samba config
line 1386: au BufNewFile,BufRead smb.conf^I^I^Isetf samba
line 1387: 
line 1388: " SAS script
line 1389: au BufNewFile,BufRead *.sas^I^I^Isetf sas
line 1390: 
line 1391: " Sass
line 1392: au BufNewFile,BufRead *.sass^I^I^Isetf sass
line 1393: 
line 1394: " Sather
line 1395: au BufNewFile,BufRead *.sa^I^I^Isetf sather
line 1396: 
line 1397: " Scala
line 1398: au BufNewFile,BufRead *.scala^I^I^Isetf scala
line 1399: 
line 1400: " SBT - Scala Build Tool
line 1401: au BufNewFile,BufRead *.sbt^I^I^Isetf sbt
line 1402: 
line 1403: " Scilab
line 1404: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab
line 1405: 
line 1406: " SCSS
line 1407: au BufNewFile,BufRead *.scss^I^I^Isetf scss
line 1408: 
line 1409: " SD: Streaming Descriptors
line 1410: au BufNewFile,BufRead *.sd^I^I^Isetf sd
line 1411: 
line 1412: " SDL
line 1413: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl
line 1414: 
line 1415: " sed
line 1416: au BufNewFile,BufRead *.sed^I^I^Isetf sed
line 1417: 
line 1418: " Sieve (RFC 3028, 5228)
line 1419: au BufNewFile,BufRead *.siv,*.sieve^I^Isetf sieve
line 1420: 
line 1421: " Sendmail
line 1422: au BufNewFile,BufRead sendmail.cf^I^Isetf sm
line 1423: 
line 1424: " Sendmail .mc files are actually m4.  Could also be MS Message text file.
line 1425: au BufNewFile,BufRead *.mc^I^I^Icall dist#ft#McSetf()
line 1426: 
line 1427: " Services
line 1428: au BufNewFile,BufRead */etc/services^I^Isetf services
line 1429: 
line 1430: " Service Location config
line 1431: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf
line 1432: 
line 1433: " Service Location registration
line 1434: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg
line 1435: 
line 1436: " Service Location SPI
line 1437: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi
line 1438: 
line 1439: " Setserial config
line 1440: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial
line 1441: 
line 1442: " SGML
line 1452: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif
line 1453: 
line 1454: " SGMLDECL
line 1458: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif
line 1459: 
line 1460: " SGML catalog file
line 1461: au BufNewFile,BufRead catalog^I^I^Isetf catalog
line 1462: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')
line 1463: 
line 1464: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
line 1465: " Gentoo ebuilds and Arch Linux PKGBUILDs are actually bash scripts
line 1466: " NOTE: Patterns ending in a star are further down, these have lower priority.
line 1467: au BufNewFile,BufRead .bashrc,bashrc,bash.bashrc,.bash[_-]profile,.bash[_-]logout,.bash[_-]aliases,bash-fc[-.],*.bash,*/{,.}bash[_-]completion{,.d,.sh}{,/*},*.ebuild,*.eclass,PKGBUILD call dist#ft#SetFileTypeSH("bash")
line 1468: au BufNewFile,BufRead .kshrc,*.ksh call dist#ft#SetFileTypeSH("ksh")
line 1469: au BufNewFile,BufRead */etc/profile,.profile,*.sh,*.env call dist#ft#SetFileTypeSH(getline(1))
line 1470: 
line 1471: 
line 1472: " Shell script (Arch Linux) or PHP file (Drupal)
line 1478: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call dist#ft#SetFileTypeSH("bash") | endif
line 1479: 
line 1480: " tcsh scripts (patterns ending in a star further below)
line 1481: au BufNewFile,BufRead .tcshrc,*.tcsh,tcsh.tcshrc,tcsh.login^Icall dist#ft#SetFileTypeShell("tcsh")
line 1482: 
line 1483: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
line 1484: " (patterns ending in a start further below)
line 1485: au BufNewFile,BufRead .login,.cshrc,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call dist#ft#CSH()
line 1486: 
line 1487: " Z-Shell script (patterns ending in a star further below)
line 1488: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh
line 1489: au BufNewFile,BufRead .zshrc,.zshenv,.zlogin,.zlogout,.zcompdump setf zsh
line 1490: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh
line 1491: 
line 1492: " Scheme
line 1493: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme
line 1494: 
line 1495: " Screen RC
line 1496: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen
line 1497: 
line 1498: " Simula
line 1499: au BufNewFile,BufRead *.sim^I^I^Isetf simula
line 1500: 
line 1501: " SINDA
line 1502: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda
line 1503: 
line 1504: " SiSU
line 1505: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu
line 1506: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu
line 1507: 
line 1508: " SKILL
line 1509: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill
line 1510: 
line 1511: " SLRN
line 1512: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc
line 1513: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc
line 1514: 
line 1515: " Smalltalk (and TeX)
line 1516: au BufNewFile,BufRead *.st^I^I^Isetf st
line 1524: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif
line 1525: 
line 1526: " Smarty templates
line 1527: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty
line 1528: 
line 1529: " SMIL or XML
line 1535: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif
line 1536: 
line 1537: " SMIL or SNMP MIB file
line 1543: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif
line 1544: 
line 1545: " SMITH
line 1546: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith
line 1547: 
line 1548: " Snobol4 and spitbol
line 1549: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4
line 1550: 
line 1551: " SNMP MIB files
line 1552: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib
line 1553: 
line 1554: " Snort Configuration
line 1555: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog
line 1556: au BufNewFile,BufRead *.rules^I^I^Icall dist#ft#FTRules()
line 1557: 
line 1558: " Spec (Linux RPM)
line 1559: au BufNewFile,BufRead *.spec^I^I^Isetf spec
line 1560: 
line 1561: " Speedup (AspenTech plant simulator)
line 1562: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup
line 1563: 
line 1564: " Slice
line 1565: au BufNewFile,BufRead *.ice^I^I^Isetf slice
line 1566: 
line 1567: " Spice
line 1568: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice
line 1569: 
line 1570: " Spyce
line 1571: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce
line 1572: 
line 1573: " Squid
line 1574: au BufNewFile,BufRead squid.conf^I^Isetf squid
line 1575: 
line 1576: " SQL for Oracle Designer
line 1577: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql
line 1578: 
line 1579: " SQL
line 1580: au BufNewFile,BufRead *.sql^I^I^Icall dist#ft#SQL()
line 1581: 
line 1582: " SQLJ
line 1583: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj
line 1584: 
line 1585: " SQR
line 1586: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr
line 1587: 
line 1588: " OpenSSH configuration
line 1589: au BufNewFile,BufRead ssh_config,*/.ssh/config^Isetf sshconfig
line 1590: 
line 1591: " OpenSSH server configuration
line 1592: au BufNewFile,BufRead sshd_config^I^Isetf sshdconfig
line 1593: 
line 1594: " Stata
line 1595: au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata^Isetf stata
line 1596: " Also *.class, but not when it's a Java bytecode file
line 1598: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif
line 1599: 
line 1600: " SMCL
line 1601: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl
line 1602: 
line 1603: " Stored Procedures
line 1604: au BufNewFile,BufRead *.stp^I^I^Isetf stp
line 1605: 
line 1606: " Standard ML
line 1607: au BufNewFile,BufRead *.sml^I^I^Isetf sml
line 1608: 
line 1609: " Sratus VOS command macro
line 1610: au BufNewFile,BufRead *.cm^I^I^Isetf voscm
line 1611: 
line 1612: " Sysctl
line 1613: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl
line 1614: 
line 1615: " Systemd unit files
line 1616: au BufNewFile,BufRead */systemd/*.{automount,mount,path,service,socket,swap,target,timer}^Isetf systemd
line 1617: 
line 1618: " Synopsys Design Constraints
line 1619: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc
line 1620: 
line 1621: " Sudoers
line 1622: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers
line 1623: 
line 1624: " SVG (Scalable Vector Graphics)
line 1625: au BufNewFile,BufRead *.svg^I^I^Isetf svg
line 1626: 
line 1627: " Tads (or Nroff or Perl test file)
line 1629: au BufNewFile,BufRead *.t if !dist#ft#FTnroff() && !dist#ft#FTperl() | setf tads | endif
line 1630: 
line 1631: " Tags
line 1632: au BufNewFile,BufRead tags^I^I^Isetf tags
line 1633: 
line 1634: " TAK
line 1635: au BufNewFile,BufRead *.tak^I^I^Isetf tak
line 1636: 
line 1637: " Task
line 1638: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata
line 1639: au BufRead,BufNewFile *.task^I^I^Isetf taskedit
line 1640: 
line 1641: " Tcl (JACL too)
line 1642: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl
line 1643: 
line 1644: " TealInfo
line 1645: au BufNewFile,BufRead *.tli^I^I^Isetf tli
line 1646: 
line 1647: " Telix Salt
line 1648: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt
line 1649: 
line 1650: " Tera Term Language
line 1651: au BufRead,BufNewFile *.ttl^I^I^Isetf teraterm
line 1652: 
line 1653: " Terminfo
line 1654: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo
line 1655: 
line 1656: " TeX
line 1657: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex
line 1658: au BufNewFile,BufRead *.tex^I^I^Icall dist#ft#FTtex()
line 1659: 
line 1660: " ConTeXt
line 1661: au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi   setf context
line 1662: 
line 1663: " Texinfo
line 1664: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo
line 1665: 
line 1666: " TeX configuration
line 1667: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf
line 1668: 
line 1669: " Tidy config
line 1670: au BufNewFile,BufRead .tidyrc,tidyrc^I^Isetf tidy
line 1671: 
line 1672: " TF mud client
line 1673: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf
line 1674: 
line 1675: " tmux configuration
line 1676: au BufNewFile,BufRead {.,}tmux*.conf^I^Isetf tmux
line 1677: 
line 1678: " TPP - Text Presentation Program
line 1679: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp
line 1680: 
line 1681: " Treetop
line 1682: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop
line 1683: 
line 1684: " Trustees
line 1685: au BufNewFile,BufRead trustees.conf^I^Isetf trustees
line 1686: 
line 1687: " TSS - Geometry
line 1688: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm
line 1689: 
line 1690: " TSS - Optics
line 1691: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop
line 1692: 
line 1693: " TSS - Command Line (temporary)
line 1694: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl
line 1695: 
line 1696: " TWIG files
line 1697: au BufNewFile,BufReadPost *.twig^I^Isetf twig
line 1698: 
line 1699: " Motif UIT/UIL files
line 1700: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil
line 1701: 
line 1702: " Udev conf
line 1703: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf
line 1704: 
line 1705: " Udev permissions
line 1706: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
line 1707: "
line 1708: " Udev symlinks config
line 1709: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh
line 1710: 
line 1711: " UnrealScript
line 1712: au BufNewFile,BufRead *.uc^I^I^Isetf uc
line 1713: 
line 1714: " Updatedb
line 1715: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb
line 1716: 
line 1717: " Upstart (init(8)) config files
line 1718: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart
line 1719: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart
line 1720: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart
line 1721: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override^I       setf upstart
line 1722: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart
line 1723: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart
line 1724: 
line 1725: " Vera
line 1726: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera
line 1727: 
line 1728: " Verilog HDL
line 1729: au BufNewFile,BufRead *.v^I^I^Isetf verilog
line 1730: 
line 1731: " Verilog-AMS HDL
line 1732: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams
line 1733: 
line 1734: " SystemVerilog
line 1735: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog
line 1736: 
line 1737: " VHDL
line 1738: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst  setf vhdl
line 1739: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')
line 1740: 
line 1741: " Vim script
line 1742: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim
line 1743: 
line 1744: " Viminfo file
line 1745: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo
line 1746: 
line 1747: " Virata Config Script File or Drupal module
line 1753: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif
line 1754: 
line 1755: " Visual Basic (also uses *.bas) or FORM
line 1756: au BufNewFile,BufRead *.frm^I^I^Icall dist#ft#FTVB("form")
line 1757: 
line 1758: " SaxBasic is close to Visual Basic
line 1759: au BufNewFile,BufRead *.sba^I^I^Isetf vb
line 1760: 
line 1761: " Vgrindefs file
line 1762: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs
line 1763: 
line 1764: " VRML V1.0c
line 1765: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml
line 1766: 
line 1767: " Vroom (vim testing and executable documentation)
line 1768: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom
line 1769: 
line 1770: " Webmacro
line 1771: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro
line 1772: 
line 1773: " WebAssembly
line 1774: au BufNewFile,BufRead *.wast,*.wat^I^Isetf wast
line 1775: 
line 1776: " Wget config
line 1777: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget
line 1778: 
line 1779: " Website MetaLanguage
line 1780: au BufNewFile,BufRead *.wml^I^I^Isetf wml
line 1781: 
line 1782: " Winbatch
line 1783: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch
line 1784: 
line 1785: " WSML
line 1786: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml
line 1787: 
line 1788: " WPL
line 1789: au BufNewFile,BufRead *.wpl^I^I^Isetf xml
line 1790: 
line 1791: " WvDial
line 1792: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial
line 1793: 
line 1794: " CVS RC file
line 1795: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc
line 1796: 
line 1797: " CVS commit file
line 1798: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs
line 1799: 
line 1800: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
line 1801: " lines in a WEB file).
line 1807: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif
line 1808: 
line 1809: " Windows Scripting Host and Windows Script Component
line 1810: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh
line 1811: 
line 1812: " XHTML
line 1813: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml
line 1814: 
line 1815: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)
line 1821: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif
line 1822: au BufEnter *.xpm2^I^I^I^Isetf xpm2
line 1823: 
line 1824: " XFree86 config
line 1829: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf
line 1832: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf
line 1833: 
line 1834: " Xorg config
line 1835: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf
line 1836: 
line 1837: " Xinetd conf
line 1838: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd
line 1839: 
line 1840: " XS Perl extension interface language
line 1841: au BufNewFile,BufRead *.xs^I^I^Isetf xs
line 1842: 
line 1843: " X resources file
line 1844: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
line 1845: 
line 1846: " Xmath
line 1847: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath
line 1849: au BufNewFile,BufRead *.ms if !dist#ft#FTnroff() | setf xmath | endif
line 1850: 
line 1851: " XML  specific variants: docbk and xbl
line 1852: au BufNewFile,BufRead *.xml^I^I^Icall dist#ft#FTxml()
line 1853: 
line 1854: " XMI (holding UML models) is also XML
line 1855: au BufNewFile,BufRead *.xmi^I^I^Isetf xml
line 1856: 
line 1857: " CSPROJ files are Visual Studio.NET's XML-based project config files
line 1858: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml
line 1859: 
line 1860: " Qt Linguist translation source and Qt User Interface Files are XML
line 1861: au BufNewFile,BufRead *.ts,*.ui^I^I^Isetf xml
line 1862: 
line 1863: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)
line 1864: au BufNewFile,BufRead *.tpm^I^I^Isetf xml
line 1865: 
line 1866: " Xdg menus
line 1867: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml
line 1868: 
line 1869: " ATI graphics driver configuration
line 1870: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml
line 1871: 
line 1872: " Web Services Description Language (WSDL)
line 1873: au BufNewFile,BufRead *.wsdl^I^I^Isetf xml
line 1874: 
line 1875: " XLIFF (XML Localisation Interchange File Format) is also XML
line 1876: au BufNewFile,BufRead *.xlf^I^I^Isetf xml
line 1877: au BufNewFile,BufRead *.xliff^I^I^Isetf xml
line 1878: 
line 1879: " XML User Interface Language
line 1880: au BufNewFile,BufRead *.xul^I^I^Isetf xml
line 1881: 
line 1882: " X11 xmodmap (also see below)
line 1883: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap
line 1884: 
line 1885: " Xquery
line 1886: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery
line 1887: 
line 1888: " XSD
line 1889: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd
line 1890: 
line 1891: " Xslt
line 1892: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt
line 1893: 
line 1894: " Yacc
line 1895: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc
line 1896: 
line 1897: " Yacc or racc
line 1898: au BufNewFile,BufRead *.y^I^I^Icall dist#ft#FTy()
line 1899: 
line 1900: " Yaml
line 1901: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml
line 1902: 
line 1903: " Raml
line 1904: au BufNewFile,BufRead *.raml^I^I^Isetf raml
line 1905: 
line 1906: " yum conf (close enough to dosini)
line 1907: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini
line 1908: 
line 1909: " Zimbu
line 1910: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu
line 1911: " Zimbu Templates
line 1912: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl
line 1913: 
line 1914: " Zope
line 1915: "   dtml (zope dynamic template markup language), pt (zope page template),
line 1916: "   cpt (zope form controller page template)
line 1917: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall dist#ft#FThtml()
line 1918: "   zsql (zope sql method)
line 1919: au BufNewFile,BufRead *.zsql^I^I^Icall dist#ft#SQL()
line 1920: 
line 1921: " Z80 assembler asz80
line 1922: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a
line 1923: 
line 1924: augroup END
line 1925: 
line 1926: 
line 1927: " Source the user-specified filetype file, for backwards compatibility with
line 1928: " Vim 5.x.
line 1929: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
line 1930:   execute "source " . myfiletypefile
line 1931: endif
line 1932: 
line 1933: 
line 1934: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
line 1935: " when there are no matching file name extensions.
line 1936: " Don't do this for compressed files.
line 1937: augroup filetypedetect
line 1940: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 1941: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
line 1942: 
line 1943: 
line 1944: " Extra checks for when no filetype has been detected now.  Mostly used for
line 1945: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
line 1946: " script file.
line 1947: " Most of these should call s:StarSetf() to avoid names ending in .gz and the
line 1948: " like are used.
line 1949: 
line 1950: " More Apache style config files
line 1951: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')
line 1952: 
line 1953: " More Apache config files
line 1954: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')
line 1955: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')
line 1956: 
line 1957: " Asterisk config file
line 1958: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')
line 1959: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 1960: 
line 1961: " Bazaar version control
line 1962: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr
line 1963: 
line 1964: " Bazel build file
line 1965: if !has("fname_case")
line 1966:   au BufNewFile,BufRead BUILD^I^I^Isetf bzl
line 1967: endif
line 1968: 
line 1969: " BIND zone
line 1970: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')
line 1971: 
line 1972: " Calendar
line 1975: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')
line 1976: 
line 1977: " Changelog
line 1983: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif
line 1984: 
line 1985: " Crontab
line 1986: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')
line 1987: 
line 1988: " dnsmasq(8) configuration
line 1989: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')
line 1990: 
line 1991: " Dracula
line 1992: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')
line 1993: 
line 1994: " Fvwm
line 1995: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')
line 1997: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')
line 2003: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif
line 2004: 
line 2005: " Gedcom
line 2006: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')
line 2007: 
line 2008: " GTK RC
line 2009: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')
line 2010: 
line 2011: " Jam
line 2012: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')
line 2013: 
line 2014: " Jargon
line 2018: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif
line 2019: 
line 2020: " Kconfig
line 2021: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')
line 2022: 
line 2023: " Lilo: Linux loader
line 2024: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')
line 2025: 
line 2026: " Logcheck
line 2027: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')
line 2028: 
line 2029: " Makefile
line 2030: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')
line 2031: 
line 2032: " Ruby Makefile
line 2033: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')
line 2034: 
line 2035: " Mail (also matches muttrc.vim, so this is below the other checks)
line 2036: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail
line 2037: 
line 2038: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')
line 2039: 
line 2040: " Modconf
line 2044: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif
line 2045: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')
line 2046: 
line 2047: " Mutt setup file
line 2048: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')
line 2049: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')
line 2050: 
line 2051: " Neomutt setup file
line 2052: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')
line 2053: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')
line 2054: 
line 2055: " Nroff macros
line 2056: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')
line 2057: 
line 2058: " OpenBSD hostname.if
line 2059: au BufNewFile,BufRead /etc/hostname.*^I^Icall s:StarSetf('config')
line 2060: 
line 2061: " Pam conf
line 2062: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')
line 2063: 
line 2064: " Printcap and Termcap
line 2068: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif
line 2072: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif
line 2073: 
line 2074: " ReDIF
line 2075: " Only used when the .rdf file was not detected to be XML.
line 2076: au BufRead,BufNewFile *.rdf^I^I^Icall dist#ft#Redif()
line 2077: 
line 2078: " Remind
line 2079: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')
line 2080: 
line 2081: " Shell scripts ending in a star
line 2082: au BufNewFile,BufRead .bashrc*,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,bash-fc[-.]*,,PKGBUILD* call dist#ft#SetFileTypeSH("bash")
line 2083: au BufNewFile,BufRead .kshrc* call dist#ft#SetFileTypeSH("ksh")
line 2084: au BufNewFile,BufRead .profile* call dist#ft#SetFileTypeSH(getline(1))
line 2085: 
line 2086: " tcsh scripts ending in a star
line 2087: au BufNewFile,BufRead .tcshrc*^Icall dist#ft#SetFileTypeShell("tcsh")
line 2088: 
line 2089: " csh scripts ending in a star
line 2090: au BufNewFile,BufRead .login*,.cshrc*  call dist#ft#CSH()
line 2091: 
line 2092: " Vim script
line 2093: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')
line 2094: 
line 2095: " Subversion commit file
line 2096: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn
line 2097: 
line 2098: " X resources file
line 2099: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
line 2100: 
line 2101: " XFree86 config
line 2103: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
line 2108: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')
line 2109: 
line 2110: " X11 xmodmap
line 2111: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')
line 2112: 
line 2113: " Xinetd conf
line 2114: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')
line 2115: 
line 2116: " yum conf (close enough to dosini)
line 2117: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')
line 2118: 
line 2119: " Z-Shell script ending in a star
line 2120: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
line 2121: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')
line 2122: 
line 2123: 
line 2124: " Plain text files, needs to be far down to not override others.  This avoids
line 2125: " the "conf" type being used if there is a line starting with '#'.
line 2126: au BufNewFile,BufRead *.text,README^I^Isetf text
line 2127: 
line 2128: " Help files match *.txt but should have a last line that is a modeline.
line 2132: au BufNewFile,BufRead *.txt  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif
line 2133: 
line 2134: 
line 2135: " Use the filetype detect plugins.  They may overrule any of the previously
line 2136: " detected filetypes.
line 2137: runtime! ftdetect/*.vim
Searching for "ftdetect/*.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/ftdetect/*.vim"
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/csv.vim"
line 1: " Install Filetype detection for CSV files
line 2: au BufRead,BufNewFile *.csv,*.dat,*.tsv,*.tab set filetype=csv
line 3: 
finished sourcing /home/you/.vim/ftdetect/csv.vim
continuing in /usr/share/vim/vim81/filetype.vim
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/mail.vim"
line 1: 
line 2: " #sdm# my custom email file definitions
line 3: 
line 4: au BufRead,BufNewFile *pentadactyl.txt ^I^I^I^I^Iset filetype=mail
line 5: au BufRead,BufNewFile *.email ^I^I^I^I^I^I^Iset filetype=mail
line 6: au BufRead,BufNewFile /tmp/mutt-golden/tmp/mutt-golden* set filetype=mail
finished sourcing /home/you/.vim/ftdetect/mail.vim
continuing in /usr/share/vim/vim81/filetype.vim
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/perl-sdm.vim"
line 1: autocmd BufRead,BufNewFile *.pll set filetype=perl
line 2: 
finished sourcing /home/you/.vim/ftdetect/perl-sdm.vim
continuing in /usr/share/vim/vim81/filetype.vim
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/processing.vim"
line 1: 
line 2: au BufRead,BufNewFile *.pde setf processing
finished sourcing /home/you/.vim/ftdetect/processing.vim
continuing in /usr/share/vim/vim81/filetype.vim
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/text-sdm.vim"
line 1: autocmd BufNewFile,BufRead *.ttt set filetype=text
line 2: autocmd BufNewFile,BufRead *.txt set filetype=text
line 3: "setfiletype only sets if the filetype is not already set
line 4: autocmd BufRead,BufNewFile /home/bench/notes/* ^Iset filetype=text
line 5: autocmd BufRead,BufNewFile *.notes ^I^I^I^Iset filetype=text
line 6: 
line 7: 
finished sourcing /home/you/.vim/ftdetect/text-sdm.vim
continuing in /usr/share/vim/vim81/filetype.vim
Searching for "/var/lib/vim/addons/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/ftdetect/*.vim"
Searching for "/usr/share/vim/vim81/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftdetect/*.vim"
Searching for "/var/lib/vim/addons/after/ftdetect/*.vim"
Searching for "/home/you/.vim/after/ftdetect/*.vim"
Searching for "/usr/share/vim-scripts/ftdetect/*.vim"
line 2138: 
line 2139: " NOTE: The above command could have ended the filetypedetect autocmd group
line 2140: " and started another one. Let's make sure it has ended to get to a consistent
line 2141: " state.
line 2142: augroup END
line 2143: 
line 2144: " Generic configuration file. Use FALLBACK, it's just guessing!
line 2150: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
line 2151: 
line 2152: 
line 2153: " If the GUI is already running, may still need to install the Syntax menu.
line 2154: " Don't do it when the 'M' flag is included in 'guioptions'.
line 2156: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"
line 2157:   source <sfile>:p:h/menu.vim
line 2158: endif
line 2159: 
line 2160: " Function called for testing all functions defined here.  These are
line 2161: " script-local, thus need to be executed here.
line 2162: " Returns a string with error messages (hopefully empty).
line 2163: func! TestFiletypeFuncs(testlist)
line 2174: 
line 2175: " Restore 'cpoptions'
line 2176: let &cpo = s:cpo_save
line 2177: unlet s:cpo_save
finished sourcing /usr/share/vim/vim81/filetype.vim
continuing in /usr/share/vim/vim81/syntax/syntax.vim
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"
Searching for "/var/lib/vim/addons/after/filetype.vim"
Searching for "/home/you/.vim/after/filetype.vim"
Searching for "/usr/share/vim-scripts/filetype.vim"
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /usr/share/vim/vim81/syntax/syntax.vim
continuing in /home/you/.vim/vimrc
line 22: set^I^I buftype=
line 23: set      lispwords=""
line 24: set      viminfo='10,\"20^I"         10            oldfiles, 20   changes
line 25: setlocal hidden           "           Hide          buffers   when they       are abandoned, change w/o saving
line 26: set      ttyfast          ^I^I^I" already       default   for  rxvt
line 27: set      history=20
line 28: set      modifiable       ^I^I^I" modifiable    by        defaut
line 29: set^I^I nofsync
line 30: 
line 31: set      modeline^I^I^I^I^I" modelines are now off by default
line 32: set modelines=2^I^I^I^I^I^I" only 2 lines of empty requried before the modeline
line 33: 
line 34: set      backspace=2
line 35: let      mapleader = ";"
line 36: set      noerrorbells
line 37: set      vb t_vb=
line 38: set      encoding=utf-8
line 39: set      fileencoding=utf-8
line 40: set      termencoding=utf-8
line 41: "source    ~/.config/nvim/keymap/sdm_tk.vim^I^I" moved to default location
line 42: setlocal keymap=sdm_tk
Searching for "keymap/sdm_tk_utf-8.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/keymap/sdm_tk_utf-8.vim"
chdir(/home/you/.vim/keymap)
fchdir() to previous dir
line 42: sourcing "/home/you/.vim/keymap/sdm_tk_utf-8.vim"
line 1: 
line 2: " short keymap name for statusline
line 3: let b:keymap_name = "sdm_tk"
line 4: 
line 5: scriptencoding utf8
line 6: 
line 7: loadkeymap
finished sourcing /home/you/.vim/keymap/sdm_tk_utf-8.vim
continuing in /home/you/.vim/vimrc
line 43: 
line 44: " Triger `autoread` when files changes on disk
line 45: set      autoread        ^I^I^I" automatically load      when externally changed
line 46: autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
line 48: autocmd FileChangedShellPost * echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
line 49: 
line 50: "
line 51: " - mouse
line 52: "The mouse can be enabled for different modes:
line 53: "^I^In^INormal mode
line 54: "^I^Iv^IVisual mode
line 55: "^I^Ii^IInsert mode
line 56: "^I^Ic^ICommand-line mode
line 57: "^I^Ih^Iall previous modes when editing a help file
line 58: "^I^Ia^Iall previous modes
line 59: "^I^Ir^Ifor |hit-enter| and |more-prompt| prompt
line 60: " the 'v' was making it go auto-select on move
line 61: set mouse=a
line 62: " stop to-visual-mode on mouse drag
line 63: noremap <LeftDrag> <LeftMouse>
line 64: noremap! <LeftDrag> <LeftMouse>
line 65: 
line 66: " --- file skeletons
line 67: autocmd BufNewFile  *.time  0r ~/.vim/file_skeletons/skeletonFile.time
line 68: autocmd BufNewFile *.pll ^I0r ~/.vim/file_skeletons/minimal_skeleton.pl
line 69: autocmd BufNewFile  *.pl ^I0r ~/.vim/file_skeletons/skeleton.pl
line 70: autocmd BufNewFile  *.py  ^I0r ~/.vim/file_skeletons/minimal_skeleton.pythonx
line 71: 
line 72: 
line 73: " --- backups 
line 74: source^I~/.vim/backup.vimrc^I^I^I^I" all backup stuff here
chdir(/home/you/.vim)
fchdir() to previous dir
line 74: sourcing "/home/you/.vim/backup.vimrc"
line 1: 
line 2: "----- backup ------------------------------------------------------
line 3: set updatetime=60000
line 4: " this is a default. to be updated per file type
line 5: 
line 6: " default 
line 7: set nobackup 
line 8: set writebackup 
line 9: 
line 10: 
line 11: augroup Backup
line 12: ^I
line 13: ^I" No, The help is wrong. preserve keeps the swap file, not the originonal
line 14: ^I" autocmd BufLeave,VimLeave * preserve
line 15: ^I" my own backup dir and path
line 16: ^Iautocmd BufEnter,VimEnter * let b:buDir = "/work/BACKUP/vimBackups/all/"
line 17: ^I" this is a default, to be updated per file type
line 18: ^Iau BufEnter,VimEnter       * let b:buFilename = "some_unsaved_file"        
line 19: ^Iau BufWritePre,BufFilePost,BufWinEnter * let b:buFilename = expand('%:t')^I^I^I^I" ideal
line 20:  
line 21: ^I" BufEnter : looks like only when first entering the buffer, not every time? 
line 22: ^I" from help BufNew, same for BufUnload
line 23: ^I"^INOTE: When this autocommand is executed, the
line 24: ^I"^Icurrent buffer "%" may be different from the
line 25: ^I"^Ibuffer being created "<afile>".
line 26: 
line 27: 
line 28: 
line 29: ^I" --- autosave
line 30: ^Iau! CursorHoldI,CursorHold,BufLeave * silent! :update    
line 31: ^I" only triggered once, until reset by some cursor or keyboard action
line 32: 
line 33: 
line 34: ^I" --- backup
line 35: 
line 36: ^I" autocmd CursorHold,CursorHoldI,BufUnload,FileAppendPost * silent :call AutoBackup()
line 37: ^Iautocmd CursorHold,CursorHoldI,BufWrite,BufUnload * :call AutoBackup()
line 38: ^I" Do not run on every BufLeave : too much (?) 
line 39: ^I" the BufUnload is NOT triggered when closing a file, and when leaving vim. 
line 40: ^I" BufLeave is NOT run on :q leaving vim/ a vim file
line 41: ^I" Do not call repeatidly
line 42: 
line 43: 
line 44: 
line 45: ^I" --- Function
line 46: 
line 47: ^I" initial, update-now, last-update-times
line 48: ^Iautocmd BufAdd,BufEnter * let b:lastBuTime="dog"
line 49: ^Iautocmd BufAdd,BufEnter * let b:lastBuFN ="cat"
line 50: augroup END
line 51: 
line 52: function! AutoBackup()
line 81:  
finished sourcing /home/you/.vim/backup.vimrc
continuing in /home/you/.vim/vimrc
line 75: 
line 76: 
line 77: " --- setup for a Windows ennvironment ---
line 78: "
line 79: if has("win64")
line 80: ^Iset cdpath=H:\__temp\
line 81: ^I:cd! H:\__temp\
line 82: ^I
line 83: ^Iset pythonthreedll=python37.dll
line 84: ^I" or :let &pythonthreedll = 'C:\path\to\python37.dll'
line 85: endif
line 86: 
line 87: 
line 88: " ----- gui appearance -------------------
line 89: "
line 90: set guioptions-=T
line 91: " T   : the tab-bar in the gui (removed)
line 92: 
line 93: 
line 94: " ------ plugins 
line 95: 
line 96: set runtimepath+=/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim
line 97: if dein#load_state('/home/you/.cache/dein_vim_plugins')
Searching for "autoload/dein.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim"
Searching for "/home/you/.vim/autoload/dein.vim"
Searching for "/var/lib/vim/addons/autoload/dein.vim"
Searching for "/usr/share/vim/vimfiles/autoload/dein.vim"
Searching for "/usr/share/vim/vim81/autoload/dein.vim"
Searching for "/usr/share/vim/vimfiles/after/autoload/dein.vim"
Searching for "/var/lib/vim/addons/after/autoload/dein.vim"
Searching for "/home/you/.vim/after/autoload/dein.vim"
Searching for "/usr/share/vim-scripts/autoload/dein.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein.vim"
chdir(/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload)
fchdir() to previous dir
line 97: sourcing "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein.vim"
line 1: "=============================================================================
line 2: " FILE: dein.vim
line 3: " AUTHOR:  Shougo Matsushita <Shougo.Matsu at gmail.com>
line 4: " License: MIT license
line 5: "=============================================================================
line 6: 
line 7: function! dein#_init() abort
line 47: function! dein#load_cache_raw(vimrcs) abort
line 62: function! dein#load_state(path, ...) abort
line 84: 
line 85: function! dein#tap(name) abort
line 92: function! dein#is_sourced(name) abort
line 97: function! dein#begin(path, ...) abort
line 100: function! dein#end() abort
line 103: function! dein#add(repo, ...) abort
line 106: function! dein#local(dir, ...) abort
line 109: function! dein#get(...) abort
line 112: function! dein#source(...) abort
line 115: function! dein#check_install(...) abort
line 118: function! dein#check_clean() abort
line 121: function! dein#install(...) abort
line 125: function! dein#update(...) abort
line 129: function! dein#check_update(...) abort
line 133: function! dein#direct_install(repo, ...) abort
line 136: function! dein#get_direct_plugins_path() abort
line 140: function! dein#reinstall(plugins) abort
line 143: function! dein#rollback(date, ...) abort
line 146: function! dein#remote_plugins() abort
line 149: function! dein#recache_runtimepath() abort
line 152: function! dein#call_hook(hook_name, ...) abort
line 155: function! dein#check_lazy_plugins() abort
line 158: function! dein#load_toml(filename, ...) abort
line 161: function! dein#load_dict(dict, ...) abort
line 164: function! dein#get_log() abort
line 167: function! dein#get_updates_log() abort
line 170: function! dein#get_progress() abort
line 173: function! dein#each(command, ...) abort
line 176: function! dein#build(...) abort
line 179: function! dein#plugins2toml(plugins) abort
line 182: function! dein#disable(names) abort
line 185: function! dein#config(arg, ...) abort
line 190: function! dein#set_hook(plugins, hook_name, hook) abort
line 193: function! dein#save_state() abort
line 196: function! dein#clear_state() abort
finished sourcing /home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein.vim
continuing in /home/you/.vim/vimrc
calling function dein#load_state('/home/you/.cache/dein_vim_plugins')

line 1:   if !exists('#dein')
line 2:     call dein#_init()
calling function dein#load_state[2]..dein#_init()

line 1:   let g:dein#_cache_version = 150
line 2:   let g:dein#_merged_format = "{'repo': v:val.repo, 'rev': get(v:val, 'rev', '')}"
line 4:   let g:dein#_merged_length = 3
line 5:   let g:dein#name = ''
line 6:   let g:dein#plugin = {}
line 7:   let g:dein#_plugins = {}
line 8:   let g:dein#_base_path = ''
line 9:   let g:dein#_cache_path = ''
line 10:   let g:dein#_runtime_path = ''
line 11:   let g:dein#_hook_add = ''
line 12:   let g:dein#_ftplugin = {}
line 13:   let g:dein#_off1 = ''
line 14:   let g:dein#_off2 = ''
line 15:   let g:dein#_vimrcs = []
line 16:   let g:dein#_block_level = 0
line 17:   let g:dein#_event_plugins = {}
line 18:   let g:dein#_is_sudo = $SUDO_USER !=# '' && $USER !=# $SUDO_USER && $HOME !=# expand('~'.$USER) && $HOME ==# expand('~'.$SUDO_USER)
line 21:   let g:dein#_progname = fnamemodify(v:progname, ':r')
line 22:   let g:dein#_init_runtimepath = &runtimepath
line 23: 
line 24:   augroup dein
line 25:     autocmd!
line 26:     autocmd FuncUndefined * call dein#autoload#_on_func(expand('<afile>'))
line 27:     autocmd BufRead *? call dein#autoload#_on_default_event('BufRead')
line 28:     autocmd BufNew,BufNewFile *? call dein#autoload#_on_default_event('BufNew')
line 29:     autocmd VimEnter *? call dein#autoload#_on_default_event('VimEnter')
line 30:     autocmd FileType *? call dein#autoload#_on_default_event('FileType')
line 31:     autocmd BufWritePost *.vim,*.toml,vimrc,.vimrc call dein#util#_check_vimrcs()
line 33:   augroup END
line 34:   augroup dein-events | augroup END
line 34:  augroup END
line 35: 
line 36:   if !exists('##CmdUndefined') | return | endif
line 36:  return | endif
line 36:  endif
line 37:   autocmd dein CmdUndefined * call dein#autoload#_on_pre_cmd(expand('<afile>'))
function dein#load_state[2]..dein#_init returning #0

continuing in function dein#load_state

line 3:   endif
line 4:   let sourced = a:0 > 0 ? a:1 : has('vim_starting') &&  (!exists('&loadplugins') || &loadplugins)
line 6:   if (g:dein#_is_sudo || !sourced) | return 1 | endif
line 6:  return 1 | endif
line 6:  endif
line 7:   let g:dein#_base_path = expand(a:path)
line 8: 
line 9:   let state = get(g:, 'dein#cache_directory', g:dein#_base_path) . '/state_' . g:dein#_progname . '.vim'
line 11:   if !filereadable(state) | return 1 | endif
line 11:  return 1 | endif
line 11:  endif
line 12:   try
line 13:     execute 'source' fnameescape(state)
line 13: source /home/you/.cache/dein_vim_plugins/state_vim.vim
chdir(/home/you/.cache/dein_vim_plugins)
fchdir() to previous dir
line 13: sourcing "/home/you/.cache/dein_vim_plugins/state_vim.vim"
line 1: if g:dein#_cache_version !=# 150 || g:dein#_init_runtimepath !=# '/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim' | throw 'Cache loading error' | endif
line 1:  throw 'Cache loading error' | endif
line 1:  endif
line 2: let [plugins, ftplugin] = dein#load_cache_raw(['/home/you/.vim/vimrc'])
calling function dein#load_cache_raw(['/home/you/.vim/vimrc'])

line 1:   let g:dein#_vimrcs = a:vimrcs
line 2:   let cache = get(g:, 'dein#cache_directory', g:dein#_base_path) .'/cache_' . g:dein#_progname
line 4:   let time = getftime(cache)
line 5:   if !empty(filter(map(copy(g:dein#_vimrcs), 'getftime(expand(v:val))'), 'time < v:val'))
line 7:     return [{}, {}]
line 8:   endif
line 9:   let list = readfile(cache)
line 10:   if len(list) != 3 || string(g:dein#_vimrcs) !=# list[0]
line 11:     return [{}, {}]
line 12:   endif
line 13:   return [json_decode(list[1]), json_decode(list[2])]
function dein#load_cache_raw returning [{'vim-easytags': {'lazy': 0, 'rtp': '...urced': 1, 'name': 'bufkill.vim'}}, {}]

continuing in /home/you/.cache/dein_vim_plugins/state_vim.vim

line 3: if empty(plugins) | throw 'Cache loading error' | endif
line 3:  throw 'Cache loading error' | endif
line 3:  endif
line 4: let g:dein#_plugins = plugins
line 5: let g:dein#_ftplugin = ftplugin
line 6: let g:dein#_base_path = '/home/you/.cache/dein_vim_plugins'
line 7: let g:dein#_runtime_path = '/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein'
line 8: let g:dein#_cache_path = '/home/you/.cache/dein_vim_plugins/.cache/vimrc'
line 9: let &runtimepath = '/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts'
line 10: filetype off
Searching for "ftoff.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/ftoff.vim"
Searching for "/var/lib/vim/addons/ftoff.vim"
Searching for "/usr/share/vim/vimfiles/ftoff.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/ftoff.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/ftoff.vim"
Searching for "/usr/share/vim/vim81/ftoff.vim"
chdir(/usr/share/vim/vim81)
fchdir() to previous dir
line 10: sourcing "/usr/share/vim/vim81/ftoff.vim"
line 1: " Vim support file to switch off detection of file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2001 Jun 11
line 5: 
line 6: if exists("did_load_filetypes")
line 7:   unlet did_load_filetypes
line 8: endif
line 9: 
line 10: " Remove all autocommands in the filetypedetect group
line 11: silent! au! filetypedetect *
finished sourcing /usr/share/vim/vim81/ftoff.vim
continuing in /home/you/.cache/dein_vim_plugins/state_vim.vim
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/ftoff.vim"
Searching for "/usr/share/vim/vimfiles/after/ftoff.vim"
Searching for "/var/lib/vim/addons/after/ftoff.vim"
Searching for "/home/you/.vim/after/ftoff.vim"
Searching for "/usr/share/vim-scripts/ftoff.vim"
finished sourcing /home/you/.cache/dein_vim_plugins/state_vim.vim
continuing in function dein#load_state
line 14:   catch
line 15:     if v:exception !=# 'Cache loading error'
line 16:       call dein#util#_error('Loading state error: ' . v:exception)
line 17:     endif
line 18:     call dein#clear_state()
line 19:     return 1
line 20:   endtry
function dein#load_state returning #0

continuing in /home/you/.vim/vimrc

line 98: call dein#begin('/home/you/.cache/dein_vim_plugins')
line 99: call dein#add('/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim')
line 100: call dein#add('python-mode/python-mode')
line 101: call dein#add('vim-syntastic/syntastic')
line 102: call dein#add('tomtom/tcomment_vim')
line 103: call dein#add('tommcdo/vim-lion')  " simpler align plugin : [count]gl+object+at what  eg 3glip=  
line 104: call dein#add('tpope/vim-surround')
line 105: call dein#add('vim-scripts/bufkill.vim')
line 106: call dein#add('tmhedberg/SimpylFold')
line 107: call dein#add('sencer/normal.vim')^I^I" fork of cr-bs-del-space-tab
line 108: call dein#add('vim-scripts/colorsupport.vim')^I^I" gvim colorschemes in terminals
line 109: call dein#add('qpkorr/vim-bufkill')^I^I^I^I^I" makes :BD  :BUN work
line 110: call dein#add('xolox/vim-easytags') 
line 111: call dein#add('xolox/vim-misc')^I^I^I^I^I^I" required for vim-easytags
line 112: "call dein#add('  ') 
line 113: " - Trial
line 114: call dein#add('wincent/terminus')^I^I^I^I^I" change cursor depending on mode
line 115: call dein#add('chaoren/vim-wordmotion')
line 116: call dein#add('Scuilion/markdown-drawer') 
line 117: " call dein#add('wsdjeg/dein-ui.vim')^I^I^I^I" vundle-like side pannel when updating
line 118: 
line 119: call dein#end()
line 120: call dein#save_state()
line 121: endif
line 122: filetype plugin indent on    " required
Searching for "filetype.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/filetype.vim"
Searching for "/var/lib/vim/addons/filetype.vim"
Searching for "/usr/share/vim/vimfiles/filetype.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/filetype.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/filetype.vim"
Searching for "/usr/share/vim/vim81/filetype.vim"
chdir(/usr/share/vim/vim81)
fchdir() to previous dir
line 122: sourcing "/usr/share/vim/vim81/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2019 Jan 28
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
line 9: endif
line 10: let did_load_filetypes = 1
line 11: 
line 12: " Line continuation is used here, remove 'C' from 'cpoptions'
line 13: let s:cpo_save = &cpo
line 14: set cpo&vim
line 15: 
line 16: augroup filetypedetect
line 17: 
line 18: " Ignored extensions
line 19: if exists("*fnameescape")
line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
line 28: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short
line 32: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif
line 33: elseif &verbose > 0
line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
line 35: endif
line 36: 
line 37: " Pattern used to match file names which should not be inspected.
line 38: " Currently finds compressed files.
line 39: if !exists("g:ft_ignore_pat")
line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
line 41: endif
line 42: 
line 43: " Function used for patterns that end in a star: don't set the filetype if the
line 44: " file name matches ft_ignore_pat.
line 45: func! s:StarSetf(ft)
line 50: 
line 51: " Vim help file
line 52: au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt^Isetf help
line 53: 
line 54: " Abaqus or Trasys
line 55: au BufNewFile,BufRead *.inp^I^I^Icall dist#ft#Check_inp()
line 56: 
line 57: " A-A-P recipe
line 58: au BufNewFile,BufRead *.aap^I^I^Isetf aap
line 59: 
line 60: " A2ps printing utility
line 61: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps
line 62: 
line 63: " ABAB/4
line 64: au BufNewFile,BufRead *.abap^I^I^Isetf abap
line 65: 
line 66: " ABC music notation
line 67: au BufNewFile,BufRead *.abc^I^I^Isetf abc
line 68: 
line 69: " ABEL
line 70: au BufNewFile,BufRead *.abl^I^I^Isetf abel
line 71: 
line 72: " AceDB
line 73: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb
line 74: 
line 75: " Ada (83, 9X, 95)
line 76: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada
line 77: if has("vms")
line 78:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada
line 79: else
line 80:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada
line 81: endif
line 82: 
line 83: " AHDL
line 84: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl
line 85: 
line 86: " AMPL
line 87: au BufNewFile,BufRead *.run^I^I^Isetf ampl
line 88: 
line 89: " Ant
line 90: au BufNewFile,BufRead build.xml^I^I^Isetf ant
line 91: 
line 92: " Arduino
line 93: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino
line 94: 
line 95: " Apache style config file
line 96: au BufNewFile,BufRead proftpd.conf*^I^Icall s:StarSetf('apachestyle')
line 97: 
line 98: " Apache config file
line 99: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache
line 100: au BufNewFile,BufRead */etc/apache2/sites-*/*.com^I^Isetf apache
line 101: 
line 102: " XA65 MOS6510 cross assembler
line 103: au BufNewFile,BufRead *.a65^I^I^Isetf a65
line 104: 
line 105: " Applescript
line 106: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript
line 107: 
line 108: " Applix ELF
line 110: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif
line 111: 
line 112: " ALSA configuration
line 113: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf
line 114: 
line 115: " Arc Macro Language
line 116: au BufNewFile,BufRead *.aml^I^I^Isetf aml
line 117: 
line 118: " APT config file
line 119: au BufNewFile,BufRead apt.conf^I^I       setf aptconf
line 120: au BufNewFile,BufRead */.aptitude/config       setf aptconf
line 121: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf
line 122: 
line 123: " Arch Inventory file
line 124: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch
line 125: 
line 126: " ART*Enterprise (formerly ART-IM)
line 127: au BufNewFile,BufRead *.art^I^I^Isetf art
line 128: 
line 129: " AsciiDoc
line 130: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc
line 131: 
line 132: " ASN.1
line 133: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn
line 134: 
line 135: " Active Server Pages (with Visual Basic Script)
line 141: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif
line 142: 
line 143: " Active Server Pages (with Perl or Visual Basic Script)
line 151: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif
line 152: 
line 153: " Grub (must be before catch *.lst)
line 154: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub
line 155: 
line 156: " Assembly (all kinds)
line 157: " *.lst is not pure assembly, it has two extra columns (address, byte codes)
line 158: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall dist#ft#FTasm()
line 159: 
line 160: " Macro (VAX)
line 161: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm
line 162: 
line 163: " Atlas
line 164: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas
line 165: 
line 166: " Autoit v3
line 167: au BufNewFile,BufRead *.au3^I^I^Isetf autoit
line 168: 
line 169: " Autohotkey
line 170: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey
line 171: 
line 172: " Automake
line 173: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake
line 174: 
line 175: " Autotest .at files are actually m4
line 176: au BufNewFile,BufRead *.at^I^I^Isetf m4
line 177: 
line 178: " Avenue
line 179: au BufNewFile,BufRead *.ave^I^I^Isetf ave
line 180: 
line 181: " Awk
line 182: au BufNewFile,BufRead *.awk^I^I^Isetf awk
line 183: 
line 184: " B
line 185: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b
line 186: 
line 187: " BASIC or Visual Basic
line 188: au BufNewFile,BufRead *.bas^I^I^Icall dist#ft#FTVB("basic")
line 189: 
line 190: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET
line 191: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb
line 192: 
line 193: " IBasic file (similar to QBasic)
line 194: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic
line 195: 
line 196: " FreeBasic file (similar to QBasic)
line 197: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic
line 198: 
line 199: " Batch file for MSDOS.
line 200: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch
line 201: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
line 203: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
line 204: 
line 205: " Batch file for 4DOS
line 206: au BufNewFile,BufRead *.btm^I^I^Icall dist#ft#FTbtm()
line 207: 
line 208: " BC calculator
line 209: au BufNewFile,BufRead *.bc^I^I^Isetf bc
line 210: 
line 211: " BDF font
line 212: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf
line 213: 
line 214: " BibTeX bibliography database file
line 215: au BufNewFile,BufRead *.bib^I^I^Isetf bib
line 216: 
line 217: " BibTeX Bibliography Style
line 218: au BufNewFile,BufRead *.bst^I^I^Isetf bst
line 219: 
line 220: " BIND configuration
line 221: " sudoedit uses namedXXXX.conf
line 222: au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key^Isetf named
line 223: 
line 224: " BIND zone
line 225: au BufNewFile,BufRead named.root^I^Isetf bindzone
line 226: au BufNewFile,BufRead *.db^I^I^Icall dist#ft#BindzoneCheck('')
line 227: 
line 228: " Blank
line 229: au BufNewFile,BufRead *.bl^I^I^Isetf blank
line 230: 
line 231: " Blkid cache file
line 232: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml
line 233: 
line 234: " Bazel (http://bazel.io)
line 235: autocmd BufRead,BufNewFile *.bzl,WORKSPACE,BUILD.bazel ^Isetf bzl
line 236: if has("fname_case")
line 237:   " There is another check for BUILD further below.
line 238:   autocmd BufRead,BufNewFile BUILD^I^I^Isetf bzl
line 239: endif
line 240: 
line 241: " C or lpc
line 242: au BufNewFile,BufRead *.c^I^I^Icall dist#ft#FTlpc()
line 243: au BufNewFile,BufRead *.lpc,*.ulpc^I^Isetf lpc
line 244: 
line 245: " Calendar
line 246: au BufNewFile,BufRead calendar^I^I^Isetf calendar
line 247: 
line 248: " C#
line 249: au BufNewFile,BufRead *.cs^I^I^Isetf cs
line 250: 
line 251: " CSDL
line 252: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl
line 253: 
line 254: " Cabal
line 255: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal
line 256: 
line 257: " Cdrdao TOC
line 258: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc
line 259: 
line 260: " Cdrdao config
line 261: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf
line 262: 
line 263: " Cfengine
line 264: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine
line 265: 
line 266: " ChaiScript
line 267: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript
line 268: 
line 269: " Comshare Dimension Definition Language
line 270: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl
line 271: 
line 272: " Conary Recipe
line 273: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe
line 274: 
line 275: " Controllable Regex Mutilator
line 276: au BufNewFile,BufRead *.crm^I^I^Isetf crm
line 277: 
line 278: " Cyn++
line 279: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp
line 280: 
line 281: " Cynlib
line 282: " .cc and .cpp files can be C++ or Cynlib.
line 284: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif
line 286: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
line 287: 
line 288: " C++
line 289: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp
line 290: if has("fname_case")
line 291:   au BufNewFile,BufRead *.C,*.H setf cpp
line 292: endif
line 293: 
line 294: " .h files can be C, Ch C++, ObjC or ObjC++.
line 295: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is
line 296: " detected automatically.
line 297: au BufNewFile,BufRead *.h^I^I^Icall dist#ft#FTheader()
line 298: 
line 299: " Ch (CHscript)
line 300: au BufNewFile,BufRead *.chf^I^I^Isetf ch
line 301: 
line 302: " TLH files are C++ headers generated by Visual C++'s #import from typelibs
line 303: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp
line 304: 
line 305: " Cascading Style Sheets
line 306: au BufNewFile,BufRead *.css^I^I^Isetf css
line 307: 
line 308: " Century Term Command Scripts (*.cmd too)
line 309: au BufNewFile,BufRead *.con^I^I^Isetf cterm
line 310: 
line 311: " Changelog
line 313: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch^Isetf debchangelog
line 314: 
line 320: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif
line 321: 
line 325: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif
line 326: 
line 327: " CHILL
line 328: au BufNewFile,BufRead *..ch^I^I^Isetf chill
line 329: 
line 330: " Changes for WEB and CWEB or CHILL
line 331: au BufNewFile,BufRead *.ch^I^I^Icall dist#ft#FTchange()
line 332: 
line 333: " ChordPro
line 334: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro
line 335: 
line 336: " Clean
line 337: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean
line 338: 
line 339: " Clever
line 340: au BufNewFile,BufRead *.eni^I^I^Isetf cl
line 341: 
line 342: " Clever or dtd
line 343: au BufNewFile,BufRead *.ent^I^I^Icall dist#ft#FTent()
line 344: 
line 345: " Clipper (or FoxPro; could also be eviews)
line 351: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif
line 352: 
line 353: " Clojure
line 354: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure
line 355: 
line 356: " Cmake
line 357: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake
line 358: 
line 359: " Cmusrc
line 360: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc
line 361: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc
line 362: 
line 363: " Cobol
line 364: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol
line 365: "   cobol or zope form controller python script? (heuristic)
line 371: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif
line 372: 
line 373: " Coco/R
line 374: au BufNewFile,BufRead *.atg^I^I^Isetf coco
line 375: 
line 376: " Cold Fusion
line 377: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf
line 378: 
line 379: " Configure scripts
line 380: au BufNewFile,BufRead configure.in,configure.ac setf config
line 381: 
line 382: " CUDA  Cumpute Unified Device Architecture
line 383: au BufNewFile,BufRead *.cu,*.cuh^I^Isetf cuda
line 384: 
line 385: " Dockerfile
line 386: au BufNewFile,BufRead Dockerfile,*.Dockerfile^Isetf dockerfile
line 387: 
line 388: " WildPackets EtherPeek Decoder
line 389: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd
line 390: 
line 391: " Enlightenment configuration files
line 392: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c
line 393: 
line 394: " Eterm
line 395: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm
line 396: 
line 397: " Euphoria 3 or 4
line 398: au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call dist#ft#EuphoriaCheck()
line 399: if has("fname_case")
line 400:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call dist#ft#EuphoriaCheck()
line 401: endif
line 402: 
line 403: " Lynx config files
line 404: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx
line 405: 
line 406: " Quake
line 407: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake
line 408: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake
line 409: 
line 410: " Quake C
line 411: au BufNewFile,BufRead *.qc^I^I^Isetf c
line 412: 
line 413: " Configure files
line 414: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg
line 415: 
line 416: " Cucumber
line 417: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber
line 418: 
line 419: " Communicating Sequential Processes
line 420: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp
line 421: 
line 422: " CUPL logic description and simulation
line 423: au BufNewFile,BufRead *.pld^I^I^Isetf cupl
line 424: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim
line 425: 
line 426: " Debian Control
line 427: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol
line 431: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif
line 432: 
line 433: " Debian Copyright
line 434: au BufNewFile,BufRead */debian/copyright^Isetf debcopyright
line 438: au BufNewFile,BufRead copyright  if getline(1) =~ '^Format:'|   setf debcopyright| endif
line 439: 
line 440: " Debian Sources.list
line 441: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources
line 442: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources
line 443: 
line 444: " Deny hosts
line 445: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts
line 446: 
line 447: " dnsmasq(8) configuration files
line 448: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq
line 449: 
line 450: " ROCKLinux package description
line 451: au BufNewFile,BufRead *.desc^I^I^Isetf desc
line 452: 
line 453: " the D language or dtrace
line 454: au BufNewFile,BufRead *.d^I^I^Icall dist#ft#DtraceCheck()
line 455: 
line 456: " Desktop files
line 457: au BufNewFile,BufRead *.desktop,.directory^Isetf desktop
line 458: 
line 459: " Dict config
line 460: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf
line 461: 
line 462: " Dictd config
line 463: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf
line 464: 
line 465: " Diff files
line 466: au BufNewFile,BufRead *.diff,*.rej^I^Isetf diff
line 472: au BufNewFile,BufRead *.patch if getline(1) =~ '^From [0-9a-f]\{40\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif
line 473: 
line 474: " Dircolors
line 475: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors
line 476: 
line 477: " Diva (with Skill) or InstallShield
line 483: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif
line 484: 
line 485: " DCL (Digital Command Language - vms) or DNS zone file
line 486: au BufNewFile,BufRead *.com^I^I^Icall dist#ft#BindzoneCheck('dcl')
line 487: 
line 488: " DOT
line 489: au BufNewFile,BufRead *.dot^I^I^Isetf dot
line 490: 
line 491: " Dylan - lid files
line 492: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid
line 493: 
line 494: " Dylan - intr files (melange)
line 495: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr
line 496: 
line 497: " Dylan
line 498: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan
line 499: 
line 500: " Microsoft Module Definition
line 501: au BufNewFile,BufRead *.def^I^I^Isetf def
line 502: 
line 503: " Dracula
line 504: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula
line 505: 
line 506: " Datascript
line 507: au BufNewFile,BufRead *.ds^I^I^Isetf datascript
line 508: 
line 509: " dsl
line 510: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl
line 511: 
line 512: " DTD (Document Type Definition for XML)
line 513: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd
line 514: 
line 515: " DTS/DSTI (device tree files)
line 516: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts
line 517: 
line 518: " EDIF (*.edf,*.edif,*.edn,*.edo) or edn
line 519: au BufNewFile,BufRead *.ed\(f\|if\|o\)^I^Isetf edif
line 525: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif
line 526: 
line 527: " EditorConfig (close enough to dosini)
line 528: au BufNewFile,BufRead .editorconfig^I^Isetf dosini
line 529: 
line 530: " Embedix Component Description
line 531: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd
line 532: 
line 533: " Eiffel or Specman or Euphoria
line 534: au BufNewFile,BufRead *.e,*.E^I^I^Icall dist#ft#FTe()
line 535: 
line 536: " Elinks configuration
line 537: au BufNewFile,BufRead */etc/elinks.conf,*/.elinks/elinks.conf^Isetf elinks
line 538: 
line 539: " ERicsson LANGuage; Yaws is erlang too
line 540: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang
line 541: 
line 542: " Elm Filter Rules file
line 543: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt
line 544: 
line 545: " ESMTP rc file
line 546: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc
line 547: 
line 548: " ESQL-C
line 549: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc
line 550: 
line 551: " Esterel
line 552: au BufNewFile,BufRead *.strl^I^I^Isetf esterel
line 553: 
line 554: " Essbase script
line 555: au BufNewFile,BufRead *.csc^I^I^Isetf csc
line 556: 
line 557: " Exim
line 558: au BufNewFile,BufRead exim.conf^I^I^Isetf exim
line 559: 
line 560: " Expect
line 561: au BufNewFile,BufRead *.exp^I^I^Isetf expect
line 562: 
line 563: " Exports
line 564: au BufNewFile,BufRead exports^I^I^Isetf exports
line 565: 
line 566: " Falcon
line 567: au BufNewFile,BufRead *.fal^I^I^Isetf falcon
line 568: 
line 569: " Fantom
line 570: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan
line 571: 
line 572: " Factor
line 573: au BufNewFile,BufRead *.factor^I^I^Isetf factor
line 574: 
line 575: " Fetchmail RC file
line 576: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail
line 577: 
line 578: " FlexWiki - disabled, because it has side effects when a .wiki file
line 579: " is not actually FlexWiki
line 580: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki
line 581: 
line 582: " Focus Executable
line 583: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec
line 584: 
line 585: " Focus Master file (but not for auto.master)
line 586: au BufNewFile,BufRead auto.master^I^Isetf conf
line 587: au BufNewFile,BufRead *.mas,*.master^I^Isetf master
line 588: 
line 589: " Forth
line 590: au BufNewFile,BufRead *.fs,*.ft,*.fth^I^Isetf forth
line 591: 
line 592: " Reva Forth
line 593: au BufNewFile,BufRead *.frt^I^I^Isetf reva
line 594: 
line 595: " Fortran
line 596: if has("fname_case")
line 597:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran
line 598: endif
line 599: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran
line 600: 
line 601: " Framescript
line 602: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript
line 603: 
line 604: " FStab
line 605: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab
line 606: 
line 607: " GDB command files
line 608: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb
line 609: 
line 610: " GDMO
line 611: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo
line 612: 
line 613: " Gedcom
line 614: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom
line 615: 
line 616: " Git
line 617: au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG ^Isetf gitcommit
line 618: au BufNewFile,BufRead *.git/config,.gitconfig,/etc/gitconfig ^Isetf gitconfig
line 619: au BufNewFile,BufRead */.config/git/config^I^I^Isetf gitconfig
line 620: au BufNewFile,BufRead .gitmodules,*.git/modules/*/config^Isetf gitconfig
line 621: if !empty($XDG_CONFIG_HOME)
line 622:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Isetf gitconfig
line 623: endif
line 624: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase
line 625: au BufRead,BufNewFile .gitsendemail.msg.??????^Isetf gitsendemail
line 629: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif
line 633: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif
line 634: 
line 635: " Gkrellmrc
line 636: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc
line 637: 
line 638: " GP scripts (2.0 and onward)
line 639: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp
line 640: 
line 641: " GPG
line 642: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg
line 643: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg
line 644: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg
line 645: if !empty($GNUPGHOME)
line 646:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg
line 647:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg
line 648: endif
line 649: 
line 650: " gnash(1) configuration files
line 651: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash
line 652: 
line 653: " Gitolite
line 654: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite
line 655: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')
line 656: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl
line 657: 
line 658: " Gnuplot scripts
line 659: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot
line 660: 
line 661: " Go (Google)
line 662: au BufNewFile,BufRead *.go^I^I^Isetf go
line 663: 
line 664: " GrADS scripts
line 665: au BufNewFile,BufRead *.gs^I^I^Isetf grads
line 666: 
line 667: " Gretl
line 668: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl
line 669: 
line 670: " Groovy
line 671: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy
line 672: 
line 673: " GNU Server Pages
line 674: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp
line 675: 
line 676: " Group file
line 677: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group
line 678: 
line 679: " GTK RC
line 680: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc
line 681: 
line 682: " Haml
line 683: au BufNewFile,BufRead *.haml^I^I^Isetf haml
line 684: 
line 685: " Hamster Classic | Playground files
line 686: au BufNewFile,BufRead *.hsc,*.hsm^I^Isetf hamster
line 687: 
line 688: " Haskell
line 689: au BufNewFile,BufRead *.hs,*.hs-boot^I^Isetf haskell
line 690: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell
line 691: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell
line 692: 
line 693: " Haste
line 694: au BufNewFile,BufRead *.ht^I^I^Isetf haste
line 695: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc
line 696: 
line 697: " Hercules
line 698: au BufNewFile,BufRead *.vc,*.ev,*.sum,*.errsum^Isetf hercules
line 699: 
line 700: " HEX (Intel)
line 701: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex
line 702: 
line 703: " Tilde (must be before HTML)
line 704: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde
line 705: 
line 706: " HTML (.shtml and .stm for server side)
line 707: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call dist#ft#FThtml()
line 708: 
line 709: " HTML with Ruby - eRuby
line 710: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby
line 711: 
line 712: " HTML with M4
line 713: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4
line 714: 
line 715: " HTML Cheetah template
line 716: au BufNewFile,BufRead *.tmpl^I^I^Isetf htmlcheetah
line 717: 
line 718: " Host config
line 719: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf
line 720: 
line 721: " Hosts access
line 722: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess
line 723: 
line 724: " Hyper Builder
line 725: au BufNewFile,BufRead *.hb^I^I^Isetf hb
line 726: 
line 727: " Httest
line 728: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest
line 729: 
line 730: " Icon
line 731: au BufNewFile,BufRead *.icn^I^I^Isetf icon
line 732: 
line 733: " IDL (Interface Description Language)
line 734: au BufNewFile,BufRead *.idl^I^I^Icall dist#ft#FTidl()
line 735: 
line 736: " Microsoft IDL (Interface Description Language)  Also *.idl
line 737: " MOF = WMI (Windows Management Instrumentation) Managed Object Format
line 738: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl
line 739: 
line 740: " Icewm menu
line 741: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu
line 742: 
line 743: " Indent profile (must come before IDL *.pro!)
line 744: au BufNewFile,BufRead .indent.pro^I^Isetf indent
line 745: au BufNewFile,BufRead indent.pro^I^Icall dist#ft#ProtoCheck('indent')
line 746: 
line 747: " IDL (Interactive Data Language)
line 748: au BufNewFile,BufRead *.pro^I^I^Icall dist#ft#ProtoCheck('idlang')
line 749: 
line 750: " Indent RC
line 751: au BufNewFile,BufRead indentrc^I^I^Isetf indent
line 752: 
line 753: " Inform
line 754: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform
line 755: 
line 756: " Initng
line 757: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng
line 758: 
line 759: " Innovation Data Processing
line 760: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c ^Isetf upstreamdat
line 761: au BufRead,BufNewFile fdrupstream.log,upstream.log\c,upstream.*.log\c,*.upstream.log\c,UPSTREAM-*.log\c ^Isetf upstreamlog
line 762: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog
line 763: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c ^Isetf usserverlog
line 764: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c ^Isetf usw2kagtlog
line 765: 
line 766: " Ipfilter
line 767: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter
line 768: 
line 769: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)
line 770: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl
line 771: 
line 772: " .INI file for MSDOS
line 773: au BufNewFile,BufRead *.ini^I^I^Isetf dosini
line 774: 
line 775: " SysV Inittab
line 776: au BufNewFile,BufRead inittab^I^I^Isetf inittab
line 777: 
line 778: " Inno Setup
line 779: au BufNewFile,BufRead *.iss^I^I^Isetf iss
line 780: 
line 781: " J
line 782: au BufNewFile,BufRead *.ijs^I^I^Isetf j
line 783: 
line 784: " JAL
line 785: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal
line 786: 
line 787: " Jam
line 788: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam
line 789: 
line 790: " Java
line 791: au BufNewFile,BufRead *.java,*.jav^I^Isetf java
line 792: 
line 793: " JavaCC
line 794: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc
line 795: 
line 796: " JavaScript, ECMAScript
line 797: au BufNewFile,BufRead *.js,*.javascript,*.es,*.jsx,*.mjs   setf javascript
line 798: 
line 799: " Java Server Pages
line 800: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp
line 801: 
line 802: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 803: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties
line 804: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')
line 805: 
line 806: " Jess
line 807: au BufNewFile,BufRead *.clp^I^I^Isetf jess
line 808: 
line 809: " Jgraph
line 810: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph
line 811: 
line 812: " Jovial
line 813: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial
line 814: 
line 815: " JSON
line 816: au BufNewFile,BufRead *.json,*.jsonp,*.webmanifest^Isetf json
line 817: 
line 818: " Kixtart
line 819: au BufNewFile,BufRead *.kix^I^I^Isetf kix
line 820: 
line 821: " Kimwitu[++]
line 822: au BufNewFile,BufRead *.k^I^I^Isetf kwt
line 823: 
line 824: " Kivy
line 825: au BufNewFile,BufRead *.kv^I^I^Isetf kivy
line 826: 
line 827: " KDE script
line 828: au BufNewFile,BufRead *.ks^I^I^Isetf kscript
line 829: 
line 830: " Kconfig
line 831: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig
line 832: 
line 833: " Lace (ISE)
line 834: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace
line 835: 
line 836: " Latte
line 837: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte
line 838: 
line 839: " Limits
line 840: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits
line 841: 
line 842: " LambdaProlog (*.mod too, see Modsim)
line 843: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog
line 844: 
line 845: " LDAP LDIF
line 846: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif
line 847: 
line 848: " Ld loader
line 849: au BufNewFile,BufRead *.ld^I^I^Isetf ld
line 850: 
line 851: " Less
line 852: au BufNewFile,BufRead *.less^I^I^Isetf less
line 853: 
line 854: " Lex
line 855: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex
line 856: 
line 857: " Libao
line 858: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao
line 859: 
line 860: " Libsensors
line 861: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors
line 862: 
line 863: " LFTP
line 864: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp
line 865: 
line 866: " Lifelines (or Lex for C++!)
line 867: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines
line 868: 
line 869: " Lilo: Linux loader
line 870: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo
line 871: 
line 872: " Lisp (*.el = ELisp, *.cl = Common Lisp, *.jl = librep Lisp)
line 873: if has("fname_case")
line 874:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,*.L,.emacs,.sawfishrc setf lisp
line 875: else
line 876:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,.emacs,.sawfishrc setf lisp
line 877: endif
line 878: 
line 879: " SBCL implementation of Common Lisp
line 880: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp
line 881: 
line 882: " Liquid
line 883: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid
line 884: 
line 885: " Lite
line 886: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite
line 887: 
line 888: " LiteStep RC files
line 889: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep
line 890: 
line 891: " Login access
line 892: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess
line 893: 
line 894: " Login defs
line 895: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs
line 896: 
line 897: " Logtalk
line 898: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk
line 899: 
line 900: " LOTOS
line 901: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos
line 902: 
line 903: " Lout (also: *.lt)
line 904: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout
line 905: 
line 906: " Lua
line 907: au BufNewFile,BufRead *.lua^I^I^Isetf lua
line 908: 
line 909: " Luarocks
line 910: au BufNewFile,BufRead *.rockspec^I^Isetf lua
line 911: 
line 912: " Linden Scripting Language (Second Life)
line 913: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl
line 914: 
line 915: " Lynx style file (or LotusScript!)
line 916: au BufNewFile,BufRead *.lss^I^I^Isetf lss
line 917: 
line 918: " M4
line 920: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
line 921: 
line 922: " MaGic Point
line 923: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp
line 924: 
line 925: " Mail (for Elm, trn, mutt, muttng, rn, slrn, neomutt)
line 926: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail
line 927: 
line 928: " Mail aliases
line 929: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases
line 930: 
line 931: " Mailcap configuration file
line 932: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap
line 933: 
line 934: " Makefile
line 935: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make
line 936: 
line 937: " MakeIndex
line 938: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist
line 939: 
line 940: " Mallard
line 941: au BufNewFile,BufRead *.page^I^I^Isetf mallard
line 942: 
line 943: " Manpage
line 944: au BufNewFile,BufRead *.man^I^I^Isetf man
line 945: 
line 946: " Man config
line 947: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf
line 948: 
line 949: " Maple V
line 950: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple
line 951: 
line 952: " Map (UMN mapserver config file)
line 953: au BufNewFile,BufRead *.map^I^I^Isetf map
line 954: 
line 955: " Markdown
line 956: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown
line 957: 
line 958: " Mason
line 959: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason
line 960: 
line 961: " Mathematica, Matlab, Murphi or Objective C
line 962: au BufNewFile,BufRead *.m^I^I^Icall dist#ft#FTm()
line 963: 
line 964: " Mathematica notebook
line 965: au BufNewFile,BufRead *.nb^I^I^Isetf mma
line 966: 
line 967: " Maya Extension Language
line 968: au BufNewFile,BufRead *.mel^I^I^Isetf mel
line 969: 
line 970: " Mercurial (hg) commit file
line 971: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit
line 972: 
line 973: " Mercurial config (looks like generic config file)
line 974: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg
line 975: 
line 976: " Messages (logs mostly)
line 977: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
line 978: 
line 979: " Metafont
line 980: au BufNewFile,BufRead *.mf^I^I^Isetf mf
line 981: 
line 982: " MetaPost
line 983: au BufNewFile,BufRead *.mp^I^I^Isetf mp
line 984: 
line 985: " MGL
line 986: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl
line 987: 
line 988: " MIX - Knuth assembly
line 989: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix
line 990: 
line 991: " MMIX or VMS makefile
line 992: au BufNewFile,BufRead *.mms^I^I^Icall dist#ft#FTmms()
line 993: 
line 994: " Symbian meta-makefile definition (MMP)
line 995: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp
line 996: 
line 997: " Modsim III (or LambdaProlog)
line 1003: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif
line 1004: 
line 1005: " Modula 2  (.md removed in favor of Markdown)
line 1006: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.mi^Isetf modula2
line 1007: 
line 1008: " Modula 3 (.m3, .i3, .mg, .ig)
line 1009: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3
line 1010: 
line 1011: " Monk
line 1012: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk
line 1013: 
line 1014: " MOO
line 1015: au BufNewFile,BufRead *.moo^I^I^Isetf moo
line 1016: 
line 1017: " Modconf
line 1018: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf
line 1019: 
line 1020: " Mplayer config
line 1021: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf
line 1022: 
line 1023: " Motorola S record
line 1024: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec
line 1025: 
line 1026: " Mrxvtrc
line 1027: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc
line 1028: 
line 1029: " Msql
line 1030: au BufNewFile,BufRead *.msql^I^I^Isetf msql
line 1031: 
line 1032: " Mysql
line 1033: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql
line 1034: 
line 1035: " Mutt setup files (must be before catch *.rc)
line 1036: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')
line 1037: 
line 1038: " M$ Resource files
line 1039: au BufNewFile,BufRead *.rc,*.rch^I^Isetf rc
line 1040: 
line 1041: " MuPAD source
line 1042: au BufRead,BufNewFile *.mu^I^I^Isetf mupad
line 1043: 
line 1044: " Mush
line 1045: au BufNewFile,BufRead *.mush^I^I^Isetf mush
line 1046: 
line 1047: " Mutt setup file (also for Muttng)
line 1048: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc
line 1049: 
line 1050: " N1QL
line 1051: au BufRead,BufNewfile *.n1ql,*.nql^I^Isetf n1ql
line 1052: 
line 1053: " Nano
line 1054: au BufNewFile,BufRead */etc/nanorc,*.nanorc  ^Isetf nanorc
line 1055: 
line 1056: " Nastran input/DMAP
line 1057: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran
line 1058: 
line 1059: " Natural
line 1060: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural
line 1061: 
line 1062: " Noemutt setup file
line 1063: au BufNewFile,BufRead Neomuttrc^I^I^Isetf neomuttrc
line 1064: 
line 1065: " Netrc
line 1066: au BufNewFile,BufRead .netrc^I^I^Isetf netrc
line 1067: 
line 1068: " Ninja file
line 1069: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja
line 1070: 
line 1071: " Novell netware batch files
line 1072: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf
line 1073: 
line 1074: " Nroff/Troff (*.ms and *.t are checked below)
line 1078: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif
line 1079: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff
line 1080: au BufNewFile,BufRead *.[1-9]^I^I^Icall dist#ft#FTnroff()
line 1081: 
line 1082: " Nroff or Objective C++
line 1083: au BufNewFile,BufRead *.mm^I^I^Icall dist#ft#FTmm()
line 1084: 
line 1085: " Not Quite C
line 1086: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc
line 1087: 
line 1088: " NSE - Nmap Script Engine - uses Lua syntax
line 1089: au BufNewFile,BufRead *.nse^I^I^Isetf lua
line 1090: 
line 1091: " NSIS
line 1092: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis
line 1093: 
line 1094: " OCAML
line 1095: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit^Isetf ocaml
line 1096: 
line 1097: " Occam
line 1098: au BufNewFile,BufRead *.occ^I^I^Isetf occam
line 1099: 
line 1100: " Omnimark
line 1101: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark
line 1102: 
line 1103: " OpenROAD
line 1104: au BufNewFile,BufRead *.or^I^I^Isetf openroad
line 1105: 
line 1106: " OPL
line 1107: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl
line 1108: 
line 1109: " Oracle config file
line 1110: au BufNewFile,BufRead *.ora^I^I^Isetf ora
line 1111: 
line 1112: " Packet filter conf
line 1113: au BufNewFile,BufRead pf.conf^I^I^Isetf pf
line 1114: 
line 1115: " Pam conf
line 1116: au BufNewFile,BufRead */etc/pam.conf^I^Isetf pamconf
line 1117: 
line 1118: " PApp
line 1119: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp
line 1120: 
line 1121: " Password file
line 1122: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
line 1123: 
line 1124: " Pascal (also *.p)
line 1125: au BufNewFile,BufRead *.pas^I^I^Isetf pascal
line 1126: 
line 1127: " Delphi project file
line 1128: au BufNewFile,BufRead *.dpr^I^I^Isetf pascal
line 1129: 
line 1130: " PDF
line 1131: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf
line 1132: 
line 1133: " PCMK - HAE - crm configure edit
line 1134: au BufNewFile,BufRead *.pcmk ^I^I^Isetf pcmk
line 1135: 
line 1136: " Perl
line 1137: if has("fname_case")
line 1138:   au BufNewFile,BufRead *.pl,*.PL^I^Icall dist#ft#FTpl()
line 1139: else
line 1140:   au BufNewFile,BufRead *.pl^I^I^Icall dist#ft#FTpl()
line 1141: endif
line 1142: au BufNewFile,BufRead *.plx,*.al,*.psgi^I^Isetf perl
line 1143: au BufNewFile,BufRead *.p6,*.pm6,*.pl6^I^Isetf perl6
line 1144: 
line 1145: " Perl, XPM or XPM2
line 1153: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif
line 1154: 
line 1155: " Perl POD
line 1156: au BufNewFile,BufRead *.pod^I^I^Isetf pod
line 1157: au BufNewFile,BufRead *.pod6^I^I^Isetf pod6
line 1158: 
line 1159: " Php, php3, php4, etc.
line 1160: " Also Phtml (was used for PHP 2 in the past)
line 1161: " Also .ctp for Cake template file
line 1162: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php
line 1163: 
line 1164: " Pike and Cmod
line 1165: au BufNewFile,BufRead *.pike,*.pmod^I^Isetf pike
line 1166: au BufNewFile,BufRead *.cmod^I^I^Isetf cmod
line 1167: 
line 1168: " Pinfo config
line 1169: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo
line 1170: 
line 1171: " Palm Resource compiler
line 1172: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc
line 1173: 
line 1174: " Pine config
line 1175: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine
line 1176: 
line 1177: " PL/1, PL/I
line 1178: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli
line 1179: 
line 1180: " PL/M (also: *.inp)
line 1181: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm
line 1182: 
line 1183: " PL/SQL
line 1184: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql
line 1185: 
line 1186: " PLP
line 1187: au BufNewFile,BufRead *.plp^I^I^Isetf plp
line 1188: 
line 1189: " PO and PO template (GNU gettext)
line 1190: au BufNewFile,BufRead *.po,*.pot^I^Isetf po
line 1191: 
line 1192: " Postfix main config
line 1193: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain
line 1194: 
line 1195: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)
line 1196: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr
line 1197: 
line 1198: " PostScript Printer Description
line 1199: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd
line 1200: 
line 1201: " Povray
line 1202: au BufNewFile,BufRead *.pov^I^I^Isetf pov
line 1203: 
line 1204: " Povray configuration
line 1205: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini
line 1206: 
line 1207: " Povray, PHP or assembly
line 1208: au BufNewFile,BufRead *.inc^I^I^Icall dist#ft#FTinc()
line 1209: 
line 1210: " Printcap and Termcap
line 1212: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap
line 1214: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap
line 1215: 
line 1216: " PCCTS / ANTRL
line 1217: "au BufNewFile,BufRead *.g^I^I^Isetf antrl
line 1218: au BufNewFile,BufRead *.g^I^I^Isetf pccts
line 1219: 
line 1220: " PPWizard
line 1221: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz
line 1222: 
line 1223: " Obj 3D file format
line 1224: " TODO: is there a way to avoid MS-Windows Object files?
line 1225: au BufNewFile,BufRead *.obj^I^I^Isetf obj
line 1226: 
line 1227: " Oracle Pro*C/C++
line 1228: au BufNewFile,BufRead *.pc^I^I^Isetf proc
line 1229: 
line 1230: " Privoxy actions file
line 1231: au BufNewFile,BufRead *.action^I^I^Isetf privoxy
line 1232: 
line 1233: " Procmail
line 1234: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail
line 1235: 
line 1236: " Progress or CWEB
line 1237: au BufNewFile,BufRead *.w^I^I^Icall dist#ft#FTprogress_cweb()
line 1238: 
line 1239: " Progress or assembly
line 1240: au BufNewFile,BufRead *.i^I^I^Icall dist#ft#FTprogress_asm()
line 1241: 
line 1242: " Progress or Pascal
line 1243: au BufNewFile,BufRead *.p^I^I^Icall dist#ft#FTprogress_pascal()
line 1244: 
line 1245: " Software Distributor Product Specification File (POSIX 1387.2-1995)
line 1246: au BufNewFile,BufRead *.psf^I^I^Isetf psf
line 1250: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif
line 1251: 
line 1252: " Prolog
line 1253: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog
line 1254: 
line 1255: " Promela
line 1256: au BufNewFile,BufRead *.pml^I^I^Isetf promela
line 1257: 
line 1258: " Google protocol buffers
line 1259: au BufNewFile,BufRead *.proto^I^I^Isetf proto
line 1260: 
line 1261: " Protocols
line 1262: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols
line 1263: 
line 1264: " Pyrex
line 1265: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex
line 1266: 
line 1267: " Python, Python Shell Startup and Python Stub Files
line 1268: " Quixote (Python-based web framework)
line 1269: au BufNewFile,BufRead *.py,*.pyw,.pythonstartup,.pythonrc,*.ptl,*.pyi  setf python
line 1270: 
line 1271: " Radiance
line 1272: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance
line 1273: 
line 1274: " Ratpoison config/command files
line 1275: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison
line 1276: 
line 1277: " RCS file
line 1278: au BufNewFile,BufRead *\,v^I^I^Isetf rcs
line 1279: 
line 1280: " Readline
line 1281: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline
line 1282: 
line 1283: " Registry for MS-Windows
line 1285: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
line 1286: 
line 1287: " Renderman Interface Bytestream
line 1288: au BufNewFile,BufRead *.rib^I^I^Isetf rib
line 1289: 
line 1290: " Rexx
line 1291: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx
line 1292: 
line 1293: " R (Splus)
line 1294: if has("fname_case")
line 1295:   au BufNewFile,BufRead *.s,*.S^I^I^Isetf r
line 1296: else
line 1297:   au BufNewFile,BufRead *.s^I^I^Isetf r
line 1298: endif
line 1299: 
line 1300: " R Help file
line 1301: if has("fname_case")
line 1302:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp
line 1303: else
line 1304:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp
line 1305: endif
line 1306: 
line 1307: " R noweb file
line 1308: if has("fname_case")
line 1309:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb
line 1310: else
line 1311:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb
line 1312: endif
line 1313: 
line 1314: " R Markdown file
line 1315: if has("fname_case")
line 1316:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd
line 1317: else
line 1318:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd
line 1319: endif
line 1320: 
line 1321: " R reStructuredText file
line 1322: if has("fname_case")
line 1323:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst
line 1324: else
line 1325:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst
line 1326: endif
line 1327: 
line 1328: " Rexx, Rebol or R
line 1329: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall dist#ft#FTr()
line 1330: 
line 1331: " Remind
line 1332: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind
line 1333: 
line 1334: " Resolv.conf
line 1335: au BufNewFile,BufRead resolv.conf^I^Isetf resolv
line 1336: 
line 1337: " Relax NG Compact
line 1338: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc
line 1339: 
line 1340: " Relax NG XML
line 1341: au BufNewFile,BufRead *.rng^I^I^Isetf rng
line 1342: 
line 1343: " RPL/2
line 1344: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl
line 1345: 
line 1346: " Robots.txt
line 1347: au BufNewFile,BufRead robots.txt^I^Isetf robots
line 1348: 
line 1349: " Rpcgen
line 1350: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen
line 1351: 
line 1352: " reStructuredText Documentation Format
line 1353: au BufNewFile,BufRead *.rst^I^I^Isetf rst
line 1354: 
line 1355: " RTF
line 1356: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf
line 1357: 
line 1358: " Interactive Ruby shell
line 1359: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby
line 1360: 
line 1361: " Ruby
line 1362: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby
line 1363: 
line 1364: " RubyGems
line 1365: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby
line 1366: 
line 1367: " Rust
line 1368: au BufNewFile,BufRead *.rs^I^I^Isetf rust
line 1369: 
line 1370: " Rackup
line 1371: au BufNewFile,BufRead *.ru^I^I^Isetf ruby
line 1372: 
line 1373: " Bundler
line 1374: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby
line 1375: 
line 1376: " Ruby on Rails
line 1377: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby
line 1378: 
line 1379: " Rantfile and Rakefile is like Ruby
line 1380: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby
line 1381: 
line 1382: " S-lang (or shader language, or SmallLisp)
line 1383: au BufNewFile,BufRead *.sl^I^I^Isetf slang
line 1384: 
line 1385: " Samba config
line 1386: au BufNewFile,BufRead smb.conf^I^I^Isetf samba
line 1387: 
line 1388: " SAS script
line 1389: au BufNewFile,BufRead *.sas^I^I^Isetf sas
line 1390: 
line 1391: " Sass
line 1392: au BufNewFile,BufRead *.sass^I^I^Isetf sass
line 1393: 
line 1394: " Sather
line 1395: au BufNewFile,BufRead *.sa^I^I^Isetf sather
line 1396: 
line 1397: " Scala
line 1398: au BufNewFile,BufRead *.scala^I^I^Isetf scala
line 1399: 
line 1400: " SBT - Scala Build Tool
line 1401: au BufNewFile,BufRead *.sbt^I^I^Isetf sbt
line 1402: 
line 1403: " Scilab
line 1404: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab
line 1405: 
line 1406: " SCSS
line 1407: au BufNewFile,BufRead *.scss^I^I^Isetf scss
line 1408: 
line 1409: " SD: Streaming Descriptors
line 1410: au BufNewFile,BufRead *.sd^I^I^Isetf sd
line 1411: 
line 1412: " SDL
line 1413: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl
line 1414: 
line 1415: " sed
line 1416: au BufNewFile,BufRead *.sed^I^I^Isetf sed
line 1417: 
line 1418: " Sieve (RFC 3028, 5228)
line 1419: au BufNewFile,BufRead *.siv,*.sieve^I^Isetf sieve
line 1420: 
line 1421: " Sendmail
line 1422: au BufNewFile,BufRead sendmail.cf^I^Isetf sm
line 1423: 
line 1424: " Sendmail .mc files are actually m4.  Could also be MS Message text file.
line 1425: au BufNewFile,BufRead *.mc^I^I^Icall dist#ft#McSetf()
line 1426: 
line 1427: " Services
line 1428: au BufNewFile,BufRead */etc/services^I^Isetf services
line 1429: 
line 1430: " Service Location config
line 1431: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf
line 1432: 
line 1433: " Service Location registration
line 1434: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg
line 1435: 
line 1436: " Service Location SPI
line 1437: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi
line 1438: 
line 1439: " Setserial config
line 1440: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial
line 1441: 
line 1442: " SGML
line 1452: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif
line 1453: 
line 1454: " SGMLDECL
line 1458: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif
line 1459: 
line 1460: " SGML catalog file
line 1461: au BufNewFile,BufRead catalog^I^I^Isetf catalog
line 1462: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')
line 1463: 
line 1464: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
line 1465: " Gentoo ebuilds and Arch Linux PKGBUILDs are actually bash scripts
line 1466: " NOTE: Patterns ending in a star are further down, these have lower priority.
line 1467: au BufNewFile,BufRead .bashrc,bashrc,bash.bashrc,.bash[_-]profile,.bash[_-]logout,.bash[_-]aliases,bash-fc[-.],*.bash,*/{,.}bash[_-]completion{,.d,.sh}{,/*},*.ebuild,*.eclass,PKGBUILD call dist#ft#SetFileTypeSH("bash")
line 1468: au BufNewFile,BufRead .kshrc,*.ksh call dist#ft#SetFileTypeSH("ksh")
line 1469: au BufNewFile,BufRead */etc/profile,.profile,*.sh,*.env call dist#ft#SetFileTypeSH(getline(1))
line 1470: 
line 1471: 
line 1472: " Shell script (Arch Linux) or PHP file (Drupal)
line 1478: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call dist#ft#SetFileTypeSH("bash") | endif
line 1479: 
line 1480: " tcsh scripts (patterns ending in a star further below)
line 1481: au BufNewFile,BufRead .tcshrc,*.tcsh,tcsh.tcshrc,tcsh.login^Icall dist#ft#SetFileTypeShell("tcsh")
line 1482: 
line 1483: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
line 1484: " (patterns ending in a start further below)
line 1485: au BufNewFile,BufRead .login,.cshrc,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call dist#ft#CSH()
line 1486: 
line 1487: " Z-Shell script (patterns ending in a star further below)
line 1488: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh
line 1489: au BufNewFile,BufRead .zshrc,.zshenv,.zlogin,.zlogout,.zcompdump setf zsh
line 1490: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh
line 1491: 
line 1492: " Scheme
line 1493: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme
line 1494: 
line 1495: " Screen RC
line 1496: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen
line 1497: 
line 1498: " Simula
line 1499: au BufNewFile,BufRead *.sim^I^I^Isetf simula
line 1500: 
line 1501: " SINDA
line 1502: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda
line 1503: 
line 1504: " SiSU
line 1505: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu
line 1506: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu
line 1507: 
line 1508: " SKILL
line 1509: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill
line 1510: 
line 1511: " SLRN
line 1512: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc
line 1513: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc
line 1514: 
line 1515: " Smalltalk (and TeX)
line 1516: au BufNewFile,BufRead *.st^I^I^Isetf st
line 1524: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif
line 1525: 
line 1526: " Smarty templates
line 1527: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty
line 1528: 
line 1529: " SMIL or XML
line 1535: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif
line 1536: 
line 1537: " SMIL or SNMP MIB file
line 1543: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif
line 1544: 
line 1545: " SMITH
line 1546: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith
line 1547: 
line 1548: " Snobol4 and spitbol
line 1549: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4
line 1550: 
line 1551: " SNMP MIB files
line 1552: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib
line 1553: 
line 1554: " Snort Configuration
line 1555: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog
line 1556: au BufNewFile,BufRead *.rules^I^I^Icall dist#ft#FTRules()
line 1557: 
line 1558: " Spec (Linux RPM)
line 1559: au BufNewFile,BufRead *.spec^I^I^Isetf spec
line 1560: 
line 1561: " Speedup (AspenTech plant simulator)
line 1562: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup
line 1563: 
line 1564: " Slice
line 1565: au BufNewFile,BufRead *.ice^I^I^Isetf slice
line 1566: 
line 1567: " Spice
line 1568: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice
line 1569: 
line 1570: " Spyce
line 1571: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce
line 1572: 
line 1573: " Squid
line 1574: au BufNewFile,BufRead squid.conf^I^Isetf squid
line 1575: 
line 1576: " SQL for Oracle Designer
line 1577: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql
line 1578: 
line 1579: " SQL
line 1580: au BufNewFile,BufRead *.sql^I^I^Icall dist#ft#SQL()
line 1581: 
line 1582: " SQLJ
line 1583: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj
line 1584: 
line 1585: " SQR
line 1586: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr
line 1587: 
line 1588: " OpenSSH configuration
line 1589: au BufNewFile,BufRead ssh_config,*/.ssh/config^Isetf sshconfig
line 1590: 
line 1591: " OpenSSH server configuration
line 1592: au BufNewFile,BufRead sshd_config^I^Isetf sshdconfig
line 1593: 
line 1594: " Stata
line 1595: au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata^Isetf stata
line 1596: " Also *.class, but not when it's a Java bytecode file
line 1598: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif
line 1599: 
line 1600: " SMCL
line 1601: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl
line 1602: 
line 1603: " Stored Procedures
line 1604: au BufNewFile,BufRead *.stp^I^I^Isetf stp
line 1605: 
line 1606: " Standard ML
line 1607: au BufNewFile,BufRead *.sml^I^I^Isetf sml
line 1608: 
line 1609: " Sratus VOS command macro
line 1610: au BufNewFile,BufRead *.cm^I^I^Isetf voscm
line 1611: 
line 1612: " Sysctl
line 1613: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl
line 1614: 
line 1615: " Systemd unit files
line 1616: au BufNewFile,BufRead */systemd/*.{automount,mount,path,service,socket,swap,target,timer}^Isetf systemd
line 1617: 
line 1618: " Synopsys Design Constraints
line 1619: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc
line 1620: 
line 1621: " Sudoers
line 1622: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers
line 1623: 
line 1624: " SVG (Scalable Vector Graphics)
line 1625: au BufNewFile,BufRead *.svg^I^I^Isetf svg
line 1626: 
line 1627: " Tads (or Nroff or Perl test file)
line 1629: au BufNewFile,BufRead *.t if !dist#ft#FTnroff() && !dist#ft#FTperl() | setf tads | endif
line 1630: 
line 1631: " Tags
line 1632: au BufNewFile,BufRead tags^I^I^Isetf tags
line 1633: 
line 1634: " TAK
line 1635: au BufNewFile,BufRead *.tak^I^I^Isetf tak
line 1636: 
line 1637: " Task
line 1638: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata
line 1639: au BufRead,BufNewFile *.task^I^I^Isetf taskedit
line 1640: 
line 1641: " Tcl (JACL too)
line 1642: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl
line 1643: 
line 1644: " TealInfo
line 1645: au BufNewFile,BufRead *.tli^I^I^Isetf tli
line 1646: 
line 1647: " Telix Salt
line 1648: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt
line 1649: 
line 1650: " Tera Term Language
line 1651: au BufRead,BufNewFile *.ttl^I^I^Isetf teraterm
line 1652: 
line 1653: " Terminfo
line 1654: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo
line 1655: 
line 1656: " TeX
line 1657: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex
line 1658: au BufNewFile,BufRead *.tex^I^I^Icall dist#ft#FTtex()
line 1659: 
line 1660: " ConTeXt
line 1661: au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi   setf context
line 1662: 
line 1663: " Texinfo
line 1664: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo
line 1665: 
line 1666: " TeX configuration
line 1667: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf
line 1668: 
line 1669: " Tidy config
line 1670: au BufNewFile,BufRead .tidyrc,tidyrc^I^Isetf tidy
line 1671: 
line 1672: " TF mud client
line 1673: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf
line 1674: 
line 1675: " tmux configuration
line 1676: au BufNewFile,BufRead {.,}tmux*.conf^I^Isetf tmux
line 1677: 
line 1678: " TPP - Text Presentation Program
line 1679: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp
line 1680: 
line 1681: " Treetop
line 1682: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop
line 1683: 
line 1684: " Trustees
line 1685: au BufNewFile,BufRead trustees.conf^I^Isetf trustees
line 1686: 
line 1687: " TSS - Geometry
line 1688: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm
line 1689: 
line 1690: " TSS - Optics
line 1691: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop
line 1692: 
line 1693: " TSS - Command Line (temporary)
line 1694: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl
line 1695: 
line 1696: " TWIG files
line 1697: au BufNewFile,BufReadPost *.twig^I^Isetf twig
line 1698: 
line 1699: " Motif UIT/UIL files
line 1700: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil
line 1701: 
line 1702: " Udev conf
line 1703: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf
line 1704: 
line 1705: " Udev permissions
line 1706: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
line 1707: "
line 1708: " Udev symlinks config
line 1709: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh
line 1710: 
line 1711: " UnrealScript
line 1712: au BufNewFile,BufRead *.uc^I^I^Isetf uc
line 1713: 
line 1714: " Updatedb
line 1715: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb
line 1716: 
line 1717: " Upstart (init(8)) config files
line 1718: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart
line 1719: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart
line 1720: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart
line 1721: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override^I       setf upstart
line 1722: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart
line 1723: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart
line 1724: 
line 1725: " Vera
line 1726: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera
line 1727: 
line 1728: " Verilog HDL
line 1729: au BufNewFile,BufRead *.v^I^I^Isetf verilog
line 1730: 
line 1731: " Verilog-AMS HDL
line 1732: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams
line 1733: 
line 1734: " SystemVerilog
line 1735: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog
line 1736: 
line 1737: " VHDL
line 1738: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst  setf vhdl
line 1739: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')
line 1740: 
line 1741: " Vim script
line 1742: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim
line 1743: 
line 1744: " Viminfo file
line 1745: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo
line 1746: 
line 1747: " Virata Config Script File or Drupal module
line 1753: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif
line 1754: 
line 1755: " Visual Basic (also uses *.bas) or FORM
line 1756: au BufNewFile,BufRead *.frm^I^I^Icall dist#ft#FTVB("form")
line 1757: 
line 1758: " SaxBasic is close to Visual Basic
line 1759: au BufNewFile,BufRead *.sba^I^I^Isetf vb
line 1760: 
line 1761: " Vgrindefs file
line 1762: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs
line 1763: 
line 1764: " VRML V1.0c
line 1765: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml
line 1766: 
line 1767: " Vroom (vim testing and executable documentation)
line 1768: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom
line 1769: 
line 1770: " Webmacro
line 1771: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro
line 1772: 
line 1773: " WebAssembly
line 1774: au BufNewFile,BufRead *.wast,*.wat^I^Isetf wast
line 1775: 
line 1776: " Wget config
line 1777: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget
line 1778: 
line 1779: " Website MetaLanguage
line 1780: au BufNewFile,BufRead *.wml^I^I^Isetf wml
line 1781: 
line 1782: " Winbatch
line 1783: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch
line 1784: 
line 1785: " WSML
line 1786: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml
line 1787: 
line 1788: " WPL
line 1789: au BufNewFile,BufRead *.wpl^I^I^Isetf xml
line 1790: 
line 1791: " WvDial
line 1792: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial
line 1793: 
line 1794: " CVS RC file
line 1795: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc
line 1796: 
line 1797: " CVS commit file
line 1798: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs
line 1799: 
line 1800: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
line 1801: " lines in a WEB file).
line 1807: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif
line 1808: 
line 1809: " Windows Scripting Host and Windows Script Component
line 1810: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh
line 1811: 
line 1812: " XHTML
line 1813: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml
line 1814: 
line 1815: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)
line 1821: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif
line 1822: au BufEnter *.xpm2^I^I^I^Isetf xpm2
line 1823: 
line 1824: " XFree86 config
line 1829: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf
line 1832: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf
line 1833: 
line 1834: " Xorg config
line 1835: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf
line 1836: 
line 1837: " Xinetd conf
line 1838: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd
line 1839: 
line 1840: " XS Perl extension interface language
line 1841: au BufNewFile,BufRead *.xs^I^I^Isetf xs
line 1842: 
line 1843: " X resources file
line 1844: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
line 1845: 
line 1846: " Xmath
line 1847: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath
line 1849: au BufNewFile,BufRead *.ms if !dist#ft#FTnroff() | setf xmath | endif
line 1850: 
line 1851: " XML  specific variants: docbk and xbl
line 1852: au BufNewFile,BufRead *.xml^I^I^Icall dist#ft#FTxml()
line 1853: 
line 1854: " XMI (holding UML models) is also XML
line 1855: au BufNewFile,BufRead *.xmi^I^I^Isetf xml
line 1856: 
line 1857: " CSPROJ files are Visual Studio.NET's XML-based project config files
line 1858: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml
line 1859: 
line 1860: " Qt Linguist translation source and Qt User Interface Files are XML
line 1861: au BufNewFile,BufRead *.ts,*.ui^I^I^Isetf xml
line 1862: 
line 1863: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)
line 1864: au BufNewFile,BufRead *.tpm^I^I^Isetf xml
line 1865: 
line 1866: " Xdg menus
line 1867: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml
line 1868: 
line 1869: " ATI graphics driver configuration
line 1870: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml
line 1871: 
line 1872: " Web Services Description Language (WSDL)
line 1873: au BufNewFile,BufRead *.wsdl^I^I^Isetf xml
line 1874: 
line 1875: " XLIFF (XML Localisation Interchange File Format) is also XML
line 1876: au BufNewFile,BufRead *.xlf^I^I^Isetf xml
line 1877: au BufNewFile,BufRead *.xliff^I^I^Isetf xml
line 1878: 
line 1879: " XML User Interface Language
line 1880: au BufNewFile,BufRead *.xul^I^I^Isetf xml
line 1881: 
line 1882: " X11 xmodmap (also see below)
line 1883: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap
line 1884: 
line 1885: " Xquery
line 1886: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery
line 1887: 
line 1888: " XSD
line 1889: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd
line 1890: 
line 1891: " Xslt
line 1892: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt
line 1893: 
line 1894: " Yacc
line 1895: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc
line 1896: 
line 1897: " Yacc or racc
line 1898: au BufNewFile,BufRead *.y^I^I^Icall dist#ft#FTy()
line 1899: 
line 1900: " Yaml
line 1901: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml
line 1902: 
line 1903: " Raml
line 1904: au BufNewFile,BufRead *.raml^I^I^Isetf raml
line 1905: 
line 1906: " yum conf (close enough to dosini)
line 1907: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini
line 1908: 
line 1909: " Zimbu
line 1910: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu
line 1911: " Zimbu Templates
line 1912: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl
line 1913: 
line 1914: " Zope
line 1915: "   dtml (zope dynamic template markup language), pt (zope page template),
line 1916: "   cpt (zope form controller page template)
line 1917: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall dist#ft#FThtml()
line 1918: "   zsql (zope sql method)
line 1919: au BufNewFile,BufRead *.zsql^I^I^Icall dist#ft#SQL()
line 1920: 
line 1921: " Z80 assembler asz80
line 1922: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a
line 1923: 
line 1924: augroup END
line 1925: 
line 1926: 
line 1927: " Source the user-specified filetype file, for backwards compatibility with
line 1928: " Vim 5.x.
line 1929: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
line 1930:   execute "source " . myfiletypefile
line 1931: endif
line 1932: 
line 1933: 
line 1934: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
line 1935: " when there are no matching file name extensions.
line 1936: " Don't do this for compressed files.
line 1937: augroup filetypedetect
line 1940: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 1941: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
line 1942: 
line 1943: 
line 1944: " Extra checks for when no filetype has been detected now.  Mostly used for
line 1945: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
line 1946: " script file.
line 1947: " Most of these should call s:StarSetf() to avoid names ending in .gz and the
line 1948: " like are used.
line 1949: 
line 1950: " More Apache style config files
line 1951: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')
line 1952: 
line 1953: " More Apache config files
line 1954: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')
line 1955: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')
line 1956: 
line 1957: " Asterisk config file
line 1958: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')
line 1959: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 1960: 
line 1961: " Bazaar version control
line 1962: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr
line 1963: 
line 1964: " Bazel build file
line 1965: if !has("fname_case")
line 1966:   au BufNewFile,BufRead BUILD^I^I^Isetf bzl
line 1967: endif
line 1968: 
line 1969: " BIND zone
line 1970: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')
line 1971: 
line 1972: " Calendar
line 1975: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')
line 1976: 
line 1977: " Changelog
line 1983: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif
line 1984: 
line 1985: " Crontab
line 1986: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')
line 1987: 
line 1988: " dnsmasq(8) configuration
line 1989: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')
line 1990: 
line 1991: " Dracula
line 1992: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')
line 1993: 
line 1994: " Fvwm
line 1995: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')
line 1997: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')
line 2003: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif
line 2004: 
line 2005: " Gedcom
line 2006: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')
line 2007: 
line 2008: " GTK RC
line 2009: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')
line 2010: 
line 2011: " Jam
line 2012: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')
line 2013: 
line 2014: " Jargon
line 2018: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif
line 2019: 
line 2020: " Kconfig
line 2021: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')
line 2022: 
line 2023: " Lilo: Linux loader
line 2024: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')
line 2025: 
line 2026: " Logcheck
line 2027: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')
line 2028: 
line 2029: " Makefile
line 2030: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')
line 2031: 
line 2032: " Ruby Makefile
line 2033: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')
line 2034: 
line 2035: " Mail (also matches muttrc.vim, so this is below the other checks)
line 2036: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail
line 2037: 
line 2038: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')
line 2039: 
line 2040: " Modconf
line 2044: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif
line 2045: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')
line 2046: 
line 2047: " Mutt setup file
line 2048: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')
line 2049: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')
line 2050: 
line 2051: " Neomutt setup file
line 2052: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')
line 2053: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')
line 2054: 
line 2055: " Nroff macros
line 2056: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')
line 2057: 
line 2058: " OpenBSD hostname.if
line 2059: au BufNewFile,BufRead /etc/hostname.*^I^Icall s:StarSetf('config')
line 2060: 
line 2061: " Pam conf
line 2062: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')
line 2063: 
line 2064: " Printcap and Termcap
line 2068: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif
line 2072: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif
line 2073: 
line 2074: " ReDIF
line 2075: " Only used when the .rdf file was not detected to be XML.
line 2076: au BufRead,BufNewFile *.rdf^I^I^Icall dist#ft#Redif()
line 2077: 
line 2078: " Remind
line 2079: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')
line 2080: 
line 2081: " Shell scripts ending in a star
line 2082: au BufNewFile,BufRead .bashrc*,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,bash-fc[-.]*,,PKGBUILD* call dist#ft#SetFileTypeSH("bash")
line 2083: au BufNewFile,BufRead .kshrc* call dist#ft#SetFileTypeSH("ksh")
line 2084: au BufNewFile,BufRead .profile* call dist#ft#SetFileTypeSH(getline(1))
line 2085: 
line 2086: " tcsh scripts ending in a star
line 2087: au BufNewFile,BufRead .tcshrc*^Icall dist#ft#SetFileTypeShell("tcsh")
line 2088: 
line 2089: " csh scripts ending in a star
line 2090: au BufNewFile,BufRead .login*,.cshrc*  call dist#ft#CSH()
line 2091: 
line 2092: " Vim script
line 2093: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')
line 2094: 
line 2095: " Subversion commit file
line 2096: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn
line 2097: 
line 2098: " X resources file
line 2099: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
line 2100: 
line 2101: " XFree86 config
line 2103: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
line 2108: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')
line 2109: 
line 2110: " X11 xmodmap
line 2111: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')
line 2112: 
line 2113: " Xinetd conf
line 2114: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')
line 2115: 
line 2116: " yum conf (close enough to dosini)
line 2117: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')
line 2118: 
line 2119: " Z-Shell script ending in a star
line 2120: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
line 2121: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')
line 2122: 
line 2123: 
line 2124: " Plain text files, needs to be far down to not override others.  This avoids
line 2125: " the "conf" type being used if there is a line starting with '#'.
line 2126: au BufNewFile,BufRead *.text,README^I^Isetf text
line 2127: 
line 2128: " Help files match *.txt but should have a last line that is a modeline.
line 2132: au BufNewFile,BufRead *.txt  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif
line 2133: 
line 2134: 
line 2135: " Use the filetype detect plugins.  They may overrule any of the previously
line 2136: " detected filetypes.
line 2137: runtime! ftdetect/*.vim
Searching for "ftdetect/*.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/ftdetect/*.vim"
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/csv.vim"
line 1: " Install Filetype detection for CSV files
line 2: au BufRead,BufNewFile *.csv,*.dat,*.tsv,*.tab set filetype=csv
line 3: 
finished sourcing /home/you/.vim/ftdetect/csv.vim
continuing in /usr/share/vim/vim81/filetype.vim
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/mail.vim"
line 1: 
line 2: " #sdm# my custom email file definitions
line 3: 
line 4: au BufRead,BufNewFile *pentadactyl.txt ^I^I^I^I^Iset filetype=mail
line 5: au BufRead,BufNewFile *.email ^I^I^I^I^I^I^Iset filetype=mail
line 6: au BufRead,BufNewFile /tmp/mutt-golden/tmp/mutt-golden* set filetype=mail
finished sourcing /home/you/.vim/ftdetect/mail.vim
continuing in /usr/share/vim/vim81/filetype.vim
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/perl-sdm.vim"
line 1: autocmd BufRead,BufNewFile *.pll set filetype=perl
line 2: 
finished sourcing /home/you/.vim/ftdetect/perl-sdm.vim
continuing in /usr/share/vim/vim81/filetype.vim
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/processing.vim"
line 1: 
line 2: au BufRead,BufNewFile *.pde setf processing
finished sourcing /home/you/.vim/ftdetect/processing.vim
continuing in /usr/share/vim/vim81/filetype.vim
chdir(/home/you/.vim/ftdetect)
fchdir() to previous dir
line 2137: sourcing "/home/you/.vim/ftdetect/text-sdm.vim"
line 1: autocmd BufNewFile,BufRead *.ttt set filetype=text
line 2: autocmd BufNewFile,BufRead *.txt set filetype=text
line 3: "setfiletype only sets if the filetype is not already set
line 4: autocmd BufRead,BufNewFile /home/bench/notes/* ^Iset filetype=text
line 5: autocmd BufRead,BufNewFile *.notes ^I^I^I^Iset filetype=text
line 6: 
line 7: 
finished sourcing /home/you/.vim/ftdetect/text-sdm.vim
continuing in /usr/share/vim/vim81/filetype.vim
Searching for "/var/lib/vim/addons/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/ftdetect/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/ftdetect/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/ftdetect/*.vim"
Searching for "/usr/share/vim/vim81/ftdetect/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/ftdetect/*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftdetect/*.vim"
Searching for "/var/lib/vim/addons/after/ftdetect/*.vim"
Searching for "/home/you/.vim/after/ftdetect/*.vim"
Searching for "/usr/share/vim-scripts/ftdetect/*.vim"
line 2138: 
line 2139: " NOTE: The above command could have ended the filetypedetect autocmd group
line 2140: " and started another one. Let's make sure it has ended to get to a consistent
line 2141: " state.
line 2142: augroup END
line 2143: 
line 2144: " Generic configuration file. Use FALLBACK, it's just guessing!
line 2150: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
line 2151: 
line 2152: 
line 2153: " If the GUI is already running, may still need to install the Syntax menu.
line 2154: " Don't do it when the 'M' flag is included in 'guioptions'.
line 2156: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"
line 2157:   source <sfile>:p:h/menu.vim
line 2158: endif
line 2159: 
line 2160: " Function called for testing all functions defined here.  These are
line 2161: " script-local, thus need to be executed here.
line 2162: " Returns a string with error messages (hopefully empty).
line 2163: func! TestFiletypeFuncs(testlist)
line 2174: 
line 2175: " Restore 'cpoptions'
line 2176: let &cpo = s:cpo_save
line 2177: unlet s:cpo_save
finished sourcing /usr/share/vim/vim81/filetype.vim
continuing in /home/you/.vim/vimrc
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/filetype.vim"
Searching for "/usr/share/vim/vimfiles/after/filetype.vim"
Searching for "/var/lib/vim/addons/after/filetype.vim"
Searching for "/home/you/.vim/after/filetype.vim"
Searching for "/usr/share/vim-scripts/filetype.vim"
Searching for "ftplugin.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/ftplugin.vim"
Searching for "/var/lib/vim/addons/ftplugin.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/ftplugin.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/ftplugin.vim"
chdir(/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein)
fchdir() to previous dir
line 122: sourcing "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/ftplugin.vim"
line 1: if exists("g:did_load_ftplugin")
line 2:   finish
line 3: endif
line 4: let g:did_load_ftplugin = 1
line 5: 
line 6: augroup filetypeplugin
line 7:   autocmd FileType * call s:ftplugin()
line 8: augroup END
line 9: 
line 10: function! s:ftplugin()
line 29: 
line 30: function! s:after_ftplugin()
finished sourcing /home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/ftplugin.vim
continuing in /home/you/.vim/vimrc
Searching for "/usr/share/vim/vim81/ftplugin.vim"
chdir(/usr/share/vim/vim81)
fchdir() to previous dir
line 122: sourcing "/usr/share/vim/vim81/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2006 Apr 30
line 5: 
line 6: if exists("did_load_ftplugin")
line 7:   finish
finished sourcing /usr/share/vim/vim81/ftplugin.vim
continuing in /home/you/.vim/vimrc
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/ftplugin.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin.vim"
Searching for "/var/lib/vim/addons/after/ftplugin.vim"
Searching for "/home/you/.vim/after/ftplugin.vim"
Searching for "/usr/share/vim-scripts/ftplugin.vim"
Searching for "indent.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/indent.vim"
Searching for "/var/lib/vim/addons/indent.vim"
Searching for "/usr/share/vim/vimfiles/indent.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/indent.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/indent.vim"
Searching for "/usr/share/vim/vim81/indent.vim"
chdir(/usr/share/vim/vim81)
fchdir() to previous dir
line 122: sourcing "/usr/share/vim/vim81/indent.vim"
line 1: " Vim support file to switch on loading indent files for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2008 Feb 22
line 5: 
line 6: if exists("did_indent_on")
line 7:   finish
line 8: endif
line 9: let did_indent_on = 1
line 10: 
line 11: augroup filetypeindent
line 12:   au FileType * call s:LoadIndent()
line 13:   func! s:LoadIndent()
line 31: augroup END
finished sourcing /usr/share/vim/vim81/indent.vim
continuing in /home/you/.vim/vimrc
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/indent.vim"
Searching for "/usr/share/vim/vimfiles/after/indent.vim"
Searching for "/var/lib/vim/addons/after/indent.vim"
Searching for "/home/you/.vim/after/indent.vim"
Searching for "/usr/share/vim-scripts/indent.vim"
line 123: syntax enable
line 123: so $VIMRUNTIME/syntax/syntax.vim
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 123: sourcing "/usr/share/vim/vim81/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 15: sourcing "/usr/share/vim/vim81/syntax/nosyntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2006 Apr 16
line 4: 
line 5: " This file is used for ":syntax off".
line 6: " It removes the autocommands and stops highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " Remove all autocommands for the Syntax event.  This also avoids that
line 13: " "syntax=foo" in a modeline triggers the SynSet() function of synload.vim.
line 14: au! Syntax
line 15: 
line 16: " remove all syntax autocommands and remove the syntax for each buffer
line 17: augroup syntaxset
line 18:   au!
line 19:   au BufEnter * syn clear
line 20:   au BufEnter * if exists("b:current_syntax") | unlet b:current_syntax | endif
line 21:   doautoall syntaxset BufEnter *
line 22:   au!
line 23: augroup END
line 24: 
line 25: if exists("syntax_on")
line 26:   unlet syntax_on
line 27: endif
line 28: if exists("syntax_manual")
line 29:   unlet syntax_manual
line 30: endif
finished sourcing /usr/share/vim/vim81/syntax/nosyntax.vim
continuing in /usr/share/vim/vim81/syntax/syntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/synload.vim"
Searching for "/var/lib/vim/addons/syntax/synload.vim"
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/synload.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/synload.vim"
Searching for "/usr/share/vim/vim81/syntax/synload.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 19: sourcing "/usr/share/vim/vim81/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2016 Nov 04
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Set the default highlighting colors.  Use a color scheme if specified.
line 18: if exists("colors_name")
line 19:   exe "colors " . colors_name
line 20: else
line 21:   runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim81/syntax/syncolor.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 21: sourcing "/usr/share/vim/vim81/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi def Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi def Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi def Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi def Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi def Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi def PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi def Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi def Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi def Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi def Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi def Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi def link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi def link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi def link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi def link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi def link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi def link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi def link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi def link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi def link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi def link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi def link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi def link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi def link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi def link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi def link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi def link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi def link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi def link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi def link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi def link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi def link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi def link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi def link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi def link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim81/syntax/syncolor.vim
continuing in /usr/share/vim/vim81/syntax/synload.vim
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/you/.vim/after/syntax/syncolor.vim"
Searching for "/usr/share/vim-scripts/syntax/syncolor.vim"
line 22: endif
line 23: 
line 24: " Line continuation is used here, remove 'C' from 'cpoptions'
line 25: let s:cpo_save = &cpo
line 26: set cpo&vim
line 27: 
line 28: " First remove all old syntax autocommands.
line 29: au! Syntax
line 30: 
line 31: au Syntax *^I^Icall s:SynSet()
line 32: 
line 33: fun! s:SynSet()
line 61: 
line 62: 
line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 68: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 69: 
line 70: 
line 71: " Source the user-specified syntax highlighting file
line 72: if exists("mysyntaxfile")
line 73:   let s:fname = expand(mysyntaxfile)
line 74:   if filereadable(s:fname)
line 75:     execute "source " . fnameescape(s:fname)
line 76:   endif
line 77: endif
line 78: 
line 79: " Restore 'cpoptions'
line 80: let &cpo = s:cpo_save
line 81: unlet s:cpo_save
finished sourcing /usr/share/vim/vim81/syntax/synload.vim
continuing in /usr/share/vim/vim81/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /usr/share/vim/vim81/syntax/syntax.vim
continuing in /home/you/.vim/vimrc
line 124: 
line 125: if dein#check_install()
calling function dein#check_install()

line 1:   return dein#util#_check_install(get(a:000, 0, []))
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

line 0: call dein#autoload#_on_func(expand('<afile>'))
Searching for "autoload/dein/autoload.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/autoload/dein/autoload.vim"
Searching for "/var/lib/vim/addons/autoload/dein/autoload.vim"
Searching for "/usr/share/vim/vimfiles/autoload/dein/autoload.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein/autoload.vim"
chdir(/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein)
fchdir() to previous dir
line 0: sourcing "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein/autoload.vim"
line 1: "=============================================================================
line 2: " FILE: autoload.vim
line 3: " AUTHOR:  Shougo Matsushita <Shougo.Matsu at gmail.com>
line 4: " License: MIT license
line 5: "=============================================================================
line 6: 
line 7: function! dein#autoload#_source(...) abort
line 76: 
line 77: function! dein#autoload#_on_default_event(event) abort
line 102: function! dein#autoload#_on_event(event, plugins) abort
line 114: function! s:source_events(event, plugins) abort
line 141: 
line 142: function! dein#autoload#_on_func(name) abort
line 154: 
line 155: function! dein#autoload#_on_pre_cmd(name) abort
line 164: 
line 165: function! dein#autoload#_on_cmd(command, name, args, bang, line1, line2) abort
line 184: 
line 185: function! dein#autoload#_on_map(mapping, name, mode) abort
line 223: 
line 224: function! dein#autoload#_dummy_complete(arglead, cmdline, cursorpos) abort
line 241: 
line 242: function! s:source_plugin(rtps, index, plugin, sourced) abort
line 301: function! s:reset_ftplugin() abort
line 316: function! s:get_input() abort
line 338: 
line 339: function! s:is_reset_ftplugin(plugins) abort
line 358: function! s:mapargrec(map, mode) abort
finished sourcing /home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein/autoload.vim
continuing in FuncUndefined Autocommands for "*"
calling function dein#autoload#_on_func('dein#util#_check_install')

line 1:   let function_prefix = substitute(a:name, '[^#]*$', '', '')
line 2:   if function_prefix =~# '^dein#' || function_prefix =~# '^vital#' || has('vim_starting')
line 5:     return
function dein#autoload#_on_func returning #0

continuing in FuncUndefined Autocommands for "*"

Searching for "autoload/dein/util.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/autoload/dein/util.vim"
Searching for "/var/lib/vim/addons/autoload/dein/util.vim"
Searching for "/usr/share/vim/vimfiles/autoload/dein/util.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein/util.vim"
chdir(/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein)
fchdir() to previous dir
line 1: sourcing "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein/util.vim"
line 1: "=============================================================================
line 2: " FILE: util.vim
line 3: " AUTHOR:  Shougo Matsushita <Shougo.Matsu at gmail.com>
line 4: " License: MIT license
line 5: "=============================================================================
line 6: 
line 7: let s:is_windows = has('win32') || has('win64')
line 8: 
line 9: function! dein#util#_init() abort
line 11: 
line 12: function! dein#util#_set_default(var, val, ...) abort
line 20: 
line 21: function! dein#util#_is_windows() abort
line 24: function! dein#util#_is_mac() abort
line 29: 
line 30: function! dein#util#_get_base_path() abort
line 33: function! dein#util#_get_runtime_path() abort
line 44: function! dein#util#_get_cache_path() abort
line 57: function! dein#util#_get_vimrcs(vimrcs) abort
line 62: function! dein#util#_get_myvimrc() abort
line 68: 
line 69: function! dein#util#_error(msg) abort
line 74: function! dein#util#_notify(msg) abort
line 122: 
line 123: function! dein#util#_chomp(str) abort
line 126: 
line 127: function! dein#util#_uniq(list) abort
line 144: 
line 145: function! dein#util#_is_fish() abort
line 148: function! dein#util#_has_job() abort
line 152: 
line 153: function! dein#util#_check_lazy_plugins() abort
line 163: function! dein#util#_check_clean() abort
line 171: 
line 172: function! dein#util#_writefile(path, list) abort
line 185: 
line 186: function! dein#util#_get_type(name) abort
line 189: 
line 190: function! dein#util#_save_cache(vimrcs, is_state, is_starting) abort
line 225: function! dein#util#_check_vimrcs() abort
line 246: function! dein#util#_load_merged_plugins() abort
line 257: function! dein#util#_save_merged_plugins() abort
line 263: function! dein#util#_get_merged_plugins() abort
line 271: 
line 272: function! dein#util#_save_state(is_starting) abort
line 345: function! dein#util#_clear_state() abort
line 352: 
line 353: function! dein#util#_begin(path, vimrcs) abort
line 417: function! dein#util#_end() abort
line 481: function! dein#util#_config(arg, dict) abort
line 498: 
line 499: function! dein#util#_call_hook(hook_name, ...) abort
line 511: function! dein#util#_execute_hook(plugin, hook) abort
line 527: function! dein#util#_set_hook(plugins, hook_name, hook) abort
line 544: 
line 545: function! dein#util#_sort_by(list, expr) abort
line 550: function! dein#util#_tsort(plugins) abort
line 559: 
line 560: function! dein#util#_split_rtp(runtimepath) abort
line 568: function! dein#util#_join_rtp(list, runtimepath, rtp) abort
line 572: 
line 573: function! dein#util#_add_after(rtps, path) abort
line 577: 
line 578: function! dein#util#_expand(path) abort
line 586: function! dein#util#_substitute_path(path) abort
line 590: function! dein#util#_globlist(path) abort
line 593: 
line 594: function! dein#util#_convert2list(expr) abort
line 600: function! dein#util#_split(expr) abort
line 604: 
line 605: function! dein#util#_redir(cmd) abort
line 618: 
line 619: function! dein#util#_get_lazy_plugins() abort
line 623: 
line 624: function! dein#util#_get_plugins(plugins) abort
line 631: 
line 632: function! dein#util#_disable(names) abort
line 653: 
line 654: function! dein#util#_download(uri, outpath) abort
line 675: 
line 676: function! s:tsort_impl(target, mark, sorted) abort
line 690: 
line 691: function! dein#util#_check_install(plugins) abort
line 709: 
line 710: function! s:msg2list(expr) abort
line 713: function! s:skipempty(string) abort
line 716: 
line 717: function! s:escape(path) abort
line 721: 
line 722: function! s:sort(list, expr) abort
line 729: function! s:_compare(a, b) abort
line 732: 
line 733: function! s:execute(expr) abort
line 745: 
line 746: function! s:neovim_version() abort
finished sourcing /home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/autoload/dein/util.vim
continuing in function dein#check_install
calling function dein#check_install[1]..dein#util#_check_install([])

line 1:   if !empty(a:plugins)
line 2:     let invalids = filter(dein#util#_convert2list(a:plugins), 'empty(dein#get(v:val))')
line 4:     if !empty(invalids)
line 5:       call dein#util#_error('Invalid plugins: ' . string(map(invalids, 'v:val')))
line 7:       return -1
line 8:     endif
line 9:   endif
line 10:   let plugins = empty(a:plugins) ? values(dein#get()) : map(dein#util#_convert2list(a:plugins), 'dein#get(v:val)')
calling function dein#check_install[1]..dein#util#_check_install[10]..dein#get()

line 1:   return empty(a:000) ? copy(g:dein#_plugins) : get(g:dein#_plugins, a:1, {})
function dein#check_install[1]..dein#util#_check_install[10]..dein#get returning {'vim-easytags': {'lazy': 0, 'rtp': '/...1, 'sourced': 1, 'name': 'SimpylFold'}}

continuing in function dein#check_install[1]..dein#util#_check_install

line 12:   let plugins = filter(plugins, '!isdirectory(v:val.path)')
line 13:   if empty(plugins) | return 0 | endif
line 13:  return 0 | endif
function dein#check_install[1]..dein#util#_check_install returning #0

continuing in function dein#check_install

function dein#check_install returning #0

continuing in /home/you/.vim/vimrc

line 126: call dein#install()
line 127: endif
line 128: 
line 129: " --- plugin configurations
line 130: 
line 131: " .source ale.vimrc
line 132: source /etc/vim/pymode_vimrc^I
chdir(/etc/vim)
fchdir() to previous dir
line 132: sourcing "/etc/vim/pymode_vimrc"
line 1: 
line 2: 
line 3: " disable syntastic on vim, let pymode do it
line 4: autocmd FileType python let g:syntastic_check_on_wq = 0 
line 5: nnoremap ;l^I:PymodeLintToggle<CR>
line 6: inoremap ;l^I<c-o>:PymodeLintToggle<CR>
line 7: 
line 8: " - pymode
line 9: let g:pymode = 1
line 10: let g:pymode_python = 'python3' 
line 11: let g:pymode_warnings = 1
line 12: let g:pymode_options = 1
line 13: let g:pymode_doc = 1
line 14: let g:pymode_doc_bind = 'K' 
line 15: " debugging
line 16: let g:pymode_run = 1
line 17: let g:pymode_run_bind = '<F5>'
line 18: let g:pymode_breakpoint = 1
line 19: let g:pymode_breakpoint_bind = '<F10>'
line 20: " linting 
line 21: let g:pymode_lint = 1
line 22: let g:pymode_lint_on_write = 1
line 23: let g:pymode_lint_message = 1
line 24: let g:pymode_lint_checkers = ['pylint', 'mccabe']
line 25: let g:pymode_lint_cwindow = 1
line 26: let g:pymode_lint_signs = 1
line 27: let g:pymode_lint_todo_symbol = 'WW'
line 28: let g:pymode_lint_comment_symbol = 'CC'
line 29: let g:pymode_lint_visual_symbol = 'RR'
line 30: let g:pymode_lint_error_symbol = 'EE'
line 31: let g:pymode_lint_info_symbol = 'II'
line 32: let g:pymode_lint_pyflakes_symbol = 'FF'
line 33: let g:pymode_syntax_indent_errors = 1
line 34: " Word, function completion
line 35: let g:pymode_rope_completion = 1
line 36: let g:pymode_rope_complete_on_dot = 1
line 37: let g:pymode_rope_completion_bind = '<C-Space>'
line 38: " movements, jumps
line 39: let g:pymode_rope_goto_definition_bind = '<leader>j'
line 40: let g:pymode_rope_goto_definition_cmd = 'new'
line 41: " highlighting
line 42: let g:pymode_syntax = 1
line 43: let g:pymode_syntax_all = 1
line 44: let g:pymode_syntax_string_formatting = g:pymode_syntax_all
line 45: let g:pymode_syntax_string_format = g:pymode_syntax_all
line 46: let g:pymode_syntax_string_templates = g:pymode_syntax_all
line 47: let g:pymode_syntax_doctests = g:pymode_syntax_all
line 48: let g:pymode_syntax_builtin_objs = g:pymode_syntax_all
line 49: let g:pymode_syntax_builtin_types = g:pymode_syntax_all
line 50: let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all
line 51: let g:pymode_syntax_docstrings = g:pymode_syntax_all
line 52: 
line 53: let g:pymode_motion = 1 
line 54: " [[    Jump to previous class or function (normal, visual, operator modes)
line 55: " ]]    Jump to next class or function  (normal, visual, operator modes)
line 56: " [M    Jump to previous class or method (normal, visual, operator modes)
line 57: " ]M    Jump to next class or method (normal, visual, operator modes)
line 58: " aC    Select a class. Ex: vaC, daC, yaC, caC (normal, operator modes)
line 59: " iC    Select inner class. Ex: viC, diC, yiC, ciC (normal, operator modes)
line 60: " aM    Select a function or method. Ex: vaM, daM, yaM, caM (normal, operator modes)
line 61: " iM    Select inner function or method. Ex: viM, diM, yiM, ciM (normal, operator modes)
line 62: 
finished sourcing /etc/vim/pymode_vimrc
continuing in /home/you/.vim/vimrc
line 133: 
line 134: " - lion (align text blocks)
line 135: let g:lion_squeeze_spaces = 0^I^I" eol comments can be algned
line 136: " choose another key: ;l and ;L are to toggle highlighting
line 137: let g:lion_map_right      = "<leader>a"
line 138: let g:lion_map_left       = "<leader>A"
line 139: 
line 140: " - vim_vordMotions
line 141: " else 'w' 'b' 'e' get overridden, and caw doesn't work
line 142: let g:wordmotion_prefix = '<space>'
line 143:  
line 144: " vim-easytags  ctags-universal & codequery
line 145: set updatetime=30000^I"trigger autocmds after half a minute of user inactivity instead of after 4 seconds 
line 146: set swapsync=""^I^I^I"disable swap file sync on user inactivity trigger
line 147: let g:easytag_async=1 
line 148: let g:easytags_cmd = '/usr/bin/ctags-universal'
line 149: set autochdir 
line 150: set tags+=./tags;^I^I^I" the ; is correct, see notes
line 151: let g:easytags_dynamic_files = 1^I^I" for local, per directory, tags files (else all combined)
line 152: let g:easytags_events = ['BufWritePost']
line 153: let g:easytags_autorecurse = 1
line 154: 
line 155: " --- plugin-like functions
line 156: 
line 157: " - F3 shows the syntax highlightintg of an element
line 158: nnoremap <F3> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" . " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>
line 159: "
line 160: " give match-parent (EVERY CURSOR MOVEMENT) only *10* milliseconds
line 161: let g:matchparen_timeout = 10
line 162: let g:matchparen_insert_timeout = 10
line 163: 
line 164: 
line 165: 
line 166:  
line 167: " --- nvim --------
line 168: 
line 169: if has('nvim')
line 170: ^Isource /usr/share/nvim/runtime/autoload/provider/python3.vim
line 171: ^Ilet g:python_host_prog = '/usr/bin/python'
line 172: ^Ilet g:python3_host_prog = '/usr/bin/python3'
line 173: ^I"
line 174: ^I" the first of these is deprecated
line 175: ^Ilet $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
line 176: ^Iset guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
line 177: ^I" true color in terminals
line 178: ^I" set termguicolors
line 179: endif
line 180: 
line 181: 
line 182: " ------- file types
line 183: 
line 184: autocmd BufNewFile,BufRead *.notes,*/bench/notes/* ^Isetlocal filetype=text
line 185: 
line 186: " --- latex
line 187: set grepprg=grep\ -nH\ $*
line 188: let g:tex_flavor='latex'
line 189: " see: /usr/share/doc/vim-latexsuite/README.Debian
line 190: "source /usr/local/share/nvim/runtime/autoload/gzip.vim
line 191: 
line 192: augroup gzip
line 193:   autocmd!
line 194:   autocmd BufReadPre,FileReadPre^I    *.gz set bin
line 195:   autocmd BufReadPost,FileReadPost^I    *.gz '[,']!gunzip
line 196:   autocmd BufReadPost,FileReadPost^I    *.gz set nobin
line 197:   autocmd BufReadPost,FileReadPost^I    *.gz execute ":doautocmd BufReadPost " . expand("%:r")
line 198:   autocmd BufWritePost,FileWritePost^I*.gz !mv  :r
line 199:   autocmd BufWritePost,FileWritePost^I*.gz !gzip :r
line 200:   autocmd FileAppendPre^I^I            *.gz !gunzip 
line 201:   autocmd FileAppendPre^I^I            *.gz !mv :r 
line 202:   autocmd FileAppendPost^I^I        *.gz !mv  :r
line 203:   autocmd FileAppendPost^I^I        *.gz !gzip :r
line 204: augroup END
line 205: 
line 206: 
line 207: 
line 208: 
line 209: 
line 210: 
line 211: 
line 212: " ---- window layouts -------------------
line 213: "
line 214: " open splits to the right, or below, by default
line 215: set splitbelow
line 216: set splitright
line 217: if has("win64")
line 218: ^Iset lines=70
line 219: ^Iset columns=100
line 220: endif
line 221: 
line 222: 
line 223: 
line 224: " ----- page appearances -------------------
line 225: 
line 226: 
line 227: " - status line
line 228: set laststatus=2^I^I" show the status line (rather than only w/ split windows)
line 229: "
line 230: set statusline=   " clear the statusline for when vimrc is reloaded
line 231: set statusline+=%-3.3n\                      " buffer number
line 232: set statusline+=%f\                          " file name
line 233: set statusline+=%h%m%r%w                     " flags
line 234: set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
line 235: set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
line 236: set statusline+=%{&fileformat}]              " file format
line 237: set statusline+=%=                           " right align
line 238: set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " highlight
line 239: set statusline+=%b,0x%-8B\                   " current char
line 240: set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset
line 241: " from http://got-ravings.blogspot.com/2008/08/vim-pr0n-making-statuslines-that-own.html
line 242: 
line 243: 
line 244: 
line 245: " ----- text layout & appearance -----
line 246: 
line 247: set scrolloff=5
line 248: set tabstop=4
line 249: set shiftwidth=0   " Make 'shiftwidth' follow 'tabstop'
line 250: set softtabstop=-1 " Make 'softtabstop' follow 'shiftwidth'
line 251: 
line 252: " - soft line breaks
line 253: set cpo+=n
line 254: set linebreak^I^I^I^I^I^I" else breakat won't work
line 255: set noexpandtab
line 256: let &breakat = " \t;:,])}-"
line 257: set breakindent^I^I^I^I^I^I" wraps successive lines to the same indent
line 258: set autoindent^I^I^I^I^I" indent following lines to same indent
line 259: set noexpandtab
line 260: " let &showbreak = '↳ '
line 261: " set breakindentopt   <-- see this for even more control
line 262: 
line 263: " - hard line breaks (\n added)
line 264: " set textwidth=100  ^I^I^I^I" instert hard breaks
line 265: " set formatoptions+=t^I^I^I^I" forces textwidth, so inserts hard breaks
line 266: " set wrapmargin^I^I^I^I^I" text width but spaces from right window border
line 267: 
line 268: " - shown hidden chars
line 269: set listchars=tab:→\ ,space:·,trail:•,eol:¶,precedes:«,extends:»,nbsp:☠
line 270: 
line 271: " - line numbers
line 272: " startup : no line numbers
line 273: set nonumber
line 274: set norelativenumber
line 275: " min width of the column of line numbers 
line 276: set numberwidth=3
line 277: 
line 278: 
line 279: " - cursor line
line 280: set nocursorline
line 281: au InsertEnter * set cursorline
line 282: au InsertLeave * set nocursorline
line 283: let &t_SI = "\e[6 q"
line 284: let &t_EI = "\e[2 q"
line 285: 
line 286: " --- colours and fonts
line 287: 
line 288: set background=dark^I" calls syntax/syncolors which calls heaps
Searching for "syntax/syncolor.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim81/syntax/syncolor.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 288: sourcing "/usr/share/vim/vim81/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim81/syntax/syncolor.vim
continuing in /home/you/.vim/vimrc
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/you/.vim/after/syntax/syncolor.vim"
Searching for "/usr/share/vim-scripts/syntax/syncolor.vim"
line 289: " Disable Background Color Erase (BCE) so that color schemes work
line 290: " properly within 256-color terminals
line 291: if &term =~ '256color'
line 292:   set t_ut=
line 293: endif
line 294: 
line 295: colorscheme xoria256^I" better, comments not blue
Searching for "colors/xoria256.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/colors/xoria256.vim"
Searching for "/var/lib/vim/addons/colors/xoria256.vim"
Searching for "/usr/share/vim/vimfiles/colors/xoria256.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/colors/xoria256.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/colors/xoria256.vim"
Searching for "/usr/share/vim/vim81/colors/xoria256.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/colors/xoria256.vim"
Searching for "/usr/share/vim/vimfiles/after/colors/xoria256.vim"
Searching for "/var/lib/vim/addons/after/colors/xoria256.vim"
Searching for "/home/you/.vim/after/colors/xoria256.vim"
Searching for "/usr/share/vim-scripts/colors/xoria256.vim"
chdir(/usr/share/vim-scripts/colors)
fchdir() to previous dir
line 295: sourcing "/usr/share/vim-scripts/colors/xoria256.vim"
line 1: " Vim color file
line 2: "
line 3: " Name:       xoria256.vim
line 4: " Version:    1.1
line 5: " Maintainer: Dmitriy Y. Zotikov (xio) <xio@ungrund.org>
line 6: "
line 7: " Should work in recent 256 color terminals.  88-color terms like urxvt are
line 8: " unsupported.
line 9: "
line 10: " Don't forget to install 'ncurses-term' and set TERM to xterm-256color or
line 11: " similar value.
line 12: "
line 13: " Color numbers (0-255) see:
line 14: " http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html
line 15: 
line 16: 
line 17: 
line 18: " Bla-bla ----------------------------------------------------------------------
line 19: 
line 20: if &t_Co != 256 && ! has("gui_running")
line 21:   echomsg ""
line 22:   echomsg "err: please use GUI or a 256-color terminal (so that t_Co=256 could be set)"
line 23:   echomsg ""
line 24:   finish
line 25: endif
line 26: 
line 27: set background=dark
Searching for "syntax/syncolor.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim81/syntax/syncolor.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 27: sourcing "/usr/share/vim/vim81/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim81/syntax/syncolor.vim
continuing in /usr/share/vim-scripts/colors/xoria256.vim
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/you/.vim/after/syntax/syncolor.vim"
Searching for "/usr/share/vim-scripts/syntax/syncolor.vim"
line 28: 
line 29: hi clear
Searching for "syntax/syncolor.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim81/syntax/syncolor.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 29: sourcing "/usr/share/vim/vim81/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim81/syntax/syncolor.vim
continuing in /usr/share/vim-scripts/colors/xoria256.vim
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/you/.vim/after/syntax/syncolor.vim"
Searching for "/usr/share/vim-scripts/syntax/syncolor.vim"
line 30: 
line 31: if exists("syntax_on")
line 32:   syntax reset
line 32: runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim81/syntax/syncolor.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 32: sourcing "/usr/share/vim/vim81/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi! link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi! link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi! link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi! link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi! link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi! link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi! link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi! link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi! link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi! link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi! link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi! link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi! link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi! link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi! link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi! link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi! link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi! link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi! link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi! link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi! link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi! link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi! link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi! link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim81/syntax/syncolor.vim
continuing in /usr/share/vim-scripts/colors/xoria256.vim
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/you/.vim/after/syntax/syncolor.vim"
Searching for "/usr/share/vim-scripts/syntax/syncolor.vim"
line 33: endif
line 34: 
line 35: let colors_name = "xoria256"
line 36: 
line 37: 
line 38: 
line 39: " The real part ----------------------------------------------------------------
line 40: 
line 41: "" General colors
line 42: hi Normal       ctermfg=252 guifg=#d0d0d0 ctermbg=234 guibg=#1c1c1c cterm=none gui=none
line 43: hi CursorColumn                           ctermbg=238 guibg=#444444
line 44: hi Cursor                                 ctermbg=214 guibg=#ffaf00
line 45: hi CursorLine                             ctermbg=238 guibg=#444444
line 46: hi FoldColumn   ctermfg=248 guifg=#a8a8a8 ctermbg=bg  guibg=bg
line 47: hi Folded       ctermfg=255 guifg=#eeeeee ctermbg=60  guibg=#5f5f87
line 48: hi IncSearch    ctermfg=0   guifg=#000000 ctermbg=223 guibg=#ffdfaf cterm=none gui=none
line 49: hi NonText      ctermfg=248 guifg=#a8a8a8                           cterm=bold gui=bold
line 50: hi Pmenu        ctermfg=0   guifg=#000000 ctermbg=246 guibg=#949494
line 51: hi PmenuSbar                              ctermbg=243 guibg=#767676
line 52: hi PmenuSel     ctermfg=0   guifg=#000000 ctermbg=243 guibg=#767676
line 53: hi PmenuThumb                             ctermbg=252 guibg=#d0d0d0
line 54: hi Search       ctermfg=0   guifg=#000000 ctermbg=149 guibg=#afdf5f
line 55: hi SignColumn   ctermfg=248 guifg=#a8a8a8
line 56: hi SpecialKey   ctermfg=77  guifg=#5fdf5f
line 57: hi StatusLine                             ctermbg=239 guibg=#4e4e4e cterm=bold gui=bold
line 58: hi StatusLineNC                           ctermbg=237 guibg=#3a3a3a cterm=none gui=none
line 59: hi TabLine      ctermfg=fg  guifg=fg      ctermbg=242 guibg=#666666 cterm=underline gui=underline
line 60: hi TabLineFill  ctermfg=fg  guifg=fg      ctermbg=242 guibg=#666666 cterm=underline gui=underline
line 61: hi VertSplit    ctermfg=237 guifg=#3a3a3a ctermbg=237 guibg=#3a3a3a cterm=none gui=none
line 62: hi Visual       ctermfg=24  guifg=#005f87 ctermbg=153 guibg=#afdfff
line 63: hi VIsualNOS    ctermfg=24  guifg=#005f87 ctermbg=153 guibg=#afdfff cterm=none gui=none
line 64: hi WildMenu     ctermfg=0   guifg=#000000 ctermbg=184 guibg=#dfdf00 cterm=bold gui=bold
line 65: 
line 66: "" Syntax highlighting
line 67: hi Comment      ctermfg=244 guifg=#808080
line 68: hi Constant     ctermfg=229 guifg=#ffffaf
line 69: hi Error        ctermfg=15  guifg=#ffffff ctermbg=1   guibg=#800000
line 70: hi ErrorMsg     ctermfg=15  guifg=#ffffff ctermbg=1   guibg=#800000
line 71: hi Identifier   ctermfg=182 guifg=#dfafdf                           cterm=none
line 72: hi Ignore       ctermfg=238 guifg=#444444
line 73: hi LineNr       ctermfg=248 guifg=#a8a8a8
line 74: hi MatchParen   ctermfg=188 guifg=#dfdfdf ctermbg=68  guibg=#5f87df cterm=bold gui=bold
line 75: hi Number       ctermfg=180 guifg=#dfaf87
line 76: hi PreProc      ctermfg=150 guifg=#afdf87
line 77: hi Special      ctermfg=174 guifg=#df8787
line 78: hi Statement    ctermfg=110 guifg=#87afdf                           cterm=none gui=none
line 79: hi Todo         ctermfg=0   guifg=#000000 ctermbg=184 guibg=#dfdf00
line 80: hi Type         ctermfg=146 guifg=#afafdf                           cterm=none gui=none
line 81: hi Underlined   ctermfg=39  guifg=#00afff                           cterm=underline gui=underline
line 82: 
line 83: "" Special
line 84: """ .diff
line 85: hi diffAdded    ctermfg=150 guifg=#afdf87
line 86: hi diffRemoved  ctermfg=174 guifg=#df8787
line 87: """ vimdiff
line 88: hi diffAdd      ctermfg=bg  guifg=bg      ctermbg=151 guibg=#afdfaf
line 89: "hi diffDelete   ctermfg=bg  guifg=bg      ctermbg=186 guibg=#dfdf87 cterm=none gui=none
line 90: hi diffDelete   ctermfg=bg  guifg=bg      ctermbg=246 guibg=#949494 cterm=none gui=none
line 91: hi diffChange   ctermfg=bg  guifg=bg      ctermbg=181 guibg=#dfafaf
line 92: hi diffText     ctermfg=bg  guifg=bg      ctermbg=174 guibg=#df8787 cterm=none gui=none
line 93: 
line 94: " vim: set expandtab tabstop=2 shiftwidth=2 smarttab softtabstop=2:
finished sourcing /usr/share/vim-scripts/colors/xoria256.vim
continuing in /home/you/.vim/vimrc
line 296: " colorscheme desert256^I" So (1) 256 colors; (2) /usr/local/bin/colors in path 
line 297: "colorscheme desert^I^I" subtle, good looking
line 298: " industry - blunt but clear
line 299: " torte - less blunt, still clear version of industyr
line 300: " colorscheme inkpot
line 301: 
line 302: " fonts: guifont is different on different platforms
line 303: if has("gui_running")
line 304: ^Iif has("gui_gtk3")
line 305: ^I^Iset guifont=terminus\ 11
line 306: ^I^I" :set guifont=monofur\ 13
line 307: ^Ielseif has("x11")
line 308: ^I^I" Also for GTK 1
line 309: ^I^I:set guifont=*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*
line 310: ^Ielseif has("gui_win32")
line 311: ^I^I:set guifont=Lucida_console:h13:cDEFAULT:qPROOF
line 312: ^Iendif
line 313: endif
line 314: 
line 315: " --- syntax highlighting
line 316: augroup SyntaxEnable
line 317: ^Iautocmd FocusGained *  syntax enable
line 318: ^Iautocmd BufWinEnter,BufNew *  syntax enable
line 319: augroup END
line 320: " source /usr/share/nvim/runtime/syntax/syntax.vim
line 321: " highlight "GOTCHA" just like TODO
line 322: match todo /GOTCHA/  
line 323: match todo /TO DEBUG/  
line 324: match todo /TO FIX/  
line 325: match todo /HERE:/  
line 326: " try for italic comments
line 327: highlight Comment cterm=italic
line 328: 
line 329: 
line 330: "--- ;r  show relative numbers
line 331: inoremap <leader>r <c-o>:set invnumber<bar>:set invrelativenumber<CR>
line 332: nnoremap <leader>r :set invnumber<bar>:set invrelativenumber<CR>
line 333: 
line 334: " --- editng text
line 335: 
line 336: set virtualedit=onemore,block^I^I" onemore: beyond EOL; block: everywhere in visual mode
line 337: set backspace=eol,start,indent^I^I" same as '2'^Imap <BS> <C-H>
line 338: ^I^I^I^I^I^I^I^I^I" don't use :fixdel as it fucks up all kinds of simple editing
line 339: "--- F7  spelling F7
line 340: inoremap <F7>       <C-o>:set invspell spelllang=en_gb<CR>
line 341: nnoremap  <F7>            :set invspell spelllang=en_gb<CR>
line 342: inoremap <leader>Z  <C-o>z=
line 343: nnoremap  <leader>Z       z=
line 344: 
line 345: " add words to my custom spellfile (as correctly spelt words)
line 346: " using ;a and ;A for lion align
line 347: " inoremap <leader>a  <C-o>zg
line 348: " nnoremap  <leader>a       zg
line 349: 
line 350: " for some reason the file ~/.vim/spell/en.utf-8.add is used instead ???
line 351: set spellfile="/home/you/.vim/customVimSpellingWords.utf-8.add"
line 352: 
line 353: " au! CursorMovedI   " for the infinitely moronic plugins that operate on 
line 354: " au! CursorMoved    " EVERY! keypress. stupidity unbounded
line 355: 
line 356: " -  spelling corrections
line 357: iab techncial technical
line 358: iab documentaion documentation
line 359: iab upwork Upwork
line 360: 
line 361: 
line 362: " --- bullet lists: 
line 363: setlocal comments=nb:*,fb:-->,n:•<tab>,b:#
line 364: " b blank required after comment leader
line 365: " n nesting of comments - * - comments here
line 366: " f only first line has leader, the rest spaces: <--- whole paragraph notes
line 367: " fb:*, a comment type that starts with * and the * must be followed by a 
line 368: "^I^Iblank and is only on the first line of the comment.
line 369: " NOTE: at one time I thopught 'f' FUCKS line continuation 
line 370: " NOTE: only '-->' makes whole-paragraph notes
line 371: 
line 372: 
line 373: " --- inserting text
line 374: 
line 375: "- ;d  ;t  insert date & time
line 376: inoremap <leader>d  <C-R>=strftime("%Y-%m-%d %a")<CR>
line 377: nnoremap  <leader>d i<C-R>=strftime("%Y-%m-%d %a")<CR><C-[>ll
line 378: inoremap <leader>t  <C-R>=strftime("%k:%M")<CR>
line 379: nnoremap  <leader>t i<C-R>=strftime("%k:%M")<CR><C-[>ll
line 380: 
line 381: inoremap ;* •<tab>
line 382: nnoremap ;* i•^I<esc><right>
line 383: 
line 384: 
line 385: " ----- key mappings --------------
line 386: 
line 387: "- Q fast scratch-macro qq...do it...q Q:play it
line 388: nnoremap Q @q
line 389: vnoremap Q :norm @q<cr>
line 390: 
line 391: " change insert mode --> normal mode
line 392: 
line 393: vnoremap ;; <C-[><right>^I^I" C-C does not trigger InsertLeave
line 394: inoremap ;; <C-[><right>
line 395: if has('nvim')
line 396: ^Itnoremap ;; <C-\><C-n><right>
line 397: ^Itnoremap <esc> <C-\><C-n><right>
line 398: endif
line 399: 
line 400: "- gb: select last paste in visual mode
line 401: nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'
line 402: set ^Inopaste
line 403: 
line 404: " - Window operations : ctrl-w as window operations ONLY 
line 405: inoremap  <C-w> <C-o><C-W>   
line 406: inoremap  <C-W> <C-o><C-W>
line 407: " - make 'space' the 'window' key
line 408: nnoremap  <space>^I<C-W>
line 409: 
line 410: " --- saving
line 411: 
line 412: "- ;w Fast saving
line 413: vnoremap <leader>w <C-C>:wa!<cr>
line 414: nnoremap <leader>w :wa!<cr>
line 415: inoremap <leader>w <c-o>:wa!<cr>
line 416: 
line 417: "- ;q  Fast save-and-quit  <C-C> to ensure that it works
line 418: nnoremap <leader>q <C-C>:wa!<cr>:qa<cr>
line 419: vnoremap <leader>q <C-C>:wa!<cr>:qa<cr>
line 420: imap <leader>q <C-C><leader>q 
line 421: 
line 422: :imap <silent> <C-S> <C-O>:GuiSave<CR>
line 423: nnoremap i <C-C>i
line 424: ^I^I^I^I^I^I
line 425: " --- movements 
line 426: "
line 427: nnoremap j gj
line 428: nnoremap k gk
line 429: vnoremap j gj
line 430: vnoremap k gk
line 431: 
line 432: set virtualedit=onemore
line 433: 
line 434: "- CTRL-U CTRL-D in insert mode
line 435: inoremap <C-U> <C-O><C-U>
line 436: inoremap <C-D> <C-O><C-D>
line 437: 
line 438: 
line 439: "--- When opening a file, always jump to the last cursor position
line 443: autocmd BufReadPost * if line("'\"") > 0 && line ("'\"") <= line("$") |   exe "normal! g'\"" | endif
line 444: 
line 445: " - CTRL-J, CTRL-K (map)cycle through windows WITHIN A PANE
line 446: nnoremap   <C-J> :bp<CR>      
line 447: nnoremap   <C-K> :bn<CR>
line 448: inoremap  <C-J> <C-o>:bp<CR>^I
line 449: inoremap  <C-K> <C-o>:bn<CR>
line 450: 
line 451: " - Window operations : ctrl-w as window operations ONLY 
line 452: inoremap  <C-w> <C-o><C-W>   
line 453: inoremap  <C-W> <C-o><C-W>
line 454: " - make 'space' the 'window' key
line 455: nnoremap  <space>^I<C-W>
line 456: 
line 457: " ---- search, copy, paste -----------------------------
line 458: 
line 459: "- search
line 460: 
line 461: nnoremap N Nzz^I^I^I^I^I" search will center on the line it's found in.
line 462: nnoremap n nzz
line 463: 
line 464: set ignorecase^I^I^I^I" Do case insensitive matching
line 465: set smartcase^I^I^I^I" Do smart case matching
line 466: set incsearch^I^I^I^I" Incremental search
line 467: set complete=.,w,b,t^I^I" searching for ctrl-P (NO 'i' -recursive incl)
line 468: ^I^I^I^I^I^I^I"  .^Iscan the current buffer ('wrapscan' is ignored)
line 469: ^I^I^I^I^I^I^I"  w^Iscan buffers from other windows
line 470: ^I^I^I^I^I^I^I"  b^Iscan other loaded buffers that are in the buffer list
line 471: ^I^I^I^I^I^I^I"  t^Itag completion
line 472: ^I^I^I^I^I^I^I"  k{dict}, k{dict}... scan the file(s) {dict} for
line 473: ^I^I^I^I^I^I^I"  ^I^Istrings
line 474: 
line 475: " highlight search
line 476: " hlsearch is on at startup
line 477: set hlsearch^I^I^I^I" highlight all matching search words
line 478: " hlsearch is off in insert mode; on in normal mode
line 479: augroup SearchHL
line 480: ^Iau InsertEnter * :setlocal nohlsearch
line 481: ^Iau InsertLeave * :setlocal hlsearch
line 482: ^I" no active search string on opening a new file
line 483: ^Iautocmd BufNewFile,BufNew,BufRead * let @/ = 'sdkfjlsdfj879hhhafkjhk872983l'
line 484: augroup END
line 485: "- ;l remove any search highlighting
line 486: " could poss do i_CTRL-X_CTRL-V to do this one " command
line 487: " noremap  <silent><leader>l  :set hlsearch! hlsearch?<CR>
line 488: " inoremap <silent><leader>l  <c-o>;l<CR>
line 489: noremap  <silent><leader>L /sldkfjsldkfj<CR>
line 490: inoremap <silent><leader>L <c-o>;L<CR>
line 491: " - copy 
line 492: "
line 493: set selection=exclusive
line 494: "selection only includes the text the cursor moved over, NOT text UNDER cursor
line 495: "default value is "inclusive": include the character under the cursor
line 496: 
line 497: 
line 498: " - ;y ;p and ;P - copy and paste to system clipboard
line 499: nnoremap <Leader>Y "+Y
line 500: nnoremap <Leader>y "+y
line 501: vnoremap <Leader>Y "+Y
line 502: vnoremap <Leader>y "+y
line 503: inoremap <Leader>Y <C-o><Leader>Y
line 504: inoremap <Leader>y <C-o><Leader>y
line 505: " yc for "yank character"
line 506: nnoremap yc  yl
line 507: 
line 508: "
line 509: " - paste 
line 510: "
line 511: " - CTRL-V paste 
line 512: inoremap <C-v> <C-o>"*P<c-o>:set nopaste<CR><c-o>:set noshowmode<CR>
line 513: nnoremap  <C-v> "*P:set nopaste<CR>:set noshowmode<CR>
line 514: 
line 515: " WARNING:      THIS OVERRIDES THE CTRL-V's insert-special-char FUNCTION !!!
line 516: "                       To insert special chars (once each year):
line 517: "                       1.      comment out the two mappings below
line 518: "                       2.      restart Vim
line 519: "                       3.      insert the special char
line 520: "                       4.      un-comment these lines, again, in this: vimrc
line 521: "                 ( 5.  restart vim )
line 522: "
line 523: " use the same clipboard as all other apps, no "+g
line 524: "try the '+' register instead of '*'
line 525: " set cb=unnamedplus
line 526: 
line 527: nnoremap <Leader>p "+p
line 528: nnoremap <Leader>P "+P
line 529: vnoremap <Leader>p "+p
line 530: vnoremap <Leader>P "+P
line 531: inoremap <Leader>p <C-o><Leader>p
line 532: inoremap <Leader>P <C-o><Leader>P
line 533: 
line 534: 
line 535: 
line 536: 
line 537: 
line 538: 
line 539: 
line 540: 
line 541: 
line 542: 
line 543: 
line 544: 
line 545: 
line 546: 
line 547: 
line 548: 
line 549: 
line 550: 
line 551: 
line 552: 
line 553: 
line 554: 
line 555: 
line 556: " -- "Learning Vimscript the hard way' 
line 557: augroup LearningVimscript
line 558: ^Iau VimEnter * echo "\>\^\-\^\< When will you finish \"Learning Vimscript the Hard Way\"?  "
line 559: augroup END
line 560: " leave until finished
line 561: 
line 562: 
line 563: 
finished sourcing ~/.vim/vimrc
Searching for "pack/*/start/*" in "/home/you/.vim,/etc/vim,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/etc/vim/after,/home/you/.vim/after"
Searching for "/home/you/.vim/pack/*/start/*"
Searching for "/etc/vim/pack/*/start/*"
Searching for "/usr/share/vim/vimfiles/pack/*/start/*"
Searching for "/usr/share/vim/vim81/pack/*/start/*"
Searching for "/usr/share/vim/vimfiles/after/pack/*/start/*"
Searching for "/etc/vim/after/pack/*/start/*"
Searching for "/home/you/.vim/after/pack/*/start/*"
not found in 'packpath': "pack/*/start/*"
Searching for "plugin/**/*.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/plugin/**/*.vim"
Searching for "/var/lib/vim/addons/plugin/**/*.vim"
Searching for "/usr/share/vim/vimfiles/plugin/**/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/plugin/**/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/plugin/**/*.vim"
Searching for "/usr/share/vim/vim81/plugin/**/*.vim"
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/getscriptPlugin.vim"
line 1: " ---------------------------------------------------------------------
line 2: " getscriptPlugin.vim
line 3: "  Author:^ICharles E. Campbell
line 4: "  Date:^INov 29, 2013
line 5: "  Installing:^I:help glvs-install
line 6: "  Usage:^I:help glvs
line 7: "
line 8: " GetLatestVimScripts: 642 1 :AutoInstall: getscript.vim
line 9: "
line 10: " (Rom 15:11 WEB) Again, "Praise the Lord, all you Gentiles!  Let
line 11: " all the peoples praise Him."
line 12: " ---------------------------------------------------------------------
line 13: " Initialization:^I{{{1
line 14: " if you're sourcing this file, surely you can't be
line 15: " expecting vim to be in its vi-compatible mode
line 16: if exists("g:loaded_getscriptPlugin")
line 17:  finish
line 18: endif
line 19: if &cp
line 20:  if &verbose
line 21:   echo "GetLatestVimScripts is not vi-compatible; not loaded (you need to set nocp)"
line 22:  endif
line 23:  finish
line 24: endif
line 25: let g:loaded_getscriptPlugin = "v36"
line 26: let s:keepcpo                = &cpo
line 27: set cpo&vim
line 28: 
line 29: " ---------------------------------------------------------------------
line 30: "  Public Interface: {{{1
line 31: com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()
line 32: com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()
line 33: silent! com -nargs=0 GLVS                call getscript#GetLatestVimScripts()
line 34: 
line 35: " ---------------------------------------------------------------------
line 36: " Restore Options: {{{1
line 37: let &cpo= s:keepcpo
line 38: unlet s:keepcpo
line 39: 
line 40: " ---------------------------------------------------------------------
line 41: " vim: ts=8 sts=2 fdm=marker nowrap
finished sourcing /usr/share/vim/vim81/plugin/getscriptPlugin.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/gzip.vim"
line 1: " Vim plugin for editing compressed files.
line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2016 Oct 30
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of compressed files
line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")
line 10:   finish
finished sourcing /usr/share/vim/vim81/plugin/gzip.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/logiPat.vim"
line 1: " LogiPat: Boolean logical pattern matcher
line 2: "   Author:  Charles E. Campbell
line 3: "   Date:    Apr 04, 2016
line 4: "   Version: 4
line 5: "   Purpose: to do Boolean-logic based regular expression pattern matching
line 6: " Copyright:    Copyright (C) 1999-2011 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like most anything else that's free,
line 10: "               LogiPat.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: "   Usage: {{{1
line 17: "       :LogiPat ...
line 18: "
line 19: "         Boolean logic supported:
line 20: "            () grouping operators
line 21: "            !  not the following pattern
line 22: "            |  logical or
line 23: "            &  logical and
line 24: "            "..pattern.."
line 25: "^IExample: {{{1
line 26: "^I^I:LogiPat !("january"|"february")
line 27: "^I^I  would match all strings not containing the strings january
line 28: "^I^I  or february
line 29: "^IGetLatestVimScripts: 1290 1 :AutoInstall: LogiPat.vim
line 30: "
line 31: "  Behold, you will conceive in your womb, and bring forth a son, {{{1
line 32: "  and will call his name Jesus. He will be great, and will be
line 33: "  called the Son of the Most High. The Lord God will give him the
line 34: "  throne of his father, David, and he will reign over the house of
line 35: "  Jacob forever. There will be no end to his kingdom. (Luke 1:31-33 WEB)
line 36: 
line 37: " ---------------------------------------------------------------------
line 38: " Load Once: {{{1
line 39: if &cp || exists("loaded_logiPat")
line 40:  finish
line 41: endif
line 42: let g:loaded_logiPat = "v4"
line 43: let s:keepcpo        = &cpo
line 44: set cpo&vim
line 45: "DechoRemOn
line 46: 
line 47: " ---------------------------------------------------------------------
line 48: " Public Interface: {{{1
line 49: com!     -nargs=* LogiPat^I^Icall   LogiPat(<q-args>,1)
line 50: sil! com -nargs=* LP^I^I^Icall   LogiPat(<q-args>,1)
line 51: sil! com -nargs=* LPR^I^I^Icall   LogiPat(<q-args>,1,"r")
line 52: com!     -nargs=+ LPE^I^I^Iechomsg LogiPat(<q-args>)
line 53: com!     -nargs=+ LogiPatFlags^Ilet  s:LogiPatFlags="<args>"
line 54: sil! com -nargs=+ LPF^I^I^Ilet  s:LogiPatFlags="<args>"
line 55: 
line 56: " =====================================================================
line 57: " Functions: {{{1
line 58: 
line 59: " ---------------------------------------------------------------------
line 60: " LogiPat: this function interprets the boolean-logic pattern {{{2
line 61: fun! LogiPat(pat,...)
line 146: 
line 147: " ---------------------------------------------------------------------
line 148: " s:String: Vim6.4 doesn't have string() {{{2
line 149: func! s:String(str)
line 152: 
line 153: " ---------------------------------------------------------------------
line 154: " LP_PatPush: {{{2
line 155: fun! s:LP_PatPush(pat)
line 162: 
line 163: " ---------------------------------------------------------------------
line 164: " LP_PatPop: pop a number/variable from LogiPat's pattern stack {{{2
line 165: fun! s:LP_PatPop(lookup)
line 178: 
line 179: " ---------------------------------------------------------------------
line 180: " LP_OpPush: {{{2
line 181: fun! s:LP_OpPush(op)
line 232: 
line 233: " ---------------------------------------------------------------------
line 234: " LP_Execute: execute operators from opstack using pattern stack {{{2
line 235: fun! s:LP_Execute(preclvl)
line 265: 
line 266: " ---------------------------------------------------------------------
line 267: " LP_Not: writes a logical-not for a pattern {{{2
line 268: fun! s:LP_Not(pat)
line 279: 
line 280: " ---------------------------------------------------------------------
line 281: " LP_Or: writes a logical-or branch using two patterns {{{2
line 282: fun! s:LP_Or(pat1,pat2)
line 288: 
line 289: " ---------------------------------------------------------------------
line 290: " LP_And: writes a logical-and concat using two patterns {{{2
line 291: fun! s:LP_And(pat1,pat2)
line 297: 
line 298: " ---------------------------------------------------------------------
line 299: " StackLook: {{{2
line 300: fun! s:StackLook(description)
line 334: 
line 335: " ---------------------------------------------------------------------
line 336: "  Cleanup And Modeline: {{{1
line 337: let &cpo= s:keepcpo
line 338: unlet s:keepcpo
line 339: " vim: ts=4 fdm=marker
finished sourcing /usr/share/vim/vim81/plugin/logiPat.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/manpager.vim"
line 1: " Vim plugin for using Vim as manpager.
line 2: " Maintainer: Enno Nagel <ennonagel+vim@gmail.com>
line 3: " Last Change: 2018 Feb 04
line 4: 
line 5: command! -nargs=0 MANPAGER call s:ManPager() | delcommand MANPAGER
line 6: 
line 7: function! s:ManPager()
finished sourcing /usr/share/vim/vim81/plugin/manpager.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2018 Jul 3
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded (or disabled)
line 7: " - when 'compatible' is set
line 8: " - the "CursorMoved" autocmd event is not available.
line 9: if exists("g:loaded_matchparen") || &cp || !exists("##CursorMoved")
line 10:   finish
line 11: endif
line 12: let g:loaded_matchparen = 1
line 13: 
line 14: if !exists("g:matchparen_timeout")
line 15:   let g:matchparen_timeout = 300
line 16: endif
line 17: if !exists("g:matchparen_insert_timeout")
line 18:   let g:matchparen_insert_timeout = 60
line 19: endif
line 20: 
line 21: augroup matchparen
line 22:   " Replace all matchparen autocommands
line 23:   autocmd! CursorMoved,CursorMovedI,WinEnter * call s:Highlight_Matching_Pair()
line 24:   if exists('##TextChanged')
line 25:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 26:   endif
line 27: augroup END
line 28: 
line 29: " Skip the rest if it was already done.
line 30: if exists("*s:Highlight_Matching_Pair")
line 31:   finish
line 32: endif
line 33: 
line 34: let s:cpo_save = &cpo
line 35: set cpo-=C
line 36: 
line 37: " The function that is invoked (very often) to define a ":match" highlighting
line 38: " for any matching paren.
line 39: function! s:Highlight_Matching_Pair()
line 197: 
line 198: " Define commands that will disable and enable the plugin.
line 199: command! DoMatchParen call s:DoMatchParen()
line 200: command! NoMatchParen call s:NoMatchParen()
line 201: 
line 202: func! s:NoMatchParen()
line 209: 
line 210: func! s:DoMatchParen()
line 216: 
line 217: let &cpo = s:cpo_save
line 218: unlet s:cpo_save
finished sourcing /usr/share/vim/vim81/plugin/matchparen.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/netrwPlugin.vim"
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network
line 2: "            PLUGIN SECTION
line 3: " Date:^I^IFeb 08, 2016
line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>
line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 6: " Copyright:    Copyright (C) 1999-2013 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 11: "               *as is* and comes with no warranty of any kind, either
line 12: "               expressed or implied. By using this plugin, you agree that
line 13: "               in no event will the copyright holder be liable for any damages
line 14: "               resulting from the use of this software.
line 15: "
line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 17: "  (James 1:22 RSV)
line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_netrwPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_netrwPlugin = "v156"
line 24: let s:keepcpo = &cpo
line 25: set cpo&vim
line 26: "DechoRemOn
line 27: 
line 28: " ---------------------------------------------------------------------
line 29: " Public Interface: {{{1
line 30: 
line 31: " Local Browsing Autocmds: {{{2
line 32: augroup FileExplorer
line 33:  au!
line 34:  au BufLeave *  if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
line 35:  au BufEnter *^Isil call s:LocalBrowse(expand("<amatch>"))
line 36:  au VimEnter *^Isil call s:VimEnter(expand("<amatch>"))
line 37:  if has("win32") || has("win95") || has("win64") || has("win16")
line 38:   au BufEnter .* sil call s:LocalBrowse(expand("<amatch>"))
line 39:  endif
line 40: augroup END
line 41: 
line 42: " Network Browsing Reading Writing: {{{2
line 43: augroup Network
line 44:  au!
line 45:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^I^I^Icall netrw#FileUrlRead(expand("<amatch>"))
line 46:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))
line 47:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))
line 48:  au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))
line 49:  au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))
line 50:  try                                                       
line 51:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 52:  catch /^Vim\%((\a\+)\)\=:E216/                            
line 53:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 54:  endtry
line 55: augroup END
line 56: 
line 57: " Commands: :Nread, :Nwrite, :NetUserPass {{{2
line 58: com! -count=1 -nargs=*^INread^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)
line 59: com! -range=% -nargs=*^INwrite^I^Ilet s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)
line 60: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)
line 61: com! -nargs=*^I        Nsource^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)
line 62: com! -nargs=?^I^INtree^I^Icall netrw#SetTreetop(<q-args>)
line 63: 
line 64: " Commands: :Explore, :Sexplore, Hexplore, Vexplore, Lexplore {{{2
line 65: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)
line 66: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)
line 67: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)
line 68: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)
line 69: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)
line 70: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)
line 71: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)
line 72: com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore^Icall netrw#Lexplore(<count>,<bang>0,<q-args>)
line 73: 
line 74: " Commands: NetrwSettings {{{2
line 75: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()
line 76: com! -bang^INetrwClean^Icall netrw#Clean(<bang>0)
line 77: 
line 78: " Maps:
line 79: if !exists("g:netrw_nogx")
line 80:  if maparg('gx','n') == ""
line 81:   if !hasmapto('<Plug>NetrwBrowseX')
line 82:    nmap <unique> gx <Plug>NetrwBrowseX
line 83:   endif
line 84:   nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())<cr>
line 85:  endif
line 86:  if maparg('gx','v') == ""
line 87:   if !hasmapto('<Plug>NetrwBrowseXVis')
line 88:    vmap <unique> gx <Plug>NetrwBrowseXVis
line 89:   endif
line 90:   vno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>
line 91:  endif
line 92: endif
line 93: if exists("g:netrw_usetab") && g:netrw_usetab
line 94:  if maparg('<c-tab>','n') == ""
line 95:   nmap <unique> <c-tab> <Plug>NetrwShrink
line 96:  endif
line 97:  nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>
line 98: endif
line 99: 
line 100: " ---------------------------------------------------------------------
line 101: " LocalBrowse: invokes netrw#LocalBrowseCheck() on directory buffers {{{2
line 102: fun! s:LocalBrowse(dirname)
line 148: 
line 149: " ---------------------------------------------------------------------
line 150: " s:VimEnter: after all vim startup stuff is done, this function is called. {{{2
line 151: "             Its purpose: to look over all windows and run s:LocalBrowse() on
line 152: "             them, which checks if they're directories and will create a directory
line 153: "             listing when appropriate.
line 154: "             It also sets s:vimentered, letting s:LocalBrowse() know that s:VimEnter()
line 155: "             has already been called.
line 156: fun! s:VimEnter(dirname)
line 164: 
line 165: " ---------------------------------------------------------------------
line 166: " NetrwStatusLine: {{{1
line 167: fun! NetrwStatusLine()
line 178: 
line 179: " ------------------------------------------------------------------------
line 180: " NetUserPass: set username and password for subsequent ftp transfer {{{1
line 181: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password
line 182: "^I    :call NetUserPass("uid")^I^I-- will prompt for password
line 183: "^I    :call NetUserPass("uid","password") -- sets global userid and password
line 184: fun! NetUserPass(...)
line 208: 
line 209: " ------------------------------------------------------------------------
line 210: " Modelines And Restoration: {{{1
line 211: let &cpo= s:keepcpo
line 212: unlet s:keepcpo
line 213: " vim:ts=8 fdm=marker
finished sourcing /usr/share/vim/vim81/plugin/netrwPlugin.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/rrhelper.vim"
line 1: " Vim plugin with helper function(s) for --remote-wait
line 2: " Maintainer: Flemming Madsen <fma@cci.dk>
line 3: " Last Change: 2008 May 29
line 4: 
line 5: " Has this already been loaded?
line 6: if exists("loaded_rrhelper") || !has("clientserver")
line 7:   finish
line 8: endif
line 9: let loaded_rrhelper = 1
line 10: 
line 11: " Setup answers for a --remote-wait client who will assume
line 12: " a SetupRemoteReplies() function in the command server
line 13: 
line 14: function SetupRemoteReplies()
line 41: 
line 42: function DoRemoteReply(id, cnt, group, file)
line 47: 
line 48: " vim: set sw=2 sts=2 :
finished sourcing /usr/share/vim/vim81/plugin/rrhelper.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2006 Feb 01
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of spell files
line 9: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")
line 10:   finish
line 11: endif
line 12: let loaded_spellfile_plugin = 1
line 13: 
line 14: " The function is in the autoload directory.
line 15: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))
finished sourcing /usr/share/vim/vim81/plugin/spellfile.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/tarPlugin.vim"
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles
line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>
line 3: " Modified by Charles E. Campbell
line 4: " Distributed under the GNU General Public License.
line 5: "
line 6: " Updates are available from <http://michael.toren.net/code/>.  If you
line 7: " find this script useful, or have suggestions for improvements, please
line 8: " let me know.
line 9: " Also look there for further comments and documentation.
line 10: "
line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.
line 12: " ---------------------------------------------------------------------
line 13: "  Load Once: {{{1
line 14: if &cp || exists("g:loaded_tarPlugin")
line 15:  finish
line 16: endif
line 17: let g:loaded_tarPlugin = "v29"
line 18: let s:keepcpo          = &cpo
line 19: set cpo&vim
line 20: 
line 21: " ---------------------------------------------------------------------
line 22: "  Public Interface: {{{1
line 23: augroup tar
line 24:   au!
line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)
line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)
line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))
line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))
line 29: 
line 30:   if has("unix")
line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)
line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)
line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 35:   endif
line 36: 
line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))
line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))
line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))
line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))
line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))
line 42:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))
line 43:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))
line 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))
line 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))
line 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))
line 47: augroup END
line 48: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)
line 49: 
line 50: " ---------------------------------------------------------------------
line 51: " Restoration And Modelines: {{{1
line 52: " vim: fdm=marker
line 53: let &cpo= s:keepcpo
line 54: unlet s:keepcpo
finished sourcing /usr/share/vim/vim81/plugin/tarPlugin.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/tohtml.vim"
line 1: " Vim plugin for converting a syntax highlighted file to HTML.
line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>
line 3: " Last Change: 2018 Nov 11
line 4: "
line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and
line 6: " $VIMRUNTIME/syntax/2html.vim
line 7: "
line 8: if exists('g:loaded_2html_plugin')
line 9:   finish
line 10: endif
line 11: let g:loaded_2html_plugin = 'vim8.1_v1'
line 12: 
line 13: "
line 14: " Changelog: {{{
line 15: "   8.1_v1  (this version): Fix Bitbucket issue #6: Don't generate empty script
line 16: "                           tag.
line 17: "                           Fix Bitbucket issue #5: javascript should
line 18: "                           declare variables with "var".
line 19: "                           Fix Bitbucket issue #13: errors thrown sourcing
line 20: "                           2html.vim directly when plugins not loaded.
line 21: "                           Fix Bitbucket issue #16: support 'vartabstop'.
line 22: "
line 23: "   7.4 updates: {{{
line 24: "   7.4_v2  (Vim 7.4.0899): Fix error raised when converting a diff containing
line 25: "                           an empty buffer. Jan Stocker: allow g:html_font to
line 26: "                           take a list so it is easier to specfiy fallback
line 27: "                           fonts in the generated CSS.
line 28: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and
line 29: "^I^I^I    also for version-specific modelines like "vim>703:".
line 30: "}}}
line 31: "
line 32: "   7.3 updates: {{{
line 33: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using
line 34: "^I^I^I    g:html_line_ids=0. Allow customizing
line 35: "^I^I^I    important IDs (like line IDs and fold IDs) using
line 36: "^I^I^I    g:html_id_expr evalutated when the buffer conversion
line 37: "^I^I^I    is started.
line 38: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and
line 39: "^I^I^I    insert modeline to set it to manual.
line 40: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a
line 41: "^I^I^I    duplicate of one buffer instead of including both.
line 42: "^I^I^I    Add anchors to each line so you can put '#L123'
line 43: "^I^I^I    or '#123' at the end of the URL to jump to line 123
line 44: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds
line 45: "^I^I^I    to show the anchor being jumped to if it is hidden.
line 46: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.
line 47: "^I^I^I    Allow TOhtml to chain together with other commands
line 48: "^I^I^I    using |.
line 49: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple
line 50: "^I^I^I    highlight groups make up the start-of-modeline text.
line 51: "^I^I^I    Improve render time of page with uncopyable regions
line 52: "^I^I^I    by not using one-input-per-char. Change name of
line 53: "^I^I^I    uncopyable option from html_unselectable to
line 54: "^I^I^I    html_prevent_copy. Added html_no_invalid option and
line 55: "^I^I^I    default to inserting invalid markup for uncopyable
line 56: "^I^I^I    regions to prevent MS Word from pasting undeletable
line 57: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).
line 58: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to
line 59: "^I^I^I    eliminate post-processing substitute commands in
line 60: "^I^I^I    favor of doing the work up front. Remove unnecessary
line 61: "^I^I^I    special treatment of 'LineNr' highlight group. Minor
line 62: "^I^I^I    speed improvements. Fix modeline mangling in
line 63: "^I^I^I    generated output so it works for text in the first
line 64: "^I^I^I    column. Fix missing line number and fold column in
line 65: "^I^I^I    diff filler lines. Fix that some fonts have a 1px
line 66: "^I^I^I    gap (using a dirty hack, improvements welcome). Add
line 67: "^I^I^I    "colorscheme" meta tag. Does NOT include support for
line 68: "^I^I^I    the new default foldtext added in v11, as the patch
line 69: "^I^I^I    adding it has not yet been included in Vim.
line 70: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian
line 71: "^I^I^I    Brabandt in
line 72: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.
line 73: "^I^I^I    This patch has not yet been included in Vim, thus
line 74: "^I^I^I    these changes are removed in the next version.
line 75: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside
line 76: "^I^I^I    multiple nested folds with dynamic folding on.
line 77: "^I^I^I    Also fix problem with foldtext in this situation.
line 78: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css
line 79: "^I^I^I    and without html_no_pre, default value same as
line 80: "^I^I^I    'wrap' option, (Andy Spencer). Don't use
line 81: "^I^I^I    'fileencoding' for converted document encoding if
line 82: "^I^I^I    'buftype' indicates a special buffer which isn't
line 83: "^I^I^I    written.
line 84: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab
line 85: "^I^I^I    characters in generated output (Andy Spencer).
line 86: "^I^I^I    Escape text that looks like a modeline so Vim
line 87: "^I^I^I    doesn't use anything in the converted HTML as a
line 88: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts
line 89: "^I^I^I    before the conversion range. Remove fold column when
line 90: "^I^I^I    there are no folds.
line 91: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:
line 92: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.
line 93: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not
line 94: "^I^I^I    supported by all major browsers according to
line 95: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and
line 96: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make
line 97: "^I^I^I    HTML encoding to Vim encoding detection be
line 98: "^I^I^I    case-insensitive for built-in pairs.
line 99: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be
line 100: "^I^I^I    called in restricted mode (Andy Spencer). Use
line 101: "^I^I^I    'fencoding' instead of 'encoding' to determine by
line 102: "^I^I^I    charset, and make sure the 'fenc' of the generated
line 103: "^I^I^I    file matches its indicated charset. Add charsets for
line 104: "^I^I^I    all of Vim's natively supported encodings.
line 105: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other
line 106: "^I^I^I    user settings interfering with diff mode generation,
line 107: "^I^I^I    trailing whitespace (e.g. line number column) when
line 108: "^I^I^I    using html_no_pre, and bugs when using
line 109: "^I^I^I    html_hover_unfold.
line 110: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync
line 111: "^I^I^I    folds in diff mode when first line was folded.
line 112: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode
line 113: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css
line 114: "^I^I^I    default to true when not set to anything. Use strict
line 115: "^I^I^I    doctypes where possible. Rename use_xhtml option to
line 116: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension
line 117: "^I^I^I    when using this option. Add meta tag for settings.
line 118: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the
line 119: "^I^I^I    diff colors and the normal syntax colors
line 120: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output
line 121: "}}}
line 122: "}}}
line 123: 
line 124: " TODO: {{{
line 125: "   * Check the issue tracker:
line 126: "     https://bitbucket.org/fritzophrenic/vim-tohtml/issues?status=new&status=open
line 127: "   * Options for generating the CSS in external style sheets. New :TOcss
line 128: "     command to convert the current color scheme into a (mostly) generic CSS
line 129: "     stylesheet which can be re-used. Alternate stylesheet support? Good start
line 130: "     by Erik Falor
line 131: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).
line 132: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,
line 133: "     term) to use for the styling. Suggestion by "nacitar".
line 134: "   * Add way to override or specify which RGB colors map to the color numbers
line 135: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".
line 136: "   * Disable filetype detection until after all processing is done.
line 137: "   * Add option for not generating the hyperlink on stuff that looks like a
line 138: "     URL? Or just color the link to fit with the colorscheme (and only special
line 139: "     when hovering)?
line 140: "   * Bug: Opera does not allow printing more than one page if uncopyable
line 141: "     regions is turned on. Possible solution: Add normal text line numbers with
line 142: "     display:none, set to display:inline for print style sheets, and hide
line 143: "     <input> elements for print, to allow Opera printing multiple pages (and
line 144: "     other uncopyable areas?). May need to make the new text invisible to IE
line 145: "     with conditional comments to prevent copying it, IE for some reason likes
line 146: "     to copy hidden text. Other browsers too?
line 147: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is
line 148: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome
line 149: "     on Windows). Perhaps it is font related?
line 150: "   * Bug: still some gaps in the fold column when html_prevent_copy contains
line 151: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps
line 152: "     on diff lines though.
line 153: "   * Undercurl support via CSS3, with fallback to dotted or something:
line 154: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion
line 155: "   * Redo updates for modified default foldtext (v11) when/if the patch is
line 156: "     accepted to modify it.
line 157: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold
line 158: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress
line 159: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml
line 160: "     does not show the whole diff filler as it is supposed to?
line 161: "   * Bug: when 'isprint' is wrong for the current encoding, will generate
line 162: "     invalid content. Can/should anything be done about this? Maybe a separate
line 163: "     plugin to correct 'isprint' based on encoding?
line 164: "   * Check to see if the windows-125\d encodings actually work in Unix without
line 165: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.
line 166: "   * Font auto-detection similar to
line 167: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of
line 168: "     platforms.
line 169: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :
line 170: "^I- listchars support
line 171: "^I- full-line background highlight
line 172: "^I- other?
line 173: "   * Make it so deleted lines in a diff don't create side-scrolling (get it
line 174: "     free with full-line background highlight above).
line 175: "   * Restore open/closed folds and cursor position after processing each file
line 176: "     with option not to restore for speed increase.
line 177: "   * Add extra meta info (generation time, etc.)?
line 178: "   * Tidy up so we can use strict doctype in even more situations
line 179: "   * Implementation detail: add threshold for writing the lines to the html
line 180: "     buffer before we're done (5000 or so lines should do it)
line 181: "   * TODO comments for code cleanup scattered throughout
line 182: "}}}
line 183: 
line 184: " Define the :TOhtml command when:
line 185: " - 'compatible' is not set
line 186: " - this plugin or user override was not already loaded
line 187: " - user commands are available. {{{
line 188: if !&cp && !exists(":TOhtml") && has("user_commands")
line 189:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)
line 190: endif "}}}
line 191: 
line 192: " Make sure any patches will probably use consistent indent
line 193: "   vim: ts=8 sw=2 sts=2 noet fdm=marker
finished sourcing /usr/share/vim/vim81/plugin/tohtml.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/vimballPlugin.vim"
line 1: " vimballPlugin : construct a file containing both paths and files
line 2: " Author: Charles E. Campbell
line 3: " Copyright: (c) 2004-2014 by Charles E. Campbell
line 4: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt
line 5: "            (see |copyright|) except use "Vimball" instead of "Vim".
line 6: "            No warranty, express or implied.
line 7: "  *** ***   Use At-Your-Own-Risk!   *** ***
line 8: "
line 9: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who
line 10: "      judge. For in that which you judge another, you condemn yourself. For
line 11: "      you who judge practice the same things.
line 12: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim
line 13: 
line 14: " ---------------------------------------------------------------------
line 15: "  Load Once: {{{1
line 16: if &cp || exists("g:loaded_vimballPlugin")
line 17:  finish
line 18: endif
line 19: let g:loaded_vimballPlugin = "v37"
line 20: let s:keepcpo              = &cpo
line 21: set cpo&vim
line 22: 
line 23: " ------------------------------------------------------------------------------
line 24: " Public Interface: {{{1
line 25: com! -range   -complete=file -nargs=+ -bang MkVimball^I^Icall vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)
line 26: com! -nargs=? -complete=dir  UseVimball^I^I^I^I^I^Icall vimball#Vimball(1,<f-args>)
line 27: com! -nargs=0                VimballList^I^I^I^I^Icall vimball#Vimball(0)
line 28: com! -nargs=* -complete=dir  RmVimball^I^I^I^I^I^Icall vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()
line 29: augroup Vimball
line 30:  au!
line 31:  au BufEnter  *.vba,*.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif
line 32:  au SourceCmd *.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif
line 33:  au SourceCmd *.vba^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif
line 34:  au BufEnter  *.vmb,*.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif
line 35:  au SourceCmd *.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif
line 36:  au SourceCmd *.vmb^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif
line 37: augroup END
line 38: 
line 39: " =====================================================================
line 40: " Restoration And Modelines: {{{1
line 41: " vim: fdm=marker
line 42: let &cpo= s:keepcpo
line 43: unlet s:keepcpo
finished sourcing /usr/share/vim/vim81/plugin/vimballPlugin.vim
chdir(/usr/share/vim/vim81/plugin)
fchdir() to previous dir
sourcing "/usr/share/vim/vim81/plugin/zipPlugin.vim"
line 1: " zipPlugin.vim: Handles browsing zipfiles
line 2: "            PLUGIN PORTION
line 3: " Date:^I^I^ISep 13, 2016
line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>
line 5: " License:^I^IVim License  (see vim's :help license)
line 6: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.
line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.
line 18: " ---------------------------------------------------------------------
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_zipPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_zipPlugin = "v28"
line 24: let s:keepcpo          = &cpo
line 25: set cpo&vim
line 26: 
line 27: " ---------------------------------------------------------------------
line 28: " Options: {{{1
line 29: if !exists("g:zipPlugin_ext")
line 30:  let g:zipPlugin_ext='*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'
line 31: endif
line 32: 
line 33: " ---------------------------------------------------------------------
line 34: " Public Interface: {{{1
line 35: augroup zip
line 36:  au!
line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)
line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)
line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))
line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))
line 41: 
line 42:  if has("unix")
line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)
line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)
line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 47:  endif
line 48: 
line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'
line 49: au BufReadCmd *.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))
line 50: augroup END
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: "  Restoration And Modelines: {{{1
line 54: "  vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /usr/share/vim/vim81/plugin/zipPlugin.vim
Searching for "/usr/share/vim-scripts/plugin/**/*.vim"
Searching for "pack/*/start/*" in "/home/you/.vim,/etc/vim,/usr/share/vim/vimfiles,/usr/share/vim/vim81,/usr/share/vim/vimfiles/after,/etc/vim/after,/home/you/.vim/after"
Searching for "/home/you/.vim/pack/*/start/*"
Searching for "/etc/vim/pack/*/start/*"
Searching for "/usr/share/vim/vimfiles/pack/*/start/*"
Searching for "/usr/share/vim/vim81/pack/*/start/*"
Searching for "/usr/share/vim/vimfiles/after/pack/*/start/*"
Searching for "/etc/vim/after/pack/*/start/*"
Searching for "/home/you/.vim/after/pack/*/start/*"
not found in 'packpath': "pack/*/start/*"
Searching for "plugin/**/*.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/plugin/**/*.vim"
Searching for "/usr/share/vim/vimfiles/after/plugin/**/*.vim"
Searching for "/var/lib/vim/addons/after/plugin/**/*.vim"
Searching for "/home/you/.vim/after/plugin/**/*.vim"
not found in 'runtimepath': "plugin/**/*.vim"
Opening the X display took 0 msec
Reading viminfo file "/home/you/.viminfo" info oldfiles
Opening the X display took 0 msec
"gr2.py" 
"gr2.py" 417L, 12342C
Reading viminfo file "/home/you/.viminfo" marks
Executing BufRead Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufRead')

line 0: call dein#autoload#_on_default_event('BufRead')
calling function dein#autoload#_on_default_event('BufRead')

line 1:   let lazy_plugins = dein#util#_get_lazy_plugins()
calling function dein#autoload#_on_default_event[1]..dein#util#_get_lazy_plugins()

line 1:   return filter(values(g:dein#_plugins), "!v:val.sourced && v:val.rtp !=# ''")
function dein#autoload#_on_default_event[1]..dein#util#_get_lazy_plugins returning []

continuing in function dein#autoload#_on_default_event

line 2:   let plugins = []
line 3: 
line 4:   let path = expand('<afile>')
line 5:   " For ":edit ~".
line 6:   if fnamemodify(path, ':t') ==# '~'
line 7:     let path = '~'
line 8:   endif
line 9:   let path = dein#util#_expand(path)
calling function dein#autoload#_on_default_event[9]..dein#util#_expand('gr2.py')

line 1:   let path = (a:path =~# '^\~') ? fnamemodify(a:path, ':p') : (a:path =~# '^\$\h\w*') ? substitute(a:path,               '^\$\h\w*', '\=eval(submatch(0))', '') : a:path
line 5:   return (s:is_windows && path =~# '\\') ? dein#util#_substitute_path(path) : path
function dein#autoload#_on_default_event[9]..dein#util#_expand returning 'gr2.py'

continuing in function dein#autoload#_on_default_event

line 10: 
line 11:   for filetype in split(&l:filetype, '\.')
line 12:     let plugins += filter(copy(lazy_plugins), "index(get(v:val, 'on_ft', []), filetype) >= 0")
line 14:   endfor
line 15: 
line 16:   let plugins += filter(copy(lazy_plugins), "!empty(filter(copy(get(v:val, 'on_path', [])),                'path =~? v:val'))")
line 19:   let plugins += filter(copy(lazy_plugins), "!has_key(v:val, 'on_event')  && has_key(v:val, 'on_if') && eval(v:val.on_if)")
line 22: 
line 23:   call s:source_events(a:event, plugins)
calling function dein#autoload#_on_default_event[23]..<SNR>21_source_events('BufRead', [])

line 1:   if empty(a:plugins)
line 2:     return
function dein#autoload#_on_default_event[23]..<SNR>21_source_events returning #0

continuing in function dein#autoload#_on_default_event

function dein#autoload#_on_default_event returning #0

continuing in BufRead Autocommands for "*?"

Executing BufRead Autocommands for "*.py"
autocommand setf python

line 0: setf python
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

line 0: call dein#autoload#_on_default_event('FileType')
calling function dein#autoload#_on_default_event('FileType')

line 1:   let lazy_plugins = dein#util#_get_lazy_plugins()
calling function dein#autoload#_on_default_event[1]..dein#util#_get_lazy_plugins()

line 1:   return filter(values(g:dein#_plugins), "!v:val.sourced && v:val.rtp !=# ''")
function dein#autoload#_on_default_event[1]..dein#util#_get_lazy_plugins returning []

continuing in function dein#autoload#_on_default_event

line 2:   let plugins = []
line 3: 
line 4:   let path = expand('<afile>')
line 5:   " For ":edit ~".
line 6:   if fnamemodify(path, ':t') ==# '~'
line 7:     let path = '~'
line 8:   endif
line 9:   let path = dein#util#_expand(path)
calling function dein#autoload#_on_default_event[9]..dein#util#_expand('gr2.py')

line 1:   let path = (a:path =~# '^\~') ? fnamemodify(a:path, ':p') : (a:path =~# '^\$\h\w*') ? substitute(a:path,               '^\$\h\w*', '\=eval(submatch(0))', '') : a:path
line 5:   return (s:is_windows && path =~# '\\') ? dein#util#_substitute_path(path) : path
function dein#autoload#_on_default_event[9]..dein#util#_expand returning 'gr2.py'

continuing in function dein#autoload#_on_default_event

line 10: 
line 11:   for filetype in split(&l:filetype, '\.')
line 12:     let plugins += filter(copy(lazy_plugins), "index(get(v:val, 'on_ft', []), filetype) >= 0")
line 14:   endfor
line 11:   for filetype in split(&l:filetype, '\.')
line 12:     let plugins += filter(copy(lazy_plugins), "index(get(v:val, 'on_ft', []), filetype) >= 0")
line 14:   endfor
line 15: 
line 16:   let plugins += filter(copy(lazy_plugins), "!empty(filter(copy(get(v:val, 'on_path', [])),                'path =~? v:val'))")
line 19:   let plugins += filter(copy(lazy_plugins), "!has_key(v:val, 'on_event')  && has_key(v:val, 'on_if') && eval(v:val.on_if)")
line 22: 
line 23:   call s:source_events(a:event, plugins)
calling function dein#autoload#_on_default_event[23]..<SNR>21_source_events('FileType', [])

line 1:   if empty(a:plugins)
line 2:     return
function dein#autoload#_on_default_event[23]..<SNR>21_source_events returning #0

continuing in function dein#autoload#_on_default_event

function dein#autoload#_on_default_event returning #0

continuing in FileType Autocommands for "*?"

Executing FileType Autocommands for "*"
autocommand call s:ftplugin()

line 0: call s:ftplugin()
calling function <SNR>17_ftplugin()

line 1:   if exists("b:undo_ftplugin")
line 2:     silent! execute b:undo_ftplugin
line 3:     unlet! b:undo_ftplugin b:did_ftplugin
line 4:   endif
line 5: 
line 6:   let filetype = expand("<amatch>")
line 7:   if filetype !=# ""
line 8:     if &cpoptions =~# "S" && exists("b:did_ftplugin")
line 9:       unlet b:did_ftplugin
line 10:     endif
line 11:     for ft in split(filetype, '\.')
line 12:       execute "runtime! ftplugin/" . ft . ".vim" "ftplugin/" . ft . "_*.vim" "ftplugin/" . ft . "/*.vim"
line 12: runtime! ftplugin/python.vim ftplugin/python_*.vim ftplugin/python/*.vim
Searching for "ftplugin/python.vim ftplugin/python_*.vim ftplugin/python/*.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/ftplugin/python.vim"
Searching for "/home/you/.vim/ftplugin/python_*.vim"
Searching for "/home/you/.vim/ftplugin/python/*.vim"
Searching for "/var/lib/vim/addons/ftplugin/python.vim"
Searching for "/var/lib/vim/addons/ftplugin/python_*.vim"
Searching for "/var/lib/vim/addons/ftplugin/python/*.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/python.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/python_*.vim"
Searching for "/usr/share/vim/vimfiles/ftplugin/python/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/ftplugin/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/ftplugin/python_*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/ftplugin/python/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/ftplugin/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/ftplugin/python_*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/ftplugin/python/*.vim"
Searching for "/usr/share/vim/vim81/ftplugin/python.vim"
chdir(/usr/share/vim/vim81/ftplugin)
fchdir() to previous dir
line 12: sourcing "/usr/share/vim/vim81/ftplugin/python.vim"
line 1: " Vim filetype plugin file
line 2: " Language:^Ipython
line 3: " Maintainer:^ITom Picton <tom@tompicton.co.uk>
line 4: " Previous Maintainer: James Sully <sullyj3@gmail.com>
line 5: " Previous Maintainer: Johannes Zellner <johannes@zellner.org>
line 6: " Last Change:^ISun, 15 April 2018
line 7: " https://github.com/tpict/vim-ftplugin-python
line 8: 
line 9: if exists("b:did_ftplugin") | finish | endif
line 9:  finish | endif
line 9:  endif
line 10: let b:did_ftplugin = 1
line 11: let s:keepcpo= &cpo
line 12: set cpo&vim
line 13: 
line 14: setlocal cinkeys-=0#
line 15: setlocal indentkeys-=0#
line 16: setlocal include=^\\s*\\(from\\\|import\\)
line 17: 
line 18: " For imports with leading .., append / and replace additional .s with ../
line 19: let b:grandparent_match = '^\(.\.\)\(\.*\)'
line 20: let b:grandparent_sub = '\=submatch(1)."/".repeat("../",strlen(submatch(2)))'
line 21: 
line 22: " For imports with a single leading ., replace it with ./
line 23: let b:parent_match = '^\.\(\.\)\@!'
line 24: let b:parent_sub = './'
line 25: 
line 26: " Replace any . sandwiched between word characters with /
line 27: let b:child_match = '\(\w\)\.\(\w\)'
line 28: let b:child_sub = '\1/\2'
line 29: 
line 34: setlocal includeexpr=substitute(substitute(substitute(v:fname,b:grandparent_match,b:grandparent_sub,''),b:parent_match,b:parent_sub,''),b:child_match,b:child_sub,'g')
line 35: 
line 36: setlocal suffixesadd=.py
line 37: setlocal comments=b:#,fb:-
line 38: setlocal commentstring=#\ %s
line 39: 
line 40: setlocal omnifunc=pythoncomplete#Complete
line 41: if has('python3')
line 42:        setlocal omnifunc=python3complete#Complete
line 43: endif
line 44: 
line 45: set wildignore+=*.pyc
line 46: 
line 47: let b:next_toplevel='\v%$\|^(class\|def\|async def)>'
line 48: let b:prev_toplevel='\v^(class\|def\|async def)>'
line 49: let b:next_endtoplevel='\v%$\|\S.*\n+(def\|class)'
line 50: let b:prev_endtoplevel='\v\S.*\n+(def\|class)'
line 51: let b:next='\v%$\|^\s*(class\|def\|async def)>'
line 52: let b:prev='\v^\s*(class\|def\|async def)>'
line 53: let b:next_end='\v\S\n*(%$\|^(\s*\n*)*(class\|def\|async def)\|^\S)'
line 54: let b:prev_end='\v\S\n*(^(\s*\n*)*(class\|def\|async def)\|^\S)'
line 55: 
line 56: execute "nnoremap <silent> <buffer> ]] :call <SID>Python_jump('n', '". b:next_toplevel."', 'W', v:count1)<cr>"
line 56: nnoremap <silent> <buffer> ]] :call <SID>Python_jump('n', '\v%$\|^(class\|def\|async def)>', 'W', v:count1)<cr>
line 57: execute "nnoremap <silent> <buffer> [[ :call <SID>Python_jump('n', '". b:prev_toplevel."', 'Wb', v:count1)<cr>"
line 57: nnoremap <silent> <buffer> [[ :call <SID>Python_jump('n', '\v^(class\|def\|async def)>', 'Wb', v:count1)<cr>
line 58: execute "nnoremap <silent> <buffer> ][ :call <SID>Python_jump('n', '". b:next_endtoplevel."', 'W', 0, v:count1)<cr>"
line 58: nnoremap <silent> <buffer> ][ :call <SID>Python_jump('n', '\v%$\|\S.*\n+(def\|class)', 'W', 0, v:count1)<cr>
line 59: execute "nnoremap <silent> <buffer> [] :call <SID>Python_jump('n', '". b:prev_endtoplevel."', 'Wb', 0, v:count1)<cr>"
line 59: nnoremap <silent> <buffer> [] :call <SID>Python_jump('n', '\v\S.*\n+(def\|class)', 'Wb', 0, v:count1)<cr>
line 60: execute "nnoremap <silent> <buffer> ]m :call <SID>Python_jump('n', '". b:next."', 'W', v:count1)<cr>"
line 60: nnoremap <silent> <buffer> ]m :call <SID>Python_jump('n', '\v%$\|^\s*(class\|def\|async def)>', 'W', v:count1)<cr>
line 61: execute "nnoremap <silent> <buffer> [m :call <SID>Python_jump('n', '". b:prev."', 'Wb', v:count1)<cr>"
line 61: nnoremap <silent> <buffer> [m :call <SID>Python_jump('n', '\v^\s*(class\|def\|async def)>', 'Wb', v:count1)<cr>
line 62: execute "nnoremap <silent> <buffer> ]M :call <SID>Python_jump('n', '". b:next_end."', 'W', 0, v:count1)<cr>"
line 62: nnoremap <silent> <buffer> ]M :call <SID>Python_jump('n', '\v\S\n*(%$\|^(\s*\n*)*(class\|def\|async def)\|^\S)', 'W', 0, v:count1)<cr>
line 63: execute "nnoremap <silent> <buffer> [M :call <SID>Python_jump('n', '". b:prev_end."', 'Wb', 0, v:count1)<cr>"
line 63: nnoremap <silent> <buffer> [M :call <SID>Python_jump('n', '\v\S\n*(^(\s*\n*)*(class\|def\|async def)\|^\S)', 'Wb', 0, v:count1)<cr>
line 64: 
line 65: execute "onoremap <silent> <buffer> ]] :call <SID>Python_jump('o', '". b:next_toplevel."', 'W', v:count1)<cr>"
line 65: onoremap <silent> <buffer> ]] :call <SID>Python_jump('o', '\v%$\|^(class\|def\|async def)>', 'W', v:count1)<cr>
line 66: execute "onoremap <silent> <buffer> [[ :call <SID>Python_jump('o', '". b:prev_toplevel."', 'Wb', v:count1)<cr>"
line 66: onoremap <silent> <buffer> [[ :call <SID>Python_jump('o', '\v^(class\|def\|async def)>', 'Wb', v:count1)<cr>
line 67: execute "onoremap <silent> <buffer> ][ :call <SID>Python_jump('o', '". b:next_endtoplevel."', 'W', 0, v:count1)<cr>"
line 67: onoremap <silent> <buffer> ][ :call <SID>Python_jump('o', '\v%$\|\S.*\n+(def\|class)', 'W', 0, v:count1)<cr>
line 68: execute "onoremap <silent> <buffer> [] :call <SID>Python_jump('o', '". b:prev_endtoplevel."', 'Wb', 0, v:count1)<cr>"
line 68: onoremap <silent> <buffer> [] :call <SID>Python_jump('o', '\v\S.*\n+(def\|class)', 'Wb', 0, v:count1)<cr>
line 69: execute "onoremap <silent> <buffer> ]m :call <SID>Python_jump('o', '". b:next."', 'W', v:count1)<cr>"
line 69: onoremap <silent> <buffer> ]m :call <SID>Python_jump('o', '\v%$\|^\s*(class\|def\|async def)>', 'W', v:count1)<cr>
line 70: execute "onoremap <silent> <buffer> [m :call <SID>Python_jump('o', '". b:prev."', 'Wb', v:count1)<cr>"
line 70: onoremap <silent> <buffer> [m :call <SID>Python_jump('o', '\v^\s*(class\|def\|async def)>', 'Wb', v:count1)<cr>
line 71: execute "onoremap <silent> <buffer> ]M :call <SID>Python_jump('o', '". b:next_end."', 'W', 0, v:count1)<cr>"
line 71: onoremap <silent> <buffer> ]M :call <SID>Python_jump('o', '\v\S\n*(%$\|^(\s*\n*)*(class\|def\|async def)\|^\S)', 'W', 0, v:count1)<cr>
line 72: execute "onoremap <silent> <buffer> [M :call <SID>Python_jump('o', '". b:prev_end."', 'Wb', 0, v:count1)<cr>"
line 72: onoremap <silent> <buffer> [M :call <SID>Python_jump('o', '\v\S\n*(^(\s*\n*)*(class\|def\|async def)\|^\S)', 'Wb', 0, v:count1)<cr>
line 73: 
line 74: execute "xnoremap <silent> <buffer> ]] :call <SID>Python_jump('x', '". b:next_toplevel."', 'W', v:count1)<cr>"
line 74: xnoremap <silent> <buffer> ]] :call <SID>Python_jump('x', '\v%$\|^(class\|def\|async def)>', 'W', v:count1)<cr>
line 75: execute "xnoremap <silent> <buffer> [[ :call <SID>Python_jump('x', '". b:prev_toplevel."', 'Wb', v:count1)<cr>"
line 75: xnoremap <silent> <buffer> [[ :call <SID>Python_jump('x', '\v^(class\|def\|async def)>', 'Wb', v:count1)<cr>
line 76: execute "xnoremap <silent> <buffer> ][ :call <SID>Python_jump('x', '". b:next_endtoplevel."', 'W', 0, v:count1)<cr>"
line 76: xnoremap <silent> <buffer> ][ :call <SID>Python_jump('x', '\v%$\|\S.*\n+(def\|class)', 'W', 0, v:count1)<cr>
line 77: execute "xnoremap <silent> <buffer> [] :call <SID>Python_jump('x', '". b:prev_endtoplevel."', 'Wb', 0, v:count1)<cr>"
line 77: xnoremap <silent> <buffer> [] :call <SID>Python_jump('x', '\v\S.*\n+(def\|class)', 'Wb', 0, v:count1)<cr>
line 78: execute "xnoremap <silent> <buffer> ]m :call <SID>Python_jump('x', '". b:next."', 'W', v:count1)<cr>"
line 78: xnoremap <silent> <buffer> ]m :call <SID>Python_jump('x', '\v%$\|^\s*(class\|def\|async def)>', 'W', v:count1)<cr>
line 79: execute "xnoremap <silent> <buffer> [m :call <SID>Python_jump('x', '". b:prev."', 'Wb', v:count1)<cr>"
line 79: xnoremap <silent> <buffer> [m :call <SID>Python_jump('x', '\v^\s*(class\|def\|async def)>', 'Wb', v:count1)<cr>
line 80: execute "xnoremap <silent> <buffer> ]M :call <SID>Python_jump('x', '". b:next_end."', 'W', 0, v:count1)<cr>"
line 80: xnoremap <silent> <buffer> ]M :call <SID>Python_jump('x', '\v\S\n*(%$\|^(\s*\n*)*(class\|def\|async def)\|^\S)', 'W', 0, v:count1)<cr>
line 81: execute "xnoremap <silent> <buffer> [M :call <SID>Python_jump('x', '". b:prev_end."', 'Wb', 0, v:count1)<cr>"
line 81: xnoremap <silent> <buffer> [M :call <SID>Python_jump('x', '\v\S\n*(^(\s*\n*)*(class\|def\|async def)\|^\S)', 'Wb', 0, v:count1)<cr>
line 82: 
line 83: if !exists('*<SID>Python_jump')
line 84:   fun! <SID>Python_jump(mode, motion, flags, count, ...) range
line 106: endif
line 107: 
line 108: if has("browsefilter") && !exists("b:browsefilter")
line 110:     let b:browsefilter = "Python Files (*.py)\t*.py\n" . "All Files (*.*)\t*.*\n"
line 111: endif
line 112: 
line 113: if !exists("g:python_recommended_style") || g:python_recommended_style != 0
line 114:     " As suggested by PEP8.
line 115:     setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=8
line 116: endif
line 117: 
line 118: " First time: try finding "pydoc".
line 119: if !exists('g:pydoc_executable')
line 120:     if executable('pydoc')
line 121:         let g:pydoc_executable = 1
line 122:     else
line 123:         let g:pydoc_executable = 0
line 124:     endif
line 125: endif
line 126: " If "pydoc" was found use it for keywordprg.
line 127: if g:pydoc_executable
line 128:     setlocal keywordprg=pydoc
line 129: endif
line 130: 
line 131: let &cpo = s:keepcpo
line 132: unlet s:keepcpo
finished sourcing /usr/share/vim/vim81/ftplugin/python.vim
continuing in function <SNR>17_ftplugin
Searching for "/usr/share/vim/vim81/ftplugin/python_*.vim"
Searching for "/usr/share/vim/vim81/ftplugin/python/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/ftplugin/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/ftplugin/python_*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/ftplugin/python/*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/python.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/python_*.vim"
Searching for "/usr/share/vim/vimfiles/after/ftplugin/python/*.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/python.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/python_*.vim"
Searching for "/var/lib/vim/addons/after/ftplugin/python/*.vim"
Searching for "/home/you/.vim/after/ftplugin/python.vim"
Searching for "/home/you/.vim/after/ftplugin/python_*.vim"
Searching for "/home/you/.vim/after/ftplugin/python/*.vim"
Searching for "/usr/share/vim-scripts/ftplugin/python.vim"
Searching for "/usr/share/vim-scripts/ftplugin/python_*.vim"
Searching for "/usr/share/vim-scripts/ftplugin/python/*.vim"
line 15:     endfor
line 11:     for ft in split(filetype, '\.')
line 12:       execute "runtime! ftplugin/" . ft . ".vim" "ftplugin/" . ft . "_*.vim" "ftplugin/" . ft . "/*.vim"
line 15:     endfor
line 16:   endif
line 17:   call s:after_ftplugin()
calling function <SNR>17_ftplugin[17]..<SNR>17_after_ftplugin()

function <SNR>17_ftplugin[17]..<SNR>17_after_ftplugin returning #0

continuing in function <SNR>17_ftplugin

function <SNR>17_ftplugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

line 0: call s:LoadIndent()
calling function <SNR>19_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14: ^Iexe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/python.vim
Searching for "indent/python.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/indent/python.vim"
Searching for "/var/lib/vim/addons/indent/python.vim"
Searching for "/usr/share/vim/vimfiles/indent/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/indent/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/indent/python.vim"
Searching for "/usr/share/vim/vim81/indent/python.vim"
chdir(/usr/share/vim/vim81/indent)
fchdir() to previous dir
line 14: sourcing "/usr/share/vim/vim81/indent/python.vim"
line 1: " Vim indent file
line 2: " Language:^I^IPython
line 3: " Maintainer:^I^IBram Moolenaar <Bram@vim.org>
line 4: " Original Author:^IDavid Bustos <bustos@caltech.edu>
line 5: " Last Change:^I^I2013 Jul 9
line 6: 
line 7: " Only load this indent file when no other was loaded.
line 8: if exists("b:did_indent")
line 9:   finish
line 10: endif
line 11: let b:did_indent = 1
line 12: 
line 13: " Some preliminary settings
line 14: setlocal nolisp^I^I" Make sure lisp indenting doesn't supersede us
line 15: setlocal autoindent^I" indentexpr isn't much help otherwise
line 16: 
line 17: setlocal indentexpr=GetPythonIndent(v:lnum)
line 18: setlocal indentkeys+=<:>,=elif,=except
line 19: 
line 20: " Only define the function once.
line 21: if exists("*GetPythonIndent")
line 22:   finish
line 23: endif
line 24: let s:keepcpo= &cpo
line 25: set cpo&vim
line 26: 
line 27: " Come here when loading the script the first time.
line 28: 
line 29: let s:maxoff = 50^I" maximum number of lines to look backwards for ()
line 30: 
line 31: function GetPythonIndent(lnum)
line 202: 
line 203: let &cpo = s:keepcpo
line 204: unlet s:keepcpo
line 205: 
line 206: " vim:sw=2
finished sourcing /usr/share/vim/vim81/indent/python.vim
continuing in function <SNR>19_LoadIndent
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/indent/python.vim"
Searching for "/usr/share/vim/vimfiles/after/indent/python.vim"
Searching for "/var/lib/vim/addons/after/indent/python.vim"
Searching for "/home/you/.vim/after/indent/python.vim"
Searching for "/usr/share/vim-scripts/indent/python.vim"
chdir(/usr/share/vim-scripts/indent)
fchdir() to previous dir
line 14: sourcing "/usr/share/vim-scripts/indent/python.vim"
line 1: " Python indent file
line 2: " Language:^I    Python
line 3: " Maintainer:^I    Eric Mc Sween <em@tomcom.de>
line 4: " Original Author:  David Bustos <bustos@caltech.edu> 
line 5: " Last Change:      2004 Jun 07
line 6: 
line 7: " Only load this indent file when no other was loaded.
line 8: if exists("b:did_indent") || exists("loaded_python_indent")
line 9:     finish
finished sourcing /usr/share/vim-scripts/indent/python.vim
continuing in function <SNR>19_LoadIndent
line 15:       endfor
line 13:       for name in split(s, '\.')
line 14: ^Iexe 'runtime! indent/' . name . '.vim'
line 15:       endfor
line 16:     endif
function <SNR>19_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

line 0: exe "set syntax=" . expand("<amatch>")
line 0: set syntax=python
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

line 0: call s:SynSet()
calling function <SNR>4_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 24: runtime! syntax/python.vim syntax/python/*.vim
Searching for "syntax/python.vim syntax/python/*.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/python.vim"
Searching for "/home/you/.vim/syntax/python/*.vim"
Searching for "/var/lib/vim/addons/syntax/python.vim"
Searching for "/var/lib/vim/addons/syntax/python/*.vim"
Searching for "/usr/share/vim/vimfiles/syntax/python.vim"
Searching for "/usr/share/vim/vimfiles/syntax/python/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/python/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/python/*.vim"
Searching for "/usr/share/vim/vim81/syntax/python.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 24: sourcing "/usr/share/vim/vim81/syntax/python.vim"
line 1: " Vim syntax file
line 2: " Language:^IPython
line 3: " Maintainer:^IZvezdan Petkovic <zpetkovic@acm.org>
line 4: " Last Change:^I2016 Oct 29
line 5: " Credits:^INeil Schemenauer <nas@python.ca>
line 6: "^I^IDmitry Vasiliev
line 7: "
line 8: "^I^IThis version is a major rewrite by Zvezdan Petkovic.
line 9: "
line 10: "^I^I- introduced highlighting of doctests
line 11: "^I^I- updated keywords, built-ins, and exceptions
line 12: "^I^I- corrected regular expressions for
line 13: "
line 14: "^I^I  * functions
line 15: "^I^I  * decorators
line 16: "^I^I  * strings
line 17: "^I^I  * escapes
line 18: "^I^I  * numbers
line 19: "^I^I  * space error
line 20: "
line 21: "^I^I- corrected synchronization
line 22: "^I^I- more highlighting is ON by default, except
line 23: "^I^I- space error highlighting is OFF by default
line 24: "
line 25: " Optional highlighting can be controlled using these variables.
line 26: "
line 27: "   let python_no_builtin_highlight = 1
line 28: "   let python_no_doctest_code_highlight = 1
line 29: "   let python_no_doctest_highlight = 1
line 30: "   let python_no_exception_highlight = 1
line 31: "   let python_no_number_highlight = 1
line 32: "   let python_space_error_highlight = 1
line 33: "
line 34: " All the options above can be switched on together.
line 35: "
line 36: "   let python_highlight_all = 1
line 37: "
line 38: 
line 39: " quit when a syntax file was already loaded.
line 40: if exists("b:current_syntax")
line 41:   finish
line 42: endif
line 43: 
line 44: " We need nocompatible mode in order to continue lines with backslashes.
line 45: " Original setting will be restored.
line 46: let s:cpo_save = &cpo
line 47: set cpo&vim
line 48: 
line 49: if exists("python_no_doctest_highlight")
line 50:   let python_no_doctest_code_highlight = 1
line 51: endif
line 52: 
line 53: if exists("python_highlight_all")
line 54:   if exists("python_no_builtin_highlight")
line 55:     unlet python_no_builtin_highlight
line 56:   endif
line 57:   if exists("python_no_doctest_code_highlight")
line 58:     unlet python_no_doctest_code_highlight
line 59:   endif
line 60:   if exists("python_no_doctest_highlight")
line 61:     unlet python_no_doctest_highlight
line 62:   endif
line 63:   if exists("python_no_exception_highlight")
line 64:     unlet python_no_exception_highlight
line 65:   endif
line 66:   if exists("python_no_number_highlight")
line 67:     unlet python_no_number_highlight
line 68:   endif
line 69:   let python_space_error_highlight = 1
line 70: endif
line 71: 
line 72: " Keep Python keywords in alphabetical order inside groups for easy
line 73: " comparison with the table in the 'Python Language Reference'
line 74: " https://docs.python.org/2/reference/lexical_analysis.html#keywords,
line 75: " https://docs.python.org/3/reference/lexical_analysis.html#keywords.
line 76: " Groups are in the order presented in NAMING CONVENTIONS in syntax.txt.
line 77: " Exceptions come last at the end of each group (class and def below).
line 78: "
line 79: " Keywords 'with' and 'as' are new in Python 2.6
line 80: " (use 'from __future__ import with_statement' in Python 2.5).
line 81: "
line 82: " Some compromises had to be made to support both Python 3 and 2.
line 83: " We include Python 3 features, but when a definition is duplicated,
line 84: " the last definition takes precedence.
line 85: "
line 86: " - 'False', 'None', and 'True' are keywords in Python 3 but they are
line 87: "   built-ins in 2 and will be highlighted as built-ins below.
line 88: " - 'exec' is a built-in in Python 3 and will be highlighted as
line 89: "   built-in below.
line 90: " - 'nonlocal' is a keyword in Python 3 and will be highlighted.
line 91: " - 'print' is a built-in in Python 3 and will be highlighted as
line 92: "   built-in below (use 'from __future__ import print_function' in 2)
line 93: " - async and await were added in Python 3.5 and are soft keywords.
line 94: "
line 95: syn keyword pythonStatement^IFalse None True
line 96: syn keyword pythonStatement^Ias assert break continue del exec global
line 97: syn keyword pythonStatement^Ilambda nonlocal pass print return with yield
line 98: syn keyword pythonStatement^Iclass def nextgroup=pythonFunction skipwhite
line 99: syn keyword pythonConditional^Ielif else if
line 100: syn keyword pythonRepeat^Ifor while
line 101: syn keyword pythonOperator^Iand in is not or
line 102: syn keyword pythonException^Iexcept finally raise try
line 103: syn keyword pythonInclude^Ifrom import
line 104: syn keyword pythonAsync^I^Iasync await
line 105: 
line 106: " Decorators (new in Python 2.4)
line 107: " A dot must be allowed because of @MyClass.myfunc decorators.
line 108: syn match   pythonDecorator^I"@" display contained
line 109: syn match   pythonDecoratorName^I"@\s*\h\%(\w\|\.\)*" display contains=pythonDecorator
line 110: 
line 111: " Python 3.5 introduced the use of the same symbol for matrix multiplication:
line 112: " https://www.python.org/dev/peps/pep-0465/.  We now have to exclude the
line 113: " symbol from highlighting when used in that context.
line 114: " Single line multiplication.
line 118: syn match   pythonMatrixMultiply "\%(\w\|[])]\)\s*@" contains=ALLBUT,pythonDecoratorName,pythonDecorator,pythonFunction,pythonDoctestValue transparent
line 119: " Multiplication continued on the next line after backslash.
line 123: syn match   pythonMatrixMultiply "[^\\]\\\s*\n\%(\s*\.\.\.\s\)\=\s\+@" contains=ALLBUT,pythonDecoratorName,pythonDecorator,pythonFunction,pythonDoctestValue transparent
line 124: " Multiplication in a parenthesized expression over multiple lines with @ at
line 125: " the start of each continued line; very similar to decorators and complex.
line 129: syn match   pythonMatrixMultiply "^\s*\%(\%(>>>\|\.\.\.\)\s\+\)\=\zs\%(\h\|\%(\h\|[[(]\).\{-}\%(\w\|[])]\)\)\s*\n\%(\s*\.\.\.\s\)\=\s\+@\%(.\{-}\n\%(\s*\.\.\.\s\)\=\s\+@\)*" contains=ALLBUT,pythonDecoratorName,pythonDecorator,pythonFunction,pythonDoctestValue transparent
line 130: 
line 131: syn match   pythonFunction^I"\h\w*" display contained
line 132: 
line 133: syn match   pythonComment^I"#.*$" contains=pythonTodo,@Spell
line 134: syn keyword pythonTodo^I^IFIXME NOTE NOTES TODO XXX contained
line 135: 
line 136: " Triple-quoted strings can contain doctests.
line 139: syn region  pythonString matchgroup=pythonQuotes start=+[uU]\=\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1" contains=pythonEscape,@Spell
line 142: syn region  pythonString matchgroup=pythonTripleQuotes start=+[uU]\=\z('''\|"""\)+ end="\z1" keepend contains=pythonEscape,pythonSpaceError,pythonDoctest,@Spell
line 145: syn region  pythonRawString matchgroup=pythonQuotes start=+[uU]\=[rR]\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1" contains=@Spell
line 148: syn region  pythonRawString matchgroup=pythonTripleQuotes start=+[uU]\=[rR]\z('''\|"""\)+ end="\z1" keepend contains=pythonSpaceError,pythonDoctest,@Spell
line 149: 
line 150: syn match   pythonEscape^I+\\[abfnrtv'"\\]+ contained
line 151: syn match   pythonEscape^I"\\\o\{1,3}" contained
line 152: syn match   pythonEscape^I"\\x\x\{2}" contained
line 153: syn match   pythonEscape^I"\%(\\u\x\{4}\|\\U\x\{8}\)" contained
line 154: " Python allows case-insensitive Unicode IDs: http://www.unicode.org/charts/
line 155: syn match   pythonEscape^I"\\N{\a\+\%(\s\a\+\)*}" contained
line 156: syn match   pythonEscape^I"\\$"
line 157: 
line 158: " It is very important to understand all details before changing the
line 159: " regular expressions below or their order.
line 160: " The word boundaries are *not* the floating-point number boundaries
line 161: " because of a possible leading or trailing decimal point.
line 162: " The expressions below ensure that all valid number literals are
line 163: " highlighted, and invalid number literals are not.  For example,
line 164: "
line 165: " - a decimal point in '4.' at the end of a line is highlighted,
line 166: " - a second dot in 1.0.0 is not highlighted,
line 167: " - 08 is not highlighted,
line 168: " - 08e0 or 08j are highlighted,
line 169: "
line 170: " and so on, as specified in the 'Python Language Reference'.
line 171: " https://docs.python.org/2/reference/lexical_analysis.html#numeric-literals
line 172: " https://docs.python.org/3/reference/lexical_analysis.html#numeric-literals
line 173: if !exists("python_no_number_highlight")
line 174:   " numbers (including longs and complex)
line 175:   syn match   pythonNumber^I"\<0[oO]\=\o\+[Ll]\=\>"
line 176:   syn match   pythonNumber^I"\<0[xX]\x\+[Ll]\=\>"
line 177:   syn match   pythonNumber^I"\<0[bB][01]\+[Ll]\=\>"
line 178:   syn match   pythonNumber^I"\<\%([1-9]\d*\|0\)[Ll]\=\>"
line 179:   syn match   pythonNumber^I"\<\d\+[jJ]\>"
line 180:   syn match   pythonNumber^I"\<\d\+[eE][+-]\=\d\+[jJ]\=\>"
line 182:   syn match   pythonNumber "\<\d\+\.\%([eE][+-]\=\d\+\)\=[jJ]\=\%(\W\|$\)\@="
line 184:   syn match   pythonNumber "\%(^\|\W\)\zs\d*\.\d\+\%([eE][+-]\=\d\+\)\=[jJ]\=\>"
line 185: endif
line 186: 
line 187: " Group the built-ins in the order in the 'Python Library Reference' for
line 188: " easier comparison.
line 189: " https://docs.python.org/2/library/constants.html
line 190: " https://docs.python.org/3/library/constants.html
line 191: " http://docs.python.org/2/library/functions.html
line 192: " http://docs.python.org/3/library/functions.html
line 193: " http://docs.python.org/2/library/functions.html#non-essential-built-in-functions
line 194: " http://docs.python.org/3/library/functions.html#non-essential-built-in-functions
line 195: " Python built-in functions are in alphabetical order.
line 196: if !exists("python_no_builtin_highlight")
line 197:   " built-in constants
line 198:   " 'False', 'True', and 'None' are also reserved words in Python 3
line 199:   syn keyword pythonBuiltin^IFalse True None
line 200:   syn keyword pythonBuiltin^INotImplemented Ellipsis __debug__
line 201:   " built-in functions
line 202:   syn keyword pythonBuiltin^Iabs all any bin bool bytearray callable chr
line 203:   syn keyword pythonBuiltin^Iclassmethod compile complex delattr dict dir
line 204:   syn keyword pythonBuiltin^Idivmod enumerate eval filter float format
line 205:   syn keyword pythonBuiltin^Ifrozenset getattr globals hasattr hash
line 206:   syn keyword pythonBuiltin^Ihelp hex id input int isinstance
line 207:   syn keyword pythonBuiltin^Iissubclass iter len list locals map max
line 208:   syn keyword pythonBuiltin^Imemoryview min next object oct open ord pow
line 209:   syn keyword pythonBuiltin^Iprint property range repr reversed round set
line 210:   syn keyword pythonBuiltin^Isetattr slice sorted staticmethod str
line 211:   syn keyword pythonBuiltin^Isum super tuple type vars zip __import__
line 212:   " Python 2 only
line 213:   syn keyword pythonBuiltin^Ibasestring cmp execfile file
line 214:   syn keyword pythonBuiltin^Ilong raw_input reduce reload unichr
line 215:   syn keyword pythonBuiltin^Iunicode xrange
line 216:   " Python 3 only
line 217:   syn keyword pythonBuiltin^Iascii bytes exec
line 218:   " non-essential built-in functions; Python 2 only
line 219:   syn keyword pythonBuiltin^Iapply buffer coerce intern
line 220:   " avoid highlighting attributes as builtins
line 223:   syn match   pythonAttribute^I/\.\h\w*/hs=s+1 contains=ALLBUT,pythonBuiltin,pythonFunction,pythonAsync transparent
line 224: endif
line 225: 
line 226: " From the 'Python Library Reference' class hierarchy at the bottom.
line 227: " http://docs.python.org/2/library/exceptions.html
line 228: " http://docs.python.org/3/library/exceptions.html
line 229: if !exists("python_no_exception_highlight")
line 230:   " builtin base exceptions (used mostly as base classes for other exceptions)
line 231:   syn keyword pythonExceptions^IBaseException Exception
line 232:   syn keyword pythonExceptions^IArithmeticError BufferError
line 233:   syn keyword pythonExceptions^ILookupError
line 234:   " builtin base exceptions removed in Python 3
line 235:   syn keyword pythonExceptions^IEnvironmentError StandardError
line 236:   " builtin exceptions (actually raised)
line 237:   syn keyword pythonExceptions^IAssertionError AttributeError
line 238:   syn keyword pythonExceptions^IEOFError FloatingPointError GeneratorExit
line 239:   syn keyword pythonExceptions^IImportError IndentationError
line 240:   syn keyword pythonExceptions^IIndexError KeyError KeyboardInterrupt
line 241:   syn keyword pythonExceptions^IMemoryError NameError NotImplementedError
line 242:   syn keyword pythonExceptions^IOSError OverflowError ReferenceError
line 243:   syn keyword pythonExceptions^IRuntimeError StopIteration SyntaxError
line 244:   syn keyword pythonExceptions^ISystemError SystemExit TabError TypeError
line 245:   syn keyword pythonExceptions^IUnboundLocalError UnicodeError
line 246:   syn keyword pythonExceptions^IUnicodeDecodeError UnicodeEncodeError
line 247:   syn keyword pythonExceptions^IUnicodeTranslateError ValueError
line 248:   syn keyword pythonExceptions^IZeroDivisionError
line 249:   " builtin OS exceptions in Python 3
line 250:   syn keyword pythonExceptions^IBlockingIOError BrokenPipeError
line 251:   syn keyword pythonExceptions^IChildProcessError ConnectionAbortedError
line 252:   syn keyword pythonExceptions^IConnectionError ConnectionRefusedError
line 253:   syn keyword pythonExceptions^IConnectionResetError FileExistsError
line 254:   syn keyword pythonExceptions^IFileNotFoundError InterruptedError
line 255:   syn keyword pythonExceptions^IIsADirectoryError NotADirectoryError
line 256:   syn keyword pythonExceptions^IPermissionError ProcessLookupError
line 257:   syn keyword pythonExceptions^IRecursionError StopAsyncIteration
line 258:   syn keyword pythonExceptions^ITimeoutError
line 259:   " builtin exceptions deprecated/removed in Python 3
line 260:   syn keyword pythonExceptions^IIOError VMSError WindowsError
line 261:   " builtin warnings
line 262:   syn keyword pythonExceptions^IBytesWarning DeprecationWarning FutureWarning
line 263:   syn keyword pythonExceptions^IImportWarning PendingDeprecationWarning
line 264:   syn keyword pythonExceptions^IRuntimeWarning SyntaxWarning UnicodeWarning
line 265:   syn keyword pythonExceptions^IUserWarning Warning
line 266:   " builtin warnings in Python 3
line 267:   syn keyword pythonExceptions^IResourceWarning
line 268: endif
line 269: 
line 270: if exists("python_space_error_highlight")
line 271:   " trailing whitespace
line 272:   syn match   pythonSpaceError^Idisplay excludenl "\s\+$"
line 273:   " mixed tabs and spaces
line 274:   syn match   pythonSpaceError^Idisplay " \+\t"
line 275:   syn match   pythonSpaceError^Idisplay "\t\+ "
line 276: endif
line 277: 
line 278: " Do not spell doctests inside strings.
line 279: " Notice that the end of a string, either ''', or """, will end the contained
line 280: " doctest too.  Thus, we do *not* need to have it as an end pattern.
line 281: if !exists("python_no_doctest_highlight")
line 282:   if !exists("python_no_doctest_code_highlight")
line 285:     syn region pythonDoctest start="^\s*>>>\s" end="^\s*$" contained contains=ALLBUT,pythonDoctest,pythonFunction,@Spell
line 288:     syn region pythonDoctestValue start=+^\s*\%(>>>\s\|\.\.\.\s\|"""\|'''\)\@!\S\++ end="$" contained
line 289:   else
line 292:     syn region pythonDoctest start="^\s*>>>" end="^\s*$" contained contains=@NoSpell
line 293:   endif
line 294: endif
line 295: 
line 296: " Sync at the beginning of class, function, or method definition.
line 297: syn sync match pythonSync grouphere NONE "^\%(def\|class\)\s\+\h\w*\s*[(:]"
line 298: 
line 299: " The default highlight links.  Can be overridden later.
line 300: hi def link pythonStatement^I^IStatement
line 301: hi def link pythonConditional^I^IConditional
line 302: hi def link pythonRepeat^I^IRepeat
line 303: hi def link pythonOperator^I^IOperator
line 304: hi def link pythonException^I^IException
line 305: hi def link pythonInclude^I^IInclude
line 306: hi def link pythonAsync^I^I^IStatement
line 307: hi def link pythonDecorator^I^IDefine
line 308: hi def link pythonDecoratorName^I^IFunction
line 309: hi def link pythonFunction^I^IFunction
line 310: hi def link pythonComment^I^IComment
line 311: hi def link pythonTodo^I^I^ITodo
line 312: hi def link pythonString^I^IString
line 313: hi def link pythonRawString^I^IString
line 314: hi def link pythonQuotes^I^IString
line 315: hi def link pythonTripleQuotes^I^IpythonQuotes
line 316: hi def link pythonEscape^I^ISpecial
line 317: if !exists("python_no_number_highlight")
line 318:   hi def link pythonNumber^I^INumber
line 319: endif
line 320: if !exists("python_no_builtin_highlight")
line 321:   hi def link pythonBuiltin^I^IFunction
line 322: endif
line 323: if !exists("python_no_exception_highlight")
line 324:   hi def link pythonExceptions^I^IStructure
line 325: endif
line 326: if exists("python_space_error_highlight")
line 327:   hi def link pythonSpaceError^I^IError
line 328: endif
line 329: if !exists("python_no_doctest_highlight")
line 330:   hi def link pythonDoctest^I^ISpecial
line 331:   hi def link pythonDoctestValue^IDefine
line 332: endif
line 333: 
line 334: let b:current_syntax = "python"
line 335: 
line 336: let &cpo = s:cpo_save
line 337: unlet s:cpo_save
line 338: 
line 339: " vim:set sw=2 sts=2 ts=8 noet:
finished sourcing /usr/share/vim/vim81/syntax/python.vim
continuing in function <SNR>4_SynSet
Searching for "/usr/share/vim/vim81/syntax/python/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/python/*.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/python.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/python/*.vim"
Searching for "/var/lib/vim/addons/after/syntax/python.vim"
Searching for "/var/lib/vim/addons/after/syntax/python/*.vim"
Searching for "/home/you/.vim/after/syntax/python.vim"
Searching for "/home/you/.vim/after/syntax/python/*.vim"
Searching for "/usr/share/vim-scripts/syntax/python.vim"
Searching for "/usr/share/vim-scripts/syntax/python/*.vim"
line 25:     endfor
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 25:     endfor
line 26:   endif
function <SNR>4_SynSet returning #0

continuing in Syntax Autocommands for "*"

Executing FileType Autocommands for "python"
autocommand let g:syntastic_check_on_wq = 0 

line 0: let g:syntastic_check_on_wq = 0 
Executing BufRead Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

line 0: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 0:  runtime! scripts.vim | endif
line 0:  endif
Executing BufRead Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif

line 0: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
line 0:    setf FALLBACK conf | endif
line 0:  endif
Executing BufRead Autocommands for "*"
autocommand if line("'\"") > 0 && line ("'\"") <= line("$") |   exe "normal! g'\"" | endif

line 0: if line("'\"") > 0 && line ("'\"") <= line("$") |   exe "normal! g'\"" | endif
line 0:    exe "normal! g'\"" | endif
line 0: normal! g'"
line 0:  endif
Executing BufRead Autocommands for "*"
autocommand let @/ = 'sdkfjlsdfj879hhhafkjhk872983l'

line 0: let @/ = 'sdkfjlsdfj879hhhafkjhk872983l'
Executing BufWinEnter Autocommands for "*"
autocommand let b:buFilename = expand('%:t')^I^I^I^I" ideal

line 0: let b:buFilename = expand('%:t')^I^I^I^I" ideal
Executing BufWinEnter Autocommands for "*"
autocommand syntax enable

line 0: syntax enable
line 0: so $VIMRUNTIME/syntax/syntax.vim
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 0: sourcing "/usr/share/vim/vim81/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 15: sourcing "/usr/share/vim/vim81/syntax/nosyntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2006 Apr 16
line 4: 
line 5: " This file is used for ":syntax off".
line 6: " It removes the autocommands and stops highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " Remove all autocommands for the Syntax event.  This also avoids that
line 13: " "syntax=foo" in a modeline triggers the SynSet() function of synload.vim.
line 14: au! Syntax
line 15: 
line 16: " remove all syntax autocommands and remove the syntax for each buffer
line 17: augroup syntaxset
line 18:   au!
line 19:   au BufEnter * syn clear
line 20:   au BufEnter * if exists("b:current_syntax") | unlet b:current_syntax | endif
line 21:   doautoall syntaxset BufEnter *
line 22:   au!
line 23: augroup END
line 24: 
line 25: if exists("syntax_on")
line 26:   unlet syntax_on
line 27: endif
line 28: if exists("syntax_manual")
line 29:   unlet syntax_manual
line 30: endif
finished sourcing /usr/share/vim/vim81/syntax/nosyntax.vim
continuing in /usr/share/vim/vim81/syntax/syntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/synload.vim"
Searching for "/var/lib/vim/addons/syntax/synload.vim"
Searching for "/usr/share/vim/vimfiles/syntax/synload.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/synload.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/synload.vim"
Searching for "/usr/share/vim/vim81/syntax/synload.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 19: sourcing "/usr/share/vim/vim81/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2016 Nov 04
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Set the default highlighting colors.  Use a color scheme if specified.
line 18: if exists("colors_name")
line 19:   exe "colors " . colors_name
line 19: colors xoria256
Searching for "colors/xoria256.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/colors/xoria256.vim"
Searching for "/var/lib/vim/addons/colors/xoria256.vim"
Searching for "/usr/share/vim/vimfiles/colors/xoria256.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/colors/xoria256.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/colors/xoria256.vim"
Searching for "/usr/share/vim/vim81/colors/xoria256.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/colors/xoria256.vim"
Searching for "/usr/share/vim/vimfiles/after/colors/xoria256.vim"
Searching for "/var/lib/vim/addons/after/colors/xoria256.vim"
Searching for "/home/you/.vim/after/colors/xoria256.vim"
Searching for "/usr/share/vim-scripts/colors/xoria256.vim"
chdir(/usr/share/vim-scripts/colors)
fchdir() to previous dir
line 19: sourcing "/usr/share/vim-scripts/colors/xoria256.vim"
line 1: " Vim color file
line 2: "
line 3: " Name:       xoria256.vim
line 4: " Version:    1.1
line 5: " Maintainer: Dmitriy Y. Zotikov (xio) <xio@ungrund.org>
line 6: "
line 7: " Should work in recent 256 color terminals.  88-color terms like urxvt are
line 8: " unsupported.
line 9: "
line 10: " Don't forget to install 'ncurses-term' and set TERM to xterm-256color or
line 11: " similar value.
line 12: "
line 13: " Color numbers (0-255) see:
line 14: " http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html
line 15: 
line 16: 
line 17: 
line 18: " Bla-bla ----------------------------------------------------------------------
line 19: 
line 20: if &t_Co != 256 && ! has("gui_running")
line 21:   echomsg ""
line 22:   echomsg "err: please use GUI or a 256-color terminal (so that t_Co=256 could be set)"
line 23:   echomsg ""
line 24:   finish
line 25: endif
line 26: 
line 27: set background=dark
line 28: 
line 29: hi clear
Searching for "syntax/syncolor.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim81/syntax/syncolor.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 29: sourcing "/usr/share/vim/vim81/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi def Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi def Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi def Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi def Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi def Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi def PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi def Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi def Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi def Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi def Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi def Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi def link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi def link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi def link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi def link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi def link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi def link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi def link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi def link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi def link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi def link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi def link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi def link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi def link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi def link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi def link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi def link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi def link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi def link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi def link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi def link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi def link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi def link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi def link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi def link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim81/syntax/syncolor.vim
continuing in /usr/share/vim-scripts/colors/xoria256.vim
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/you/.vim/after/syntax/syncolor.vim"
Searching for "/usr/share/vim-scripts/syntax/syncolor.vim"
line 30: 
line 31: if exists("syntax_on")
line 32:   syntax reset
line 32: runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/syncolor.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/syncolor.vim"
Searching for "/usr/share/vim/vim81/syntax/syncolor.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 32: sourcing "/usr/share/vim/vim81/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi! link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi! link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi! link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi! link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi! link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi! link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi! link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi! link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi! link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi! link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi! link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi! link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi! link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi! link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi! link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi! link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi! link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi! link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi! link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi! link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi! link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi! link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi! link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi! link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/share/vim/vim81/syntax/syncolor.vim
continuing in /usr/share/vim-scripts/colors/xoria256.vim
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/syncolor.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/var/lib/vim/addons/after/syntax/syncolor.vim"
Searching for "/home/you/.vim/after/syntax/syncolor.vim"
Searching for "/usr/share/vim-scripts/syntax/syncolor.vim"
line 33: endif
line 34: 
line 35: let colors_name = "xoria256"
line 36: 
line 37: 
line 38: 
line 39: " The real part ----------------------------------------------------------------
line 40: 
line 41: "" General colors
line 42: hi Normal       ctermfg=252 guifg=#d0d0d0 ctermbg=234 guibg=#1c1c1c cterm=none gui=none
line 43: hi CursorColumn                           ctermbg=238 guibg=#444444
line 44: hi Cursor                                 ctermbg=214 guibg=#ffaf00
line 45: hi CursorLine                             ctermbg=238 guibg=#444444
line 46: hi FoldColumn   ctermfg=248 guifg=#a8a8a8 ctermbg=bg  guibg=bg
line 47: hi Folded       ctermfg=255 guifg=#eeeeee ctermbg=60  guibg=#5f5f87
line 48: hi IncSearch    ctermfg=0   guifg=#000000 ctermbg=223 guibg=#ffdfaf cterm=none gui=none
line 49: hi NonText      ctermfg=248 guifg=#a8a8a8                           cterm=bold gui=bold
line 50: hi Pmenu        ctermfg=0   guifg=#000000 ctermbg=246 guibg=#949494
line 51: hi PmenuSbar                              ctermbg=243 guibg=#767676
line 52: hi PmenuSel     ctermfg=0   guifg=#000000 ctermbg=243 guibg=#767676
line 53: hi PmenuThumb                             ctermbg=252 guibg=#d0d0d0
line 54: hi Search       ctermfg=0   guifg=#000000 ctermbg=149 guibg=#afdf5f
line 55: hi SignColumn   ctermfg=248 guifg=#a8a8a8
line 56: hi SpecialKey   ctermfg=77  guifg=#5fdf5f
line 57: hi StatusLine                             ctermbg=239 guibg=#4e4e4e cterm=bold gui=bold
line 58: hi StatusLineNC                           ctermbg=237 guibg=#3a3a3a cterm=none gui=none
line 59: hi TabLine      ctermfg=fg  guifg=fg      ctermbg=242 guibg=#666666 cterm=underline gui=underline
line 60: hi TabLineFill  ctermfg=fg  guifg=fg      ctermbg=242 guibg=#666666 cterm=underline gui=underline
line 61: hi VertSplit    ctermfg=237 guifg=#3a3a3a ctermbg=237 guibg=#3a3a3a cterm=none gui=none
line 62: hi Visual       ctermfg=24  guifg=#005f87 ctermbg=153 guibg=#afdfff
line 63: hi VIsualNOS    ctermfg=24  guifg=#005f87 ctermbg=153 guibg=#afdfff cterm=none gui=none
line 64: hi WildMenu     ctermfg=0   guifg=#000000 ctermbg=184 guibg=#dfdf00 cterm=bold gui=bold
line 65: 
line 66: "" Syntax highlighting
line 67: hi Comment      ctermfg=244 guifg=#808080
line 68: hi Constant     ctermfg=229 guifg=#ffffaf
line 69: hi Error        ctermfg=15  guifg=#ffffff ctermbg=1   guibg=#800000
line 70: hi ErrorMsg     ctermfg=15  guifg=#ffffff ctermbg=1   guibg=#800000
line 71: hi Identifier   ctermfg=182 guifg=#dfafdf                           cterm=none
line 72: hi Ignore       ctermfg=238 guifg=#444444
line 73: hi LineNr       ctermfg=248 guifg=#a8a8a8
line 74: hi MatchParen   ctermfg=188 guifg=#dfdfdf ctermbg=68  guibg=#5f87df cterm=bold gui=bold
line 75: hi Number       ctermfg=180 guifg=#dfaf87
line 76: hi PreProc      ctermfg=150 guifg=#afdf87
line 77: hi Special      ctermfg=174 guifg=#df8787
line 78: hi Statement    ctermfg=110 guifg=#87afdf                           cterm=none gui=none
line 79: hi Todo         ctermfg=0   guifg=#000000 ctermbg=184 guibg=#dfdf00
line 80: hi Type         ctermfg=146 guifg=#afafdf                           cterm=none gui=none
line 81: hi Underlined   ctermfg=39  guifg=#00afff                           cterm=underline gui=underline
line 82: 
line 83: "" Special
line 84: """ .diff
line 85: hi diffAdded    ctermfg=150 guifg=#afdf87
line 86: hi diffRemoved  ctermfg=174 guifg=#df8787
line 87: """ vimdiff
line 88: hi diffAdd      ctermfg=bg  guifg=bg      ctermbg=151 guibg=#afdfaf
line 89: "hi diffDelete   ctermfg=bg  guifg=bg      ctermbg=186 guibg=#dfdf87 cterm=none gui=none
line 90: hi diffDelete   ctermfg=bg  guifg=bg      ctermbg=246 guibg=#949494 cterm=none gui=none
line 91: hi diffChange   ctermfg=bg  guifg=bg      ctermbg=181 guibg=#dfafaf
line 92: hi diffText     ctermfg=bg  guifg=bg      ctermbg=174 guibg=#df8787 cterm=none gui=none
line 93: 
line 94: " vim: set expandtab tabstop=2 shiftwidth=2 smarttab softtabstop=2:
finished sourcing /usr/share/vim-scripts/colors/xoria256.vim
continuing in /usr/share/vim/vim81/syntax/synload.vim
line 20: else
line 21:   runtime! syntax/syncolor.vim
line 22: endif
line 23: 
line 24: " Line continuation is used here, remove 'C' from 'cpoptions'
line 25: let s:cpo_save = &cpo
line 26: set cpo&vim
line 27: 
line 28: " First remove all old syntax autocommands.
line 29: au! Syntax
line 30: 
line 31: au Syntax *^I^Icall s:SynSet()
line 32: 
line 33: fun! s:SynSet()
line 61: 
line 62: 
line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 68: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 69: 
line 70: 
line 71: " Source the user-specified syntax highlighting file
line 72: if exists("mysyntaxfile")
line 73:   let s:fname = expand(mysyntaxfile)
line 74:   if filereadable(s:fname)
line 75:     execute "source " . fnameescape(s:fname)
line 76:   endif
line 77: endif
line 78: 
line 79: " Restore 'cpoptions'
line 80: let &cpo = s:cpo_save
line 81: unlet s:cpo_save
finished sourcing /usr/share/vim/vim81/syntax/synload.vim
continuing in /usr/share/vim/vim81/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
Executing FileType Autocommands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

line 0: exe "set syntax=" . expand("<amatch>")
line 0: set syntax=python
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

line 0: call s:SynSet()
calling function <SNR>4_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 24: runtime! syntax/python.vim syntax/python/*.vim
Searching for "syntax/python.vim syntax/python/*.vim" in "/home/you/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein,/usr/share/vim/vim81,/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,/home/you/.vim/after,/usr/share/vim-scripts"
Searching for "/home/you/.vim/syntax/python.vim"
Searching for "/home/you/.vim/syntax/python/*.vim"
Searching for "/var/lib/vim/addons/syntax/python.vim"
Searching for "/var/lib/vim/addons/syntax/python/*.vim"
Searching for "/usr/share/vim/vimfiles/syntax/python.vim"
Searching for "/usr/share/vim/vimfiles/syntax/python/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/repos/github.com/Shougo/dein.vim/syntax/python/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/syntax/python/*.vim"
Searching for "/usr/share/vim/vim81/syntax/python.vim"
chdir(/usr/share/vim/vim81/syntax)
fchdir() to previous dir
line 24: sourcing "/usr/share/vim/vim81/syntax/python.vim"
line 1: " Vim syntax file
line 2: " Language:^IPython
line 3: " Maintainer:^IZvezdan Petkovic <zpetkovic@acm.org>
line 4: " Last Change:^I2016 Oct 29
line 5: " Credits:^INeil Schemenauer <nas@python.ca>
line 6: "^I^IDmitry Vasiliev
line 7: "
line 8: "^I^IThis version is a major rewrite by Zvezdan Petkovic.
line 9: "
line 10: "^I^I- introduced highlighting of doctests
line 11: "^I^I- updated keywords, built-ins, and exceptions
line 12: "^I^I- corrected regular expressions for
line 13: "
line 14: "^I^I  * functions
line 15: "^I^I  * decorators
line 16: "^I^I  * strings
line 17: "^I^I  * escapes
line 18: "^I^I  * numbers
line 19: "^I^I  * space error
line 20: "
line 21: "^I^I- corrected synchronization
line 22: "^I^I- more highlighting is ON by default, except
line 23: "^I^I- space error highlighting is OFF by default
line 24: "
line 25: " Optional highlighting can be controlled using these variables.
line 26: "
line 27: "   let python_no_builtin_highlight = 1
line 28: "   let python_no_doctest_code_highlight = 1
line 29: "   let python_no_doctest_highlight = 1
line 30: "   let python_no_exception_highlight = 1
line 31: "   let python_no_number_highlight = 1
line 32: "   let python_space_error_highlight = 1
line 33: "
line 34: " All the options above can be switched on together.
line 35: "
line 36: "   let python_highlight_all = 1
line 37: "
line 38: 
line 39: " quit when a syntax file was already loaded.
line 40: if exists("b:current_syntax")
line 41:   finish
line 42: endif
line 43: 
line 44: " We need nocompatible mode in order to continue lines with backslashes.
line 45: " Original setting will be restored.
line 46: let s:cpo_save = &cpo
line 47: set cpo&vim
line 48: 
line 49: if exists("python_no_doctest_highlight")
line 50:   let python_no_doctest_code_highlight = 1
line 51: endif
line 52: 
line 53: if exists("python_highlight_all")
line 54:   if exists("python_no_builtin_highlight")
line 55:     unlet python_no_builtin_highlight
line 56:   endif
line 57:   if exists("python_no_doctest_code_highlight")
line 58:     unlet python_no_doctest_code_highlight
line 59:   endif
line 60:   if exists("python_no_doctest_highlight")
line 61:     unlet python_no_doctest_highlight
line 62:   endif
line 63:   if exists("python_no_exception_highlight")
line 64:     unlet python_no_exception_highlight
line 65:   endif
line 66:   if exists("python_no_number_highlight")
line 67:     unlet python_no_number_highlight
line 68:   endif
line 69:   let python_space_error_highlight = 1
line 70: endif
line 71: 
line 72: " Keep Python keywords in alphabetical order inside groups for easy
line 73: " comparison with the table in the 'Python Language Reference'
line 74: " https://docs.python.org/2/reference/lexical_analysis.html#keywords,
line 75: " https://docs.python.org/3/reference/lexical_analysis.html#keywords.
line 76: " Groups are in the order presented in NAMING CONVENTIONS in syntax.txt.
line 77: " Exceptions come last at the end of each group (class and def below).
line 78: "
line 79: " Keywords 'with' and 'as' are new in Python 2.6
line 80: " (use 'from __future__ import with_statement' in Python 2.5).
line 81: "
line 82: " Some compromises had to be made to support both Python 3 and 2.
line 83: " We include Python 3 features, but when a definition is duplicated,
line 84: " the last definition takes precedence.
line 85: "
line 86: " - 'False', 'None', and 'True' are keywords in Python 3 but they are
line 87: "   built-ins in 2 and will be highlighted as built-ins below.
line 88: " - 'exec' is a built-in in Python 3 and will be highlighted as
line 89: "   built-in below.
line 90: " - 'nonlocal' is a keyword in Python 3 and will be highlighted.
line 91: " - 'print' is a built-in in Python 3 and will be highlighted as
line 92: "   built-in below (use 'from __future__ import print_function' in 2)
line 93: " - async and await were added in Python 3.5 and are soft keywords.
line 94: "
line 95: syn keyword pythonStatement^IFalse None True
line 96: syn keyword pythonStatement^Ias assert break continue del exec global
line 97: syn keyword pythonStatement^Ilambda nonlocal pass print return with yield
line 98: syn keyword pythonStatement^Iclass def nextgroup=pythonFunction skipwhite
line 99: syn keyword pythonConditional^Ielif else if
line 100: syn keyword pythonRepeat^Ifor while
line 101: syn keyword pythonOperator^Iand in is not or
line 102: syn keyword pythonException^Iexcept finally raise try
line 103: syn keyword pythonInclude^Ifrom import
line 104: syn keyword pythonAsync^I^Iasync await
line 105: 
line 106: " Decorators (new in Python 2.4)
line 107: " A dot must be allowed because of @MyClass.myfunc decorators.
line 108: syn match   pythonDecorator^I"@" display contained
line 109: syn match   pythonDecoratorName^I"@\s*\h\%(\w\|\.\)*" display contains=pythonDecorator
line 110: 
line 111: " Python 3.5 introduced the use of the same symbol for matrix multiplication:
line 112: " https://www.python.org/dev/peps/pep-0465/.  We now have to exclude the
line 113: " symbol from highlighting when used in that context.
line 114: " Single line multiplication.
line 118: syn match   pythonMatrixMultiply "\%(\w\|[])]\)\s*@" contains=ALLBUT,pythonDecoratorName,pythonDecorator,pythonFunction,pythonDoctestValue transparent
line 119: " Multiplication continued on the next line after backslash.
line 123: syn match   pythonMatrixMultiply "[^\\]\\\s*\n\%(\s*\.\.\.\s\)\=\s\+@" contains=ALLBUT,pythonDecoratorName,pythonDecorator,pythonFunction,pythonDoctestValue transparent
line 124: " Multiplication in a parenthesized expression over multiple lines with @ at
line 125: " the start of each continued line; very similar to decorators and complex.
line 129: syn match   pythonMatrixMultiply "^\s*\%(\%(>>>\|\.\.\.\)\s\+\)\=\zs\%(\h\|\%(\h\|[[(]\).\{-}\%(\w\|[])]\)\)\s*\n\%(\s*\.\.\.\s\)\=\s\+@\%(.\{-}\n\%(\s*\.\.\.\s\)\=\s\+@\)*" contains=ALLBUT,pythonDecoratorName,pythonDecorator,pythonFunction,pythonDoctestValue transparent
line 130: 
line 131: syn match   pythonFunction^I"\h\w*" display contained
line 132: 
line 133: syn match   pythonComment^I"#.*$" contains=pythonTodo,@Spell
line 134: syn keyword pythonTodo^I^IFIXME NOTE NOTES TODO XXX contained
line 135: 
line 136: " Triple-quoted strings can contain doctests.
line 139: syn region  pythonString matchgroup=pythonQuotes start=+[uU]\=\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1" contains=pythonEscape,@Spell
line 142: syn region  pythonString matchgroup=pythonTripleQuotes start=+[uU]\=\z('''\|"""\)+ end="\z1" keepend contains=pythonEscape,pythonSpaceError,pythonDoctest,@Spell
line 145: syn region  pythonRawString matchgroup=pythonQuotes start=+[uU]\=[rR]\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1" contains=@Spell
line 148: syn region  pythonRawString matchgroup=pythonTripleQuotes start=+[uU]\=[rR]\z('''\|"""\)+ end="\z1" keepend contains=pythonSpaceError,pythonDoctest,@Spell
line 149: 
line 150: syn match   pythonEscape^I+\\[abfnrtv'"\\]+ contained
line 151: syn match   pythonEscape^I"\\\o\{1,3}" contained
line 152: syn match   pythonEscape^I"\\x\x\{2}" contained
line 153: syn match   pythonEscape^I"\%(\\u\x\{4}\|\\U\x\{8}\)" contained
line 154: " Python allows case-insensitive Unicode IDs: http://www.unicode.org/charts/
line 155: syn match   pythonEscape^I"\\N{\a\+\%(\s\a\+\)*}" contained
line 156: syn match   pythonEscape^I"\\$"
line 157: 
line 158: " It is very important to understand all details before changing the
line 159: " regular expressions below or their order.
line 160: " The word boundaries are *not* the floating-point number boundaries
line 161: " because of a possible leading or trailing decimal point.
line 162: " The expressions below ensure that all valid number literals are
line 163: " highlighted, and invalid number literals are not.  For example,
line 164: "
line 165: " - a decimal point in '4.' at the end of a line is highlighted,
line 166: " - a second dot in 1.0.0 is not highlighted,
line 167: " - 08 is not highlighted,
line 168: " - 08e0 or 08j are highlighted,
line 169: "
line 170: " and so on, as specified in the 'Python Language Reference'.
line 171: " https://docs.python.org/2/reference/lexical_analysis.html#numeric-literals
line 172: " https://docs.python.org/3/reference/lexical_analysis.html#numeric-literals
line 173: if !exists("python_no_number_highlight")
line 174:   " numbers (including longs and complex)
line 175:   syn match   pythonNumber^I"\<0[oO]\=\o\+[Ll]\=\>"
line 176:   syn match   pythonNumber^I"\<0[xX]\x\+[Ll]\=\>"
line 177:   syn match   pythonNumber^I"\<0[bB][01]\+[Ll]\=\>"
line 178:   syn match   pythonNumber^I"\<\%([1-9]\d*\|0\)[Ll]\=\>"
line 179:   syn match   pythonNumber^I"\<\d\+[jJ]\>"
line 180:   syn match   pythonNumber^I"\<\d\+[eE][+-]\=\d\+[jJ]\=\>"
line 182:   syn match   pythonNumber "\<\d\+\.\%([eE][+-]\=\d\+\)\=[jJ]\=\%(\W\|$\)\@="
line 184:   syn match   pythonNumber "\%(^\|\W\)\zs\d*\.\d\+\%([eE][+-]\=\d\+\)\=[jJ]\=\>"
line 185: endif
line 186: 
line 187: " Group the built-ins in the order in the 'Python Library Reference' for
line 188: " easier comparison.
line 189: " https://docs.python.org/2/library/constants.html
line 190: " https://docs.python.org/3/library/constants.html
line 191: " http://docs.python.org/2/library/functions.html
line 192: " http://docs.python.org/3/library/functions.html
line 193: " http://docs.python.org/2/library/functions.html#non-essential-built-in-functions
line 194: " http://docs.python.org/3/library/functions.html#non-essential-built-in-functions
line 195: " Python built-in functions are in alphabetical order.
line 196: if !exists("python_no_builtin_highlight")
line 197:   " built-in constants
line 198:   " 'False', 'True', and 'None' are also reserved words in Python 3
line 199:   syn keyword pythonBuiltin^IFalse True None
line 200:   syn keyword pythonBuiltin^INotImplemented Ellipsis __debug__
line 201:   " built-in functions
line 202:   syn keyword pythonBuiltin^Iabs all any bin bool bytearray callable chr
line 203:   syn keyword pythonBuiltin^Iclassmethod compile complex delattr dict dir
line 204:   syn keyword pythonBuiltin^Idivmod enumerate eval filter float format
line 205:   syn keyword pythonBuiltin^Ifrozenset getattr globals hasattr hash
line 206:   syn keyword pythonBuiltin^Ihelp hex id input int isinstance
line 207:   syn keyword pythonBuiltin^Iissubclass iter len list locals map max
line 208:   syn keyword pythonBuiltin^Imemoryview min next object oct open ord pow
line 209:   syn keyword pythonBuiltin^Iprint property range repr reversed round set
line 210:   syn keyword pythonBuiltin^Isetattr slice sorted staticmethod str
line 211:   syn keyword pythonBuiltin^Isum super tuple type vars zip __import__
line 212:   " Python 2 only
line 213:   syn keyword pythonBuiltin^Ibasestring cmp execfile file
line 214:   syn keyword pythonBuiltin^Ilong raw_input reduce reload unichr
line 215:   syn keyword pythonBuiltin^Iunicode xrange
line 216:   " Python 3 only
line 217:   syn keyword pythonBuiltin^Iascii bytes exec
line 218:   " non-essential built-in functions; Python 2 only
line 219:   syn keyword pythonBuiltin^Iapply buffer coerce intern
line 220:   " avoid highlighting attributes as builtins
line 223:   syn match   pythonAttribute^I/\.\h\w*/hs=s+1 contains=ALLBUT,pythonBuiltin,pythonFunction,pythonAsync transparent
line 224: endif
line 225: 
line 226: " From the 'Python Library Reference' class hierarchy at the bottom.
line 227: " http://docs.python.org/2/library/exceptions.html
line 228: " http://docs.python.org/3/library/exceptions.html
line 229: if !exists("python_no_exception_highlight")
line 230:   " builtin base exceptions (used mostly as base classes for other exceptions)
line 231:   syn keyword pythonExceptions^IBaseException Exception
line 232:   syn keyword pythonExceptions^IArithmeticError BufferError
line 233:   syn keyword pythonExceptions^ILookupError
line 234:   " builtin base exceptions removed in Python 3
line 235:   syn keyword pythonExceptions^IEnvironmentError StandardError
line 236:   " builtin exceptions (actually raised)
line 237:   syn keyword pythonExceptions^IAssertionError AttributeError
line 238:   syn keyword pythonExceptions^IEOFError FloatingPointError GeneratorExit
line 239:   syn keyword pythonExceptions^IImportError IndentationError
line 240:   syn keyword pythonExceptions^IIndexError KeyError KeyboardInterrupt
line 241:   syn keyword pythonExceptions^IMemoryError NameError NotImplementedError
line 242:   syn keyword pythonExceptions^IOSError OverflowError ReferenceError
line 243:   syn keyword pythonExceptions^IRuntimeError StopIteration SyntaxError
line 244:   syn keyword pythonExceptions^ISystemError SystemExit TabError TypeError
line 245:   syn keyword pythonExceptions^IUnboundLocalError UnicodeError
line 246:   syn keyword pythonExceptions^IUnicodeDecodeError UnicodeEncodeError
line 247:   syn keyword pythonExceptions^IUnicodeTranslateError ValueError
line 248:   syn keyword pythonExceptions^IZeroDivisionError
line 249:   " builtin OS exceptions in Python 3
line 250:   syn keyword pythonExceptions^IBlockingIOError BrokenPipeError
line 251:   syn keyword pythonExceptions^IChildProcessError ConnectionAbortedError
line 252:   syn keyword pythonExceptions^IConnectionError ConnectionRefusedError
line 253:   syn keyword pythonExceptions^IConnectionResetError FileExistsError
line 254:   syn keyword pythonExceptions^IFileNotFoundError InterruptedError
line 255:   syn keyword pythonExceptions^IIsADirectoryError NotADirectoryError
line 256:   syn keyword pythonExceptions^IPermissionError ProcessLookupError
line 257:   syn keyword pythonExceptions^IRecursionError StopAsyncIteration
line 258:   syn keyword pythonExceptions^ITimeoutError
line 259:   " builtin exceptions deprecated/removed in Python 3
line 260:   syn keyword pythonExceptions^IIOError VMSError WindowsError
line 261:   " builtin warnings
line 262:   syn keyword pythonExceptions^IBytesWarning DeprecationWarning FutureWarning
line 263:   syn keyword pythonExceptions^IImportWarning PendingDeprecationWarning
line 264:   syn keyword pythonExceptions^IRuntimeWarning SyntaxWarning UnicodeWarning
line 265:   syn keyword pythonExceptions^IUserWarning Warning
line 266:   " builtin warnings in Python 3
line 267:   syn keyword pythonExceptions^IResourceWarning
line 268: endif
line 269: 
line 270: if exists("python_space_error_highlight")
line 271:   " trailing whitespace
line 272:   syn match   pythonSpaceError^Idisplay excludenl "\s\+$"
line 273:   " mixed tabs and spaces
line 274:   syn match   pythonSpaceError^Idisplay " \+\t"
line 275:   syn match   pythonSpaceError^Idisplay "\t\+ "
line 276: endif
line 277: 
line 278: " Do not spell doctests inside strings.
line 279: " Notice that the end of a string, either ''', or """, will end the contained
line 280: " doctest too.  Thus, we do *not* need to have it as an end pattern.
line 281: if !exists("python_no_doctest_highlight")
line 282:   if !exists("python_no_doctest_code_highlight")
line 285:     syn region pythonDoctest start="^\s*>>>\s" end="^\s*$" contained contains=ALLBUT,pythonDoctest,pythonFunction,@Spell
line 288:     syn region pythonDoctestValue start=+^\s*\%(>>>\s\|\.\.\.\s\|"""\|'''\)\@!\S\++ end="$" contained
line 289:   else
line 292:     syn region pythonDoctest start="^\s*>>>" end="^\s*$" contained contains=@NoSpell
line 293:   endif
line 294: endif
line 295: 
line 296: " Sync at the beginning of class, function, or method definition.
line 297: syn sync match pythonSync grouphere NONE "^\%(def\|class\)\s\+\h\w*\s*[(:]"
line 298: 
line 299: " The default highlight links.  Can be overridden later.
line 300: hi def link pythonStatement^I^IStatement
line 301: hi def link pythonConditional^I^IConditional
line 302: hi def link pythonRepeat^I^IRepeat
line 303: hi def link pythonOperator^I^IOperator
line 304: hi def link pythonException^I^IException
line 305: hi def link pythonInclude^I^IInclude
line 306: hi def link pythonAsync^I^I^IStatement
line 307: hi def link pythonDecorator^I^IDefine
line 308: hi def link pythonDecoratorName^I^IFunction
line 309: hi def link pythonFunction^I^IFunction
line 310: hi def link pythonComment^I^IComment
line 311: hi def link pythonTodo^I^I^ITodo
line 312: hi def link pythonString^I^IString
line 313: hi def link pythonRawString^I^IString
line 314: hi def link pythonQuotes^I^IString
line 315: hi def link pythonTripleQuotes^I^IpythonQuotes
line 316: hi def link pythonEscape^I^ISpecial
line 317: if !exists("python_no_number_highlight")
line 318:   hi def link pythonNumber^I^INumber
line 319: endif
line 320: if !exists("python_no_builtin_highlight")
line 321:   hi def link pythonBuiltin^I^IFunction
line 322: endif
line 323: if !exists("python_no_exception_highlight")
line 324:   hi def link pythonExceptions^I^IStructure
line 325: endif
line 326: if exists("python_space_error_highlight")
line 327:   hi def link pythonSpaceError^I^IError
line 328: endif
line 329: if !exists("python_no_doctest_highlight")
line 330:   hi def link pythonDoctest^I^ISpecial
line 331:   hi def link pythonDoctestValue^IDefine
line 332: endif
line 333: 
line 334: let b:current_syntax = "python"
line 335: 
line 336: let &cpo = s:cpo_save
line 337: unlet s:cpo_save
line 338: 
line 339: " vim:set sw=2 sts=2 ts=8 noet:
finished sourcing /usr/share/vim/vim81/syntax/python.vim
continuing in function <SNR>4_SynSet
Searching for "/usr/share/vim/vim81/syntax/python/*.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/python.vim"
Searching for "/home/you/.cache/dein_vim_plugins/.cache/vimrc/.dein/after/syntax/python/*.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/python.vim"
Searching for "/usr/share/vim/vimfiles/after/syntax/python/*.vim"
Searching for "/var/lib/vim/addons/after/syntax/python.vim"
Searching for "/var/lib/vim/addons/after/syntax/python/*.vim"
Searching for "/home/you/.vim/after/syntax/python.vim"
Searching for "/home/you/.vim/after/syntax/python/*.vim"
Searching for "/usr/share/vim-scripts/syntax/python.vim"
Searching for "/usr/share/vim-scripts/syntax/python/*.vim"
line 25:     endfor
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 25:     endfor
line 26:   endif
function <SNR>4_SynSet returning #0

continuing in Syntax Autocommands for "*"

line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /usr/share/vim/vim81/syntax/syntax.vim
continuing in BufWinEnter Autocommands for "*"
Executing BufEnter Autocommands for "*"
autocommand if mode() != 'c' | checktime | endif

line 0: if mode() != 'c' | checktime | endif
line 0:  checktime | endif
line 0:  endif
Executing BufEnter Autocommands for "*"
autocommand let b:buDir = "/work/BACKUP/vimBackups/all/"

line 0: let b:buDir = "/work/BACKUP/vimBackups/all/"
autocommand let b:buFilename = "some_unsaved_file"        

line 0: let b:buFilename = "some_unsaved_file"        
autocommand let b:lastBuTime="dog"

line 0: let b:lastBuTime="dog"
autocommand let b:lastBuFN ="cat"

line 0: let b:lastBuFN ="cat"
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

line 0: sil call s:LocalBrowse(expand("<amatch>"))
calling function <SNR>30_LocalBrowse('/bench/github_local/gr/gr2.py')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4:   
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
function <SNR>30_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing VimEnter Autocommands for "*"
autocommand let b:buDir = "/work/BACKUP/vimBackups/all/"

line 0: let b:buDir = "/work/BACKUP/vimBackups/all/"
autocommand let b:buFilename = "some_unsaved_file"        

line 0: let b:buFilename = "some_unsaved_file"        
Executing VimEnter Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('VimEnter')

line 0: call dein#autoload#_on_default_event('VimEnter')
calling function dein#autoload#_on_default_event('VimEnter')

line 1:   let lazy_plugins = dein#util#_get_lazy_plugins()
calling function dein#autoload#_on_default_event[1]..dein#util#_get_lazy_plugins()

line 1:   return filter(values(g:dein#_plugins), "!v:val.sourced && v:val.rtp !=# ''")
function dein#autoload#_on_default_event[1]..dein#util#_get_lazy_plugins returning []

continuing in function dein#autoload#_on_default_event

line 2:   let plugins = []
line 3: 
line 4:   let path = expand('<afile>')
line 5:   " For ":edit ~".
line 6:   if fnamemodify(path, ':t') ==# '~'
line 7:     let path = '~'
line 8:   endif
line 9:   let path = dein#util#_expand(path)
calling function dein#autoload#_on_default_event[9]..dein#util#_expand('gr2.py')

line 1:   let path = (a:path =~# '^\~') ? fnamemodify(a:path, ':p') : (a:path =~# '^\$\h\w*') ? substitute(a:path,               '^\$\h\w*', '\=eval(submatch(0))', '') : a:path
line 5:   return (s:is_windows && path =~# '\\') ? dein#util#_substitute_path(path) : path
function dein#autoload#_on_default_event[9]..dein#util#_expand returning 'gr2.py'

continuing in function dein#autoload#_on_default_event

line 10: 
line 11:   for filetype in split(&l:filetype, '\.')
line 12:     let plugins += filter(copy(lazy_plugins), "index(get(v:val, 'on_ft', []), filetype) >= 0")
line 14:   endfor
line 11:   for filetype in split(&l:filetype, '\.')
line 12:     let plugins += filter(copy(lazy_plugins), "index(get(v:val, 'on_ft', []), filetype) >= 0")
line 14:   endfor
line 15: 
line 16:   let plugins += filter(copy(lazy_plugins), "!empty(filter(copy(get(v:val, 'on_path', [])),                'path =~? v:val'))")
line 19:   let plugins += filter(copy(lazy_plugins), "!has_key(v:val, 'on_event')  && has_key(v:val, 'on_if') && eval(v:val.on_if)")
line 22: 
line 23:   call s:source_events(a:event, plugins)
calling function dein#autoload#_on_default_event[23]..<SNR>21_source_events('VimEnter', [])

line 1:   if empty(a:plugins)
line 2:     return
function dein#autoload#_on_default_event[23]..<SNR>21_source_events returning #0

continuing in function dein#autoload#_on_default_event

function dein#autoload#_on_default_event returning #0

continuing in VimEnter Autocommands for "*?"

Executing VimEnter Autocommands for "*"
autocommand echo "\>\^\-\^\< When will you finish \"Learning Vimscript the Hard Way\"?  "

line 0: echo "\>\^\-\^\< When will you finish \"Learning Vimscript the Hard Way\"?  "
>^-^< When will you finish "Learning Vimscript the Hard Way"?  
Executing VimEnter Autocommands for "*"
autocommand sil call s:VimEnter(expand("<amatch>"))

line 0: sil call s:VimEnter(expand("<amatch>"))
calling function <SNR>30_VimEnter('/bench/github_local/gr/gr2.py')

line 1: "  call Dfunc("s:VimEnter(dirname<".a:dirname.">) expand(%)<".expand("%").">")
line 2:   let curwin       = winnr()
line 3:   let s:vimentered = 1
line 4:   windo call s:LocalBrowse(expand("%:p"))
line 4: call s:LocalBrowse(expand("%:p"))
calling function <SNR>30_VimEnter[4]..<SNR>30_LocalBrowse('/bench/github_local/gr/gr2.py')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4:   
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30: "   call Decho("(s:LocalBrowse) COMBAK#23: buf#".bufnr("%")." file<".expand("%")."> line#".line(".")." col#".col("."))
line 31:    sil! call netrw#LocalBrowseCheck(a:dirname)
line 32: "   call Decho("(s:LocalBrowse) COMBAK#24: buf#".bufnr("%")." file<".expand("%")."> line#".line(".")." col#".col("."))
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35: "    call Decho("(s:LocalBrowse) COMBAK#25: buf#".bufnr("%")." file<".expand("%")."> line#".line(".")." col#".col("."))
line 36:    endif
line 37: 
line 38:   else
line 39:    " not a directory, ignore it
line 40: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 41:   endif
line 42: "  call Decho("(s:LocalBrowse) COMBAK#26: buf#".bufnr("%")." file<".expand("%")."> line#".line(".")." col#".col("."))
line 43: 
line 44: "  call Dret("s:LocalBrowse")
function <SNR>30_VimEnter[4]..<SNR>30_LocalBrowse returning #0

continuing in function <SNR>30_VimEnter

line 5:   exe curwin."wincmd w"
line 5: 1wincmd w
line 6: "  call Dret("s:VimEnter")
function <SNR>30_VimEnter returning #0

continuing in VimEnter Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

line 0: call s:Highlight_Matching_Pair()
calling function <SNR>29_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     silent! call matchdelete(3)
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:       let before = strlen(c_before)
line 31:       let c = c_before
line 32:       let i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:       " not found, nothing to do
line 36:       return
function <SNR>29_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Type  :qa!  and press <Enter> to abandon all changes and exit Vim


Executing BufUnload Autocommands for "*"
autocommand :call AutoBackup()

line 0: :call AutoBackup()
calling function AutoBackup()

line 1: ^I" buftype holds \"help\", \"quickfix\" ... indicating special buffers
line 2: ^Iif !empty(&buftype)
line 3: ^I^I" :echo "not backing-up this file as bufftype is ".&buftype
line 4: ^I^I"sleep 1
line 5: ^I^Ireturn
line 6: ^Iendif
line 7: ^I" do not make backups of read-only files
line 8: ^Iif &readonly != 0 
line 9: ^I^I" :echo "the readonly flag is ".&readonly." so no auto-backup made"
line 10: ^I^I" sleep 10
line 11: ^I^Ireturn
line 12: ^Iendif
line 13: ^I    
line 14: ^I" to avoid excessive backups: not more than one BU / minute / file
line 15: ^Ilet b:newBuTime=strftime('%Y-%b-%d__%H:%M')
line 16: ^Ilet b:newBuFN=b:buFilename
line 17: ^Iif (b:newBuTime == b:lastBuTime) && (b:newBuFN == b:lastBuFN)
line 18: ^I^Ireturn
line 19: ^Iendif
line 20: ^I" not updated if the more-than-one-a-minute test failed
line 21: ^Ilet b:lastBuTime = b:newBuTime
line 22: ^Ilet b:lastBuFN = b:newBuFN
line 23: 
line 24: ^I" ok, make a backup
line 25: ^Isilent execute ':write! >> '.b:buDir.'vim_bu_'.strftime('%Y-%b-%d__%H:%M:%S').'_'.b:buFilename.'.bu.txt '
line 25: :write! >> /work/BACKUP/vimBackups/all/vim_bu_2019-Sep-02__16:36:29_some_unsaved_file.bu.txt 
chdir(/work/BACKUP/vimBackups/all)
fchdir() to previous dir
chdir(/work/BACKUP/vimBackups/all)
fchdir() to previous dir
"/work/BACKUP/vimBackups/all/vim_bu_2019-Sep-02__16:36:29_some_unsaved_file.bu.txt" [New] 417L, 12342C appended
line 26: ^Iecho 'just made a backup'
                                    just made a backup
line 27: ^I" sleep 1
function AutoBackup returning #0

continuing in BufUnload Autocommands for "*"

Writing viminfo file "/home/you/.viminfo"